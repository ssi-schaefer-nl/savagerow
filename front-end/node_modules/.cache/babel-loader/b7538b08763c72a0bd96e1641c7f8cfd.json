{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\savagerow\\\\front-end\\\\src\\\\Components\\\\Table\\\\Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport ContextMenu from '../ContextMenu/ContextMenu';\nimport DataGridControlBar from './DataGridControlBar';\nimport DataGridTable from './DataGridTable';\nimport NotificationArea from '../NotificationArea/NotificationArea';\nimport TableService from './TableService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SavageTable = props => {\n  _s();\n\n  const tableService = new TableService(props.table);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [rows, setRows] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n  const [insertedRows, setInsertedRows] = useState([]);\n\n  const addNotification = (content, severity) => {\n    const notification = {\n      content: content,\n      severity: severity\n    };\n    setNotifications(notifications => [...notifications, notification]);\n  };\n\n  const addNotificationUnique = (content, severity) => {\n    if (notifications.find(x => x.content === content) == undefined) {\n      addNotification(content, severity);\n    }\n  };\n\n  const loadTableRows = () => {\n    tableService.getRowSet(data => setRows(data.data.rows), () => addNotification(\"Unable to fetch table rows\", \"error\"));\n    setInsertedRows([]);\n    setNotifications([]);\n  };\n\n  const insertAction = (rId, before) => {\n    if (before) setInsertedRows(irs => [...irs.map(ir => ir >= rId ? ir + 1 : ir), rId]);else setInsertedRows(irs => [...irs.map(ir => ir > rId ? ir + 1 : ir), rId]);\n    setRows(tableService.addRow(rows, rId));\n  };\n\n  const deleteAction = rId => {\n    tableService.delete(rows, rId, resultingRows => {\n      setInsertedRows(irs => irs.filter(r => r != rId).map(ir => ir > rId ? ir - 1 : ir));\n      setRows(resultingRows);\n    }, e => addNotification(\"Unable to delete row: \" + e, \"warning\"));\n  };\n\n  const saveAction = rId => {\n    if (insertedRows.indexOf(rId) == -1) {\n      addNotificationUnique(\"The row you are trying to save is already synchronized\", \"info\");\n      return;\n    }\n\n    tableService.save(rows, rId, resultingRows => {\n      setRows(resultingRows);\n      setInsertedRows(irs => irs.filter(r => r != rId));\n    }, e => addNotification(\"Unable to save data: \" + e, \"error\"));\n  };\n\n  const contextMenuActions = {\n    \"Insert\": () => insertAction(),\n    \"Delete\": () => deleteAction(),\n    \"Save\": () => saveAction(),\n    \"Reload\": () => loadTableRows()\n  };\n\n  const handleRowChange = (newRow, index) => {\n    if (insertedRows.indexOf(index) == -1) tableService.update(rows, newRow, index, rows => setRows(rows), e => addNotification(\"Unable to update row: \" + e, \"warning\"));else setRows(tableService.updateLocal(rows, newRow, index));\n  };\n\n  useEffect(() => {\n    loadTableRows();\n    tableService.getSchema(data => setColumns(data.data.columns), () => addNotification(\"Unable to fetch table schema\", \"error\"));\n  }, []);\n\n  if (insertedRows.length > 0) {\n    addNotificationUnique(\"The highlighted rows are not saved. Save them to prevent loss of new data.\", \"warning\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NotificationArea, {\n      notifications: notifications,\n      handleClose: index => setNotifications(curr => curr.filter((notifications, i) => i !== index))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContextMenu, {\n      menuItems: Object.keys(contextMenuActions),\n      onItemClick: a => contextMenuActions[a](),\n      children: /*#__PURE__*/_jsxDEV(DataGridTable, {\n        rows: rows,\n        columns: columns,\n        highlightRows: insertedRows,\n        onRowSelect: setSelectedRow,\n        onRowChange: handleRowChange,\n        onRowDelete: deleteAction,\n        onRowInsertAbove: idx => insertAction(idx, true),\n        onRowInsertBelow: idx => insertAction(idx, false),\n        onRowSave: saveAction,\n        onRefresh: loadTableRows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataGridControlBar, {\n      rowCount: rows.length,\n      columnCount: columns.length,\n      unsavedRows: insertedRows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SavageTable, \"nY/93GssPvURsuTGCnBwNG1pO9k=\");\n\n_c = SavageTable;\nexport default SavageTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"SavageTable\");","map":{"version":3,"sources":["C:/Users/vincent/git/savagerow/front-end/src/Components/Table/Table.js"],"names":["React","Component","useEffect","useState","ContextMenu","DataGridControlBar","DataGridTable","NotificationArea","TableService","SavageTable","props","tableService","table","selectedRow","setSelectedRow","rows","setRows","columns","setColumns","notifications","setNotifications","insertedRows","setInsertedRows","addNotification","content","severity","notification","addNotificationUnique","find","x","undefined","loadTableRows","getRowSet","data","insertAction","rId","before","irs","map","ir","addRow","deleteAction","delete","resultingRows","filter","r","e","saveAction","indexOf","save","contextMenuActions","handleRowChange","newRow","index","update","updateLocal","getSchema","length","curr","i","Object","keys","a","idx"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\nimport ContextMenu from '../ContextMenu/ContextMenu';\r\nimport DataGridControlBar from './DataGridControlBar';\r\nimport DataGridTable from './DataGridTable';\r\nimport NotificationArea from '../NotificationArea/NotificationArea';\r\nimport TableService from './TableService';\r\n\r\n\r\nconst SavageTable = (props) => {\r\n  const tableService = new TableService(props.table)\r\n  const [selectedRow, setSelectedRow] = useState(null)\r\n  const [rows, setRows] = useState([])\r\n  const [columns, setColumns] = useState([])\r\n  const [notifications, setNotifications] = useState([])\r\n  const [insertedRows, setInsertedRows] = useState([])\r\n\r\n  const addNotification = (content, severity) => {\r\n    const notification = { content: content, severity: severity }\r\n    setNotifications(notifications => [...notifications, notification])\r\n  }\r\n\r\n  const addNotificationUnique = (content, severity) => {\r\n    if (notifications.find(x => x.content === content) == undefined) {\r\n      addNotification(content, severity)\r\n    }\r\n  }\r\n\r\n  const loadTableRows = () => {\r\n    tableService.getRowSet(data => setRows(data.data.rows), () => addNotification(\"Unable to fetch table rows\", \"error\"))\r\n    setInsertedRows([])\r\n    setNotifications([])\r\n  }\r\n\r\n  const insertAction = (rId, before) => {\r\n    if (before)\r\n      setInsertedRows(irs => [...irs.map(ir => ir >= rId ? ir + 1 : ir), rId])\r\n    else\r\n      setInsertedRows(irs => [...irs.map(ir => ir > rId ? ir + 1 : ir), rId])\r\n\r\n    setRows(tableService.addRow(rows, rId))\r\n  }\r\n\r\n  const deleteAction = (rId) => {\r\n    tableService.delete(rows, rId, (resultingRows) => {\r\n      setInsertedRows(irs => irs.filter(r => r != rId).map(ir => ir > rId ? ir - 1 : ir))\r\n      setRows(resultingRows)\r\n    }, (e) => addNotification(\"Unable to delete row: \" + e, \"warning\"))\r\n  }\r\n\r\n  const saveAction = (rId) => {\r\n    if (insertedRows.indexOf(rId) == -1) {\r\n      addNotificationUnique(\"The row you are trying to save is already synchronized\", \"info\")\r\n      return\r\n    }\r\n\r\n    tableService.save(rows, rId, (resultingRows) => {\r\n      setRows(resultingRows)\r\n      setInsertedRows(irs => irs.filter(r => r != rId))\r\n    }, (e) => addNotification(\"Unable to save data: \" + e, \"error\"))\r\n  }\r\n\r\n\r\n  const contextMenuActions = {\r\n    \"Insert\": () => insertAction(),\r\n    \"Delete\": () => deleteAction(),\r\n    \"Save\": () => saveAction(),\r\n    \"Reload\": () => loadTableRows()\r\n  }\r\n\r\n  const handleRowChange = (newRow, index) => {\r\n    if (insertedRows.indexOf(index) == -1)\r\n      tableService.update(rows, newRow, index, (rows) => setRows(rows), (e) => addNotification(\"Unable to update row: \" + e, \"warning\"))\r\n    else\r\n      setRows(tableService.updateLocal(rows, newRow, index))\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    loadTableRows()\r\n    tableService.getSchema(data => setColumns(data.data.columns), () => addNotification(\"Unable to fetch table schema\", \"error\"))\r\n  }, [])\r\n\r\n  if (insertedRows.length > 0) {\r\n    addNotificationUnique(\"The highlighted rows are not saved. Save them to prevent loss of new data.\", \"warning\")\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <NotificationArea\r\n        notifications={notifications}\r\n        handleClose={(index) => setNotifications(curr => curr.filter((notifications, i) => i !== index))}\r\n      />\r\n      <ContextMenu menuItems={Object.keys(contextMenuActions)} onItemClick={(a) => contextMenuActions[a]()}>\r\n        <DataGridTable\r\n          rows={rows}\r\n          columns={columns}\r\n          highlightRows={insertedRows}\r\n          onRowSelect={setSelectedRow}\r\n          onRowChange={handleRowChange}\r\n          onRowDelete={deleteAction}\r\n          onRowInsertAbove={(idx) => insertAction(idx, true)}\r\n          onRowInsertBelow={(idx) => insertAction(idx, false)}\r\n          onRowSave={saveAction}\r\n          onRefresh={loadTableRows}\r\n        />\r\n      </ContextMenu>\r\n      <DataGridControlBar rowCount={rows.length} columnCount={columns.length} unsavedRows={insertedRows} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SavageTable"]},"metadata":{},"sourceType":"module"}