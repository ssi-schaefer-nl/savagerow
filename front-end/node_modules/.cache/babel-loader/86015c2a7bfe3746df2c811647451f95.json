{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\savagerow\\\\front-end\\\\src\\\\Components\\\\Table\\\\Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport DataGrid from \"react-data-grid\";\nimport TableService from '../../Service/TableService';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport { green, grey, yellow } from '@material-ui/core/colors';\nimport StorageIcon from '@material-ui/icons/Storage';\nimport ContextMenu from '../ContextMenu/ContextMenu';\nimport DataGridControlBar from './DataGridControlBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst contextMenuItems = {\n  \"Insert\": () => {\n    console.log(\"insert\");\n  },\n  \"Delete\": () => {\n    console.log(\"delete\");\n  },\n  \"Save\": () => {\n    console.log(\"save\");\n  },\n  \"Reload\": () => {\n    console.log(\"reload\");\n  }\n};\n\nconst SavageTable = props => {\n  _s();\n\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [rows, setRows] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [notification, setNotification] = useState(null);\n  const tableService = new TableService();\n  const table = props.table;\n  useEffect(() => {\n    tableService.getRowsOfTable(table, function (data) {\n      setRows(data.data.rows);\n    }, function (data) {\n      setNotification(data);\n    });\n    tableService.getSchemaOfTable(table, function (data) {\n      setColumns(data.data.columns);\n    }, function (data) {\n      setNotification(data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ContextMenu, {\n      menuItems: contextMenuItems,\n      onItemClick: a => contextMenuItems[a](),\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        rows: rows,\n        columns: columns,\n        onRowChange: undefined,\n        onRowSelect: setSelectedRow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataGridControlBar, {\n      rowCount: rows.length,\n      columnCount: columns.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; // class ST extends Component {\n//   state = {\n//     tableDataService: new TableService(),\n//     tableManager: new TableManager(this.props.table),\n//     alert: null,\n//     columns: [],\n//     dataLoadingError: false,\n//     loading: true,\n//   }\n//   componentDidMount() {\n//     this.state.tableDataService.getSchemaOfTable(this.props.table,\n//       function (data) {\n//         var columns = data.data.columns.map(col => ({\n//           key: col.column,\n//           name: col.column,\n//           resizable: true,\n//           nullable: col.nullable,\n//           editor: col.editable ? TextEditor : undefined\n//         }));\n//         this.setState({\n//           columns: columns,\n//           loading: false,\n//           indexOfSelectedRow: rows.length,\n//         })\n//       }.bind(this),\n//       function (data) {\n//         console.log(data)\n//         this.setState({loading: false, dataLoadingError: true })\n//       }.bind(this));\n//   }\n//   render() {\n//     if (this.state.loading) {\n//       return (<CircularProgress />)\n//     }\n//     if (this.state.dataLoadingError) {\n//       window.location.reload(false)\n//     }\n//     return (\n//       <div>\n//         {this.state.alert &&\n//           <CollapsableAlert\n//             severity={this.state.alert.severity}\n//             message={this.state.alert.message}\n//             onClose={() => this.setState({ alert: null })}\n//           />}\n//         <ContentWithContextMenu\n//           content={\n//             <DataGrid\n//               columns={this.state.columns}\n//               rows={this.tableManager.getRowSet()}\n//               rowGetter={i => this.tableManager.getRow[i]}\n//               onRowsChange={this.update}\n//               enableCellSelect={true}\n//               style={{ 'height': \"70vh\", overflowX: 'hidden' }}\n//               className=\"fill-grid\"\n//               minHeight=\"1000\"\n//               onSelectedCellChange={this.handleCellChange}\n//             />\n//           }\n//           menuItems={Object.keys(this.contextMenuItems)}\n//           action={(a) => this.contextMenuItems[a]()}\n//         />\n//         <BottomNavigation showLabels style={{ backgroundColor: grey[50], borderWidth: 0.5, borderStyle: \"solid\", borderColor: grey[300] }}>\n//           {this.state.unsavedRowsIndices.length > 0 &&\n//             <BottomNavigationAction\n//               label=\"Unsaved rows\"\n//               icon={<SyncIcon style={{ color: yellow[500] }} />}\n//             />\n//           }\n//           <BottomNavigationAction label={\"Rows: \" + this.state.rows.length} icon={<StorageIcon />} />\n//           <BottomNavigationAction label={\"Columns: \" + this.state.columns.length} icon={<StorageIcon />} />\n//         </BottomNavigation>\n//       </div >\n//     );\n//   }\n//   contextMenuItems = {\n//     \"Insert\": () => { this.insertRow(this.) },\n//     \"Delete\": () => { this.deleteRow() },\n//     \"Save\": () => { this.save(true) },\n//     \"Reload\": () => { this.loadTableData() }\n//   }\n//   handleCellChange = (c) => {\n//     if (c.rowIdx != this.state.indexOfSelectedRow && this.state.unsavedRowsIndices.includes(this.state.indexOfSelectedRow)) {\n//       this.save(false)\n//     }\n//     this.state.indexOfSelectedRow = c.rowIdx\n//   }\n//   update = (rows, index) => {\n//     var indexOfUpdatedRow = index.indexes[0];\n//     var updatedRow = rows[indexOfUpdatedRow];\n//     this.tableManager.update(updatedRow, index)\n//   }\n// }\n\n\n_s(SavageTable, \"/J/srHKooi4caKB69JQSL+Y6YSE=\");\n\n_c = SavageTable;\nexport default SavageTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"SavageTable\");","map":{"version":3,"sources":["C:/Users/vincent/git/savagerow/front-end/src/Components/Table/Table.js"],"names":["React","Component","useEffect","useState","DataGrid","TableService","BottomNavigation","BottomNavigationAction","green","grey","yellow","StorageIcon","ContextMenu","DataGridControlBar","contextMenuItems","console","log","SavageTable","props","selectedRow","setSelectedRow","rows","setRows","columns","setColumns","notification","setNotification","tableService","table","getRowsOfTable","data","getSchemaOfTable","a","undefined","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,sBAAP,MAAmC,0CAAnC;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,MAAtB,QAAoC,0BAApC;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;;AAGA,MAAMC,gBAAgB,GAAG;AACvB,YAAU,MAAM;AAAEC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AAAuB,GADlB;AAEvB,YAAU,MAAM;AAAED,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AAAuB,GAFlB;AAGvB,UAAQ,MAAM;AAAED,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAAqB,GAHd;AAIvB,YAAU,MAAM;AAAED,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AAAuB;AAJlB,CAAzB;;AAOA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACkB,IAAD,EAAOC,OAAP,IAAkBnB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACoB,OAAD,EAAUC,UAAV,IAAwBrB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACsB,YAAD,EAAeC,eAAf,IAAkCvB,QAAQ,CAAC,IAAD,CAAhD;AAEA,QAAMwB,YAAY,GAAG,IAAItB,YAAJ,EAArB;AACA,QAAMuB,KAAK,GAAGV,KAAK,CAACU,KAApB;AAEA1B,EAAAA,SAAS,CAAC,MAAM;AACdyB,IAAAA,YAAY,CAACE,cAAb,CAA4BD,KAA5B,EAAmC,UAAUE,IAAV,EAAgB;AAAER,MAAAA,OAAO,CAACQ,IAAI,CAACA,IAAL,CAAUT,IAAX,CAAP;AAAyB,KAA9E,EAAgF,UAAUS,IAAV,EAAgB;AAAEJ,MAAAA,eAAe,CAACI,IAAD,CAAf;AAAuB,KAAzH;AACAH,IAAAA,YAAY,CAACI,gBAAb,CAA8BH,KAA9B,EAAqC,UAAUE,IAAV,EAAgB;AAAEN,MAAAA,UAAU,CAACM,IAAI,CAACA,IAAL,CAAUP,OAAX,CAAV;AAA+B,KAAtF,EAAwF,UAAUO,IAAV,EAAgB;AAAEJ,MAAAA,eAAe,CAACI,IAAD,CAAf;AAAuB,KAAjI;AAED,GAJQ,EAIN,EAJM,CAAT;AAOA,sBACE;AAAA,4BAEE,QAAC,WAAD;AACE,MAAA,SAAS,EAAEhB,gBADb;AAEE,MAAA,WAAW,EAAGkB,CAAD,IAAOlB,gBAAgB,CAACkB,CAAD,CAAhB,EAFtB;AAAA,6BAIE,QAAC,QAAD;AACE,QAAA,IAAI,EAAEX,IADR;AAEE,QAAA,OAAO,EAAEE,OAFX;AAGE,QAAA,WAAW,EAAEU,SAHf;AAIE,QAAA,WAAW,EAAEb;AAJf;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,YAFF,eAaE,QAAC,kBAAD;AACE,MAAA,QAAQ,EAAEC,IAAI,CAACa,MADjB;AAEE,MAAA,WAAW,EAAEX,OAAO,CAACW;AAFvB;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA,kBADF;AAoBD,CApCD,C,CAwCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;GA5IMjB,W;;KAAAA,W;AA8IN,eAAeA,WAAf","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\nimport DataGrid from \"react-data-grid\";\r\nimport TableService from '../../Service/TableService';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport { green, grey, yellow } from '@material-ui/core/colors';\r\nimport StorageIcon from '@material-ui/icons/Storage';\r\nimport ContextMenu from '../ContextMenu/ContextMenu';\r\nimport DataGridControlBar from './DataGridControlBar';\r\n\r\n\r\nconst contextMenuItems = {\r\n  \"Insert\": () => { console.log(\"insert\") },\r\n  \"Delete\": () => { console.log(\"delete\") },\r\n  \"Save\": () => { console.log(\"save\") },\r\n  \"Reload\": () => { console.log(\"reload\") }\r\n}\r\n\r\nconst SavageTable = (props) => {\r\n  const [selectedRow, setSelectedRow] = useState(null)\r\n  const [rows, setRows] = useState([])\r\n  const [columns, setColumns] = useState([])\r\n  const [notification, setNotification] = useState(null)\r\n\r\n  const tableService = new TableService()\r\n  const table = props.table\r\n\r\n  useEffect(() => {\r\n    tableService.getRowsOfTable(table, function (data) { setRows(data.data.rows) }, function (data) { setNotification(data) })\r\n    tableService.getSchemaOfTable(table, function (data) { setColumns(data.data.columns) }, function (data) { setNotification(data) })\r\n\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <>\r\n      {/* <NotificationArea notification={notification} /> */}\r\n      <ContextMenu\r\n        menuItems={contextMenuItems}\r\n        onItemClick={(a) => contextMenuItems[a]()}\r\n      >\r\n        <DataGrid\r\n          rows={rows}\r\n          columns={columns}\r\n          onRowChange={undefined}\r\n          onRowSelect={setSelectedRow}\r\n        />\r\n      </ContextMenu>\r\n      <DataGridControlBar\r\n        rowCount={rows.length}\r\n        columnCount={columns.length}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n\r\n// class ST extends Component {\r\n//   state = {\r\n//     tableDataService: new TableService(),\r\n//     tableManager: new TableManager(this.props.table),\r\n//     alert: null,\r\n//     columns: [],\r\n//     dataLoadingError: false,\r\n//     loading: true,\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     this.state.tableDataService.getSchemaOfTable(this.props.table,\r\n//       function (data) {\r\n//         var columns = data.data.columns.map(col => ({\r\n//           key: col.column,\r\n//           name: col.column,\r\n//           resizable: true,\r\n//           nullable: col.nullable,\r\n//           editor: col.editable ? TextEditor : undefined\r\n//         }));\r\n\r\n//         this.setState({\r\n//           columns: columns,\r\n//           loading: false,\r\n//           indexOfSelectedRow: rows.length,\r\n//         })\r\n\r\n//       }.bind(this),\r\n//       function (data) {\r\n//         console.log(data)\r\n//         this.setState({loading: false, dataLoadingError: true })\r\n//       }.bind(this));\r\n//   }\r\n\r\n//   render() {\r\n//     if (this.state.loading) {\r\n//       return (<CircularProgress />)\r\n//     }\r\n//     if (this.state.dataLoadingError) {\r\n//       window.location.reload(false)\r\n//     }\r\n//     return (\r\n//       <div>\r\n//         {this.state.alert &&\r\n//           <CollapsableAlert\r\n//             severity={this.state.alert.severity}\r\n//             message={this.state.alert.message}\r\n//             onClose={() => this.setState({ alert: null })}\r\n//           />}\r\n//         <ContentWithContextMenu\r\n//           content={\r\n//             <DataGrid\r\n//               columns={this.state.columns}\r\n//               rows={this.tableManager.getRowSet()}\r\n//               rowGetter={i => this.tableManager.getRow[i]}\r\n//               onRowsChange={this.update}\r\n//               enableCellSelect={true}\r\n//               style={{ 'height': \"70vh\", overflowX: 'hidden' }}\r\n//               className=\"fill-grid\"\r\n//               minHeight=\"1000\"\r\n//               onSelectedCellChange={this.handleCellChange}\r\n//             />\r\n//           }\r\n//           menuItems={Object.keys(this.contextMenuItems)}\r\n//           action={(a) => this.contextMenuItems[a]()}\r\n//         />\r\n//         <BottomNavigation showLabels style={{ backgroundColor: grey[50], borderWidth: 0.5, borderStyle: \"solid\", borderColor: grey[300] }}>\r\n//           {this.state.unsavedRowsIndices.length > 0 &&\r\n//             <BottomNavigationAction\r\n//               label=\"Unsaved rows\"\r\n//               icon={<SyncIcon style={{ color: yellow[500] }} />}\r\n//             />\r\n//           }\r\n\r\n//           <BottomNavigationAction label={\"Rows: \" + this.state.rows.length} icon={<StorageIcon />} />\r\n//           <BottomNavigationAction label={\"Columns: \" + this.state.columns.length} icon={<StorageIcon />} />\r\n//         </BottomNavigation>\r\n//       </div >\r\n//     );\r\n//   }\r\n\r\n//   contextMenuItems = {\r\n//     \"Insert\": () => { this.insertRow(this.) },\r\n//     \"Delete\": () => { this.deleteRow() },\r\n//     \"Save\": () => { this.save(true) },\r\n//     \"Reload\": () => { this.loadTableData() }\r\n//   }\r\n\r\n//   handleCellChange = (c) => {\r\n//     if (c.rowIdx != this.state.indexOfSelectedRow && this.state.unsavedRowsIndices.includes(this.state.indexOfSelectedRow)) {\r\n//       this.save(false)\r\n//     }\r\n//     this.state.indexOfSelectedRow = c.rowIdx\r\n//   }\r\n\r\n//   update = (rows, index) => {\r\n//     var indexOfUpdatedRow = index.indexes[0];\r\n//     var updatedRow = rows[indexOfUpdatedRow];\r\n//     this.tableManager.update(updatedRow, index)\r\n//   }\r\n// }\r\n\r\nexport default SavageTable"]},"metadata":{},"sourceType":"module"}