{"ast":null,"code":"import { __extends, __read, __spread } from \"tslib\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DragLayer } from 'react-dnd';\nvar layerStyles = {\n  cursor: '-webkit-grabbing',\n  position: 'fixed',\n  pointerEvents: 'none',\n  zIndex: 100,\n  left: 0,\n  top: 0,\n  width: '100%',\n  height: '100%'\n};\n\nfunction getItemStyles(props) {\n  var currentOffset = props.currentOffset;\n\n  if (!currentOffset) {\n    return {\n      display: 'none'\n    };\n  }\n\n  var x = currentOffset.x,\n      y = currentOffset.y;\n  var transform = \"translate(\" + x + \"px, \" + y + \"px)\";\n  return {\n    transform: transform,\n    WebkitTransform: transform\n  };\n}\n\nvar CustomDragLayer =\n/** @class */\nfunction (_super) {\n  __extends(CustomDragLayer, _super);\n\n  function CustomDragLayer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  CustomDragLayer.prototype.getDraggedRows = function () {\n    var draggedRows;\n    var selectedRows = this.props.selectedRows;\n\n    if (selectedRows && selectedRows.size > 0) {\n      draggedRows = __spread(selectedRows);\n    } else {\n      draggedRows = [this.props.rows[this.props.item.idx]];\n    }\n\n    return draggedRows;\n  };\n\n  CustomDragLayer.prototype.renderDraggedRows = function () {\n    var _this = this;\n\n    var columns = this.props.columns;\n    return this.getDraggedRows().map(function (r, i) {\n      return React.createElement(\"tr\", {\n        key: \"dragged-row-\" + i\n      }, _this.renderDraggedCells(r, i, columns));\n    });\n  };\n\n  CustomDragLayer.prototype.renderDraggedCells = function (item, rowIdx, columns) {\n    var cells = [];\n\n    if (item != null) {\n      columns.forEach(function (c) {\n        if (item.hasOwnProperty(c.key)) {\n          if (c.formatter) {\n            var Formatter = c.formatter;\n            var dependentValues = typeof c.getRowMetaData === 'function' ? c.getRowMetaData(item, c) : {};\n            cells.push(React.createElement(\"td\", {\n              key: \"dragged-cell-\" + rowIdx + \"-\" + c.key,\n              className: \"rdg-cell\",\n              style: {\n                padding: '5px'\n              }\n            }, React.createElement(Formatter, {\n              dependentValues: dependentValues,\n              value: item[c.key]\n            })));\n          } else {\n            cells.push(React.createElement(\"td\", {\n              key: \"dragged-cell-\" + rowIdx + \"-\" + c.key,\n              className: \"rdg-cell\",\n              style: {\n                padding: '5px'\n              }\n            }, item[c.key]));\n          }\n        }\n      });\n    }\n\n    return cells;\n  };\n\n  CustomDragLayer.prototype.render = function () {\n    var isDragging = this.props.isDragging;\n\n    if (!isDragging) {\n      return null;\n    }\n\n    var draggedRows = this.renderDraggedRows();\n    return React.createElement(\"div\", {\n      style: layerStyles,\n      className: \"rdg-dragging\"\n    }, React.createElement(\"div\", {\n      style: getItemStyles(this.props),\n      className: \"rdg-dragging\"\n    }, React.createElement(\"table\", null, React.createElement(\"tbody\", null, draggedRows))));\n  };\n\n  CustomDragLayer.propTypes = {\n    item: PropTypes.object,\n    itemType: PropTypes.string,\n    currentOffset: PropTypes.shape({\n      x: PropTypes.number.isRequired,\n      y: PropTypes.number.isRequired\n    }),\n    isDragging: PropTypes.bool.isRequired,\n    selectedRows: PropTypes.object,\n    rows: PropTypes.array.isRequired,\n    columns: PropTypes.array.isRequired\n  };\n  return CustomDragLayer;\n}(Component);\n\nfunction collect(monitor) {\n  return {\n    item: monitor.getItem(),\n    itemType: monitor.getItemType(),\n    currentOffset: monitor.getSourceClientOffset(),\n    isDragging: monitor.isDragging()\n  };\n}\n\nexport default DragLayer(collect)(CustomDragLayer);","map":{"version":3,"sources":["../../src/draggable/RowDragLayer.js"],"names":[],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DragLayer } from 'react-dnd';\n\nconst layerStyles = {\n  cursor: '-webkit-grabbing',\n  position: 'fixed',\n  pointerEvents: 'none',\n  zIndex: 100,\n  left: 0,\n  top: 0,\n  width: '100%',\n  height: '100%'\n};\n\nfunction getItemStyles(props) {\n  const { currentOffset } = props;\n  if (!currentOffset) {\n    return {\n      display: 'none'\n    };\n  }\n\n  const { x, y } = currentOffset;\n  const transform = `translate(${x}px, ${y}px)`;\n  return {\n    transform,\n    WebkitTransform: transform\n  };\n}\n\nclass CustomDragLayer extends Component {\n  static propTypes = {\n    item: PropTypes.object,\n    itemType: PropTypes.string,\n    currentOffset: PropTypes.shape({\n      x: PropTypes.number.isRequired,\n      y: PropTypes.number.isRequired\n    }),\n    isDragging: PropTypes.bool.isRequired,\n    selectedRows: PropTypes.object,\n    rows: PropTypes.array.isRequired,\n    columns: PropTypes.array.isRequired\n  };\n\n  getDraggedRows() {\n    let draggedRows;\n    const { selectedRows } = this.props;\n    if (selectedRows && selectedRows.size > 0) {\n      draggedRows = [...selectedRows];\n    } else {\n      draggedRows = [this.props.rows[this.props.item.idx]];\n    }\n    return draggedRows;\n  }\n\n  renderDraggedRows() {\n    const { columns } = this.props;\n    return this.getDraggedRows().map((r, i) => {\n      return <tr key={`dragged-row-${i}`}>{this.renderDraggedCells(r, i, columns) }</tr>;\n    });\n  }\n\n  renderDraggedCells(item, rowIdx, columns) {\n    const cells = [];\n    if (item != null) {\n      columns.forEach(c => {\n        if (item.hasOwnProperty(c.key)) {\n          if (c.formatter) {\n            const Formatter = c.formatter;\n            const dependentValues = typeof c.getRowMetaData === 'function' ? c.getRowMetaData(item, c) : {};\n            cells.push(<td key={`dragged-cell-${rowIdx}-${c.key}`} className=\"rdg-cell\" style={{ padding: '5px' }}><Formatter dependentValues={dependentValues} value={item[c.key]} /></td>);\n          } else {\n            cells.push(<td key={`dragged-cell-${rowIdx}-${c.key}`} className=\"rdg-cell\" style={{ padding: '5px' }}>{item[c.key]}</td>);\n          }\n        }\n      });\n    }\n    return cells;\n  }\n\n  render() {\n    const { isDragging } = this.props;\n    if (!isDragging) {\n      return null;\n    }\n    const draggedRows = this.renderDraggedRows();\n    return (\n      <div style={layerStyles} className=\"rdg-dragging\">\n        <div style={getItemStyles(this.props)} className=\"rdg-dragging\">\n          <table><tbody>{draggedRows}</tbody></table>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction collect(monitor) {\n  return {\n    item: monitor.getItem(),\n    itemType: monitor.getItemType(),\n    currentOffset: monitor.getSourceClientOffset(),\n    isDragging: monitor.isDragging()\n  };\n}\n\nexport default DragLayer(collect)(CustomDragLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}