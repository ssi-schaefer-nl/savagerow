{"ast":null,"code":"import { __extends } from \"tslib\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\nimport { isEmptyArray } from '../../../utils';\n\nvar AutoCompleteFilter =\n/** @class */\nfunction (_super) {\n  __extends(AutoCompleteFilter, _super);\n\n  function AutoCompleteFilter(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.getOptions = _this.getOptions.bind(_this);\n    _this.handleChange = _this.handleChange.bind(_this);\n    _this.filterValues = _this.filterValues.bind(_this);\n    _this.state = {\n      options: _this.getOptions(),\n      rawValue: '',\n      placeholder: 'Search'\n    };\n    return _this;\n  } // FIXME\n  // eslint-disable-next-line react/no-deprecated\n\n\n  AutoCompleteFilter.prototype.componentWillReceiveProps = function (newProps) {\n    this.setState({\n      options: this.getOptions(newProps)\n    });\n  };\n\n  AutoCompleteFilter.prototype.getOptions = function (newProps) {\n    var props = newProps || this.props;\n    var options = props.getValidFilterValues(props.column.key);\n    options = options.map(function (o) {\n      if (typeof o === 'string') {\n        return {\n          value: o,\n          label: o\n        };\n      }\n\n      return o;\n    });\n    return options;\n  };\n\n  AutoCompleteFilter.prototype.columnValueContainsSearchTerms = function (columnValue, filterTermValue) {\n    if (columnValue !== undefined && filterTermValue !== undefined) {\n      var strColumnValue = columnValue.toString();\n      var strFilterTermValue = filterTermValue.toString();\n      var checkValueIndex = strColumnValue.trim().toLowerCase().indexOf(strFilterTermValue.trim().toLowerCase());\n      return checkValueIndex !== -1 && (checkValueIndex !== 0 || strColumnValue === strFilterTermValue);\n    }\n\n    return false;\n  };\n\n  AutoCompleteFilter.prototype.filterValues = function (row, columnFilter, columnKey) {\n    var _this = this;\n\n    var include = true;\n\n    if (columnFilter === null) {\n      include = false;\n    } else if (columnFilter.filterTerm && !isEmptyArray(columnFilter.filterTerm)) {\n      if (columnFilter.filterTerm.length) {\n        include = columnFilter.filterTerm.some(function (filterTerm) {\n          return _this.columnValueContainsSearchTerms(row[columnKey], filterTerm.value) === true;\n        });\n      } else {\n        include = this.columnValueContainsSearchTerms(row[columnKey], columnFilter.filterTerm.value);\n      }\n    }\n\n    return include;\n  };\n\n  AutoCompleteFilter.prototype.handleChange = function (value) {\n    var filters = value;\n    this.setState({\n      filters: filters\n    });\n    this.props.onChange({\n      filterTerm: filters,\n      column: this.props.column,\n      rawValue: value,\n      filterValues: this.filterValues\n    });\n  };\n\n  AutoCompleteFilter.prototype.render = function () {\n    return React.createElement(Select, {\n      autosize: false,\n      name: \"filter-\" + this.props.column.key,\n      options: this.state.options,\n      placeholder: this.state.placeholder,\n      onChange: this.handleChange,\n      escapeClearsValue: true,\n      multi: this.props.multiSelection !== undefined && this.props.multiSelection !== null ? this.props.multiSelection : true,\n      value: this.state.filters\n    });\n  };\n\n  AutoCompleteFilter.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    // column: PropTypes.shape(shapes.Column),\n    getValidFilterValues: PropTypes.func,\n    multiSelection: PropTypes.bool\n  };\n  return AutoCompleteFilter;\n}(React.Component);\n\nexport default AutoCompleteFilter;","map":{"version":3,"sources":["../../../../src/cells/headerCells/filters/AutoCompleteFilter.js"],"names":[],"mappings":";AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,OAAO,SAAP,MAAsB,YAAtB;AACA,OAAO,MAAP,MAAmB,cAAnB;AAEA,SAAS,YAAT,QAA6B,gBAA7B;;AAEA,IAAA,kBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAgD,EAAA,SAAA,CAAA,kBAAA,EAAA,MAAA,CAAA;;AAQ9C,WAAA,kBAAA,CAAY,KAAZ,EAAiB;AAAjB,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,IADd;;AAEE,IAAA,KAAI,CAAC,UAAL,GAAkB,KAAI,CAAC,UAAL,CAAgB,IAAhB,CAAqB,KAArB,CAAlB;AACA,IAAA,KAAI,CAAC,YAAL,GAAoB,KAAI,CAAC,YAAL,CAAkB,IAAlB,CAAuB,KAAvB,CAApB;AACA,IAAA,KAAI,CAAC,YAAL,GAAoB,KAAI,CAAC,YAAL,CAAkB,IAAlB,CAAuB,KAAvB,CAApB;AACA,IAAA,KAAI,CAAC,KAAL,GAAa;AAAE,MAAA,OAAO,EAAE,KAAI,CAAC,UAAL,EAAX;AAA8B,MAAA,QAAQ,EAAE,EAAxC;AAA4C,MAAA,WAAW,EAAE;AAAzD,KAAb;;AACD,GAdH,CAgBE;AACA;;;AACA,EAAA,kBAAA,CAAA,SAAA,CAAA,yBAAA,GAAA,UAA0B,QAA1B,EAAkC;AAChC,SAAK,QAAL,CAAc;AAAE,MAAA,OAAO,EAAE,KAAK,UAAL,CAAgB,QAAhB;AAAX,KAAd;AACD,GAFD;;AAIA,EAAA,kBAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,QAAX,EAAmB;AACjB,QAAM,KAAK,GAAG,QAAQ,IAAI,KAAK,KAA/B;AACA,QAAI,OAAO,GAAG,KAAK,CAAC,oBAAN,CAA2B,KAAK,CAAC,MAAN,CAAa,GAAxC,CAAd;AACA,IAAA,OAAO,GAAG,OAAO,CAAC,GAAR,CAAY,UAAA,CAAA,EAAC;AACrB,UAAI,OAAO,CAAP,KAAa,QAAjB,EAA2B;AACzB,eAAO;AAAE,UAAA,KAAK,EAAE,CAAT;AAAY,UAAA,KAAK,EAAE;AAAnB,SAAP;AACD;;AACD,aAAO,CAAP;AACD,KALS,CAAV;AAMA,WAAO,OAAP;AACD,GAVD;;AAYA,EAAA,kBAAA,CAAA,SAAA,CAAA,8BAAA,GAAA,UAA+B,WAA/B,EAA4C,eAA5C,EAA2D;AACzD,QAAI,WAAW,KAAK,SAAhB,IAA6B,eAAe,KAAK,SAArD,EAAgE;AAC9D,UAAM,cAAc,GAAG,WAAW,CAAC,QAAZ,EAAvB;AACA,UAAM,kBAAkB,GAAG,eAAe,CAAC,QAAhB,EAA3B;AACA,UAAM,eAAe,GAAG,cAAc,CAAC,IAAf,GAAsB,WAAtB,GAAoC,OAApC,CAA4C,kBAAkB,CAAC,IAAnB,GAA0B,WAA1B,EAA5C,CAAxB;AACA,aAAO,eAAe,KAAK,CAAC,CAArB,KAA2B,eAAe,KAAK,CAApB,IAAyB,cAAc,KAAK,kBAAvE,CAAP;AACD;;AACD,WAAO,KAAP;AACD,GARD;;AAUA,EAAA,kBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,GAAb,EAAkB,YAAlB,EAAgC,SAAhC,EAAyC;AAAzC,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,OAAO,GAAG,IAAd;;AACA,QAAI,YAAY,KAAK,IAArB,EAA2B;AACzB,MAAA,OAAO,GAAG,KAAV;AACD,KAFD,MAEO,IAAI,YAAY,CAAC,UAAb,IAA2B,CAAC,YAAY,CAAC,YAAY,CAAC,UAAd,CAA5C,EAAuE;AAC5E,UAAI,YAAY,CAAC,UAAb,CAAwB,MAA5B,EAAoC;AAClC,QAAA,OAAO,GAAG,YAAY,CAAC,UAAb,CAAwB,IAAxB,CAA6B,UAAA,UAAA,EAAU;AAC/C,iBAAO,KAAI,CAAC,8BAAL,CAAoC,GAAG,CAAC,SAAD,CAAvC,EAAoD,UAAU,CAAC,KAA/D,MAA0E,IAAjF;AACD,SAFS,CAAV;AAGD,OAJD,MAIO;AACL,QAAA,OAAO,GAAG,KAAK,8BAAL,CAAoC,GAAG,CAAC,SAAD,CAAvC,EAAoD,YAAY,CAAC,UAAb,CAAwB,KAA5E,CAAV;AACD;AACF;;AACD,WAAO,OAAP;AACD,GAdD;;AAgBA,EAAA,kBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,KAAb,EAAkB;AAChB,QAAM,OAAO,GAAG,KAAhB;AACA,SAAK,QAAL,CAAc;AAAE,MAAA,OAAO,EAAA;AAAT,KAAd;AACA,SAAK,KAAL,CAAW,QAAX,CAAoB;AAAE,MAAA,UAAU,EAAE,OAAd;AAAuB,MAAA,MAAM,EAAE,KAAK,KAAL,CAAW,MAA1C;AAAkD,MAAA,QAAQ,EAAE,KAA5D;AAAmE,MAAA,YAAY,EAAE,KAAK;AAAtF,KAApB;AACD,GAJD;;AAMA,EAAA,kBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,WACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO;AACL,MAAA,QAAQ,EAAE,KADL;AAEL,MAAA,IAAI,EAAE,YAAU,KAAK,KAAL,CAAW,MAAX,CAAkB,GAF7B;AAGL,MAAA,OAAO,EAAE,KAAK,KAAL,CAAW,OAHf;AAIL,MAAA,WAAW,EAAE,KAAK,KAAL,CAAW,WAJnB;AAKL,MAAA,QAAQ,EAAE,KAAK,YALV;AAML,MAAA,iBAAiB,EAAA,IANZ;AAOL,MAAA,KAAK,EAAE,KAAK,KAAL,CAAW,cAAX,KAA8B,SAA9B,IAA2C,KAAK,KAAL,CAAW,cAAX,KAA8B,IAAzE,GAAgF,KAAK,KAAL,CAAW,cAA3F,GAA4G,IAP9G;AAQL,MAAA,KAAK,EAAE,KAAK,KAAL,CAAW;AARb,KAAP,CADF;AAYD,GAbD;;AAjEO,EAAA,kBAAA,CAAA,SAAA,GAAY;AACjB,IAAA,QAAQ,EAAE,SAAS,CAAC,IAAV,CAAe,UADR;AAEjB;AACA,IAAA,oBAAoB,EAAE,SAAS,CAAC,IAHf;AAIjB,IAAA,cAAc,EAAE,SAAS,CAAC;AAJT,GAAZ;AA+ET,SAAA,kBAAA;AAAC,CAhFD,CAAgD,KAAK,CAAC,SAAtD,CAAA;;eAAqB,kB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\n\nimport { isEmptyArray } from '../../../utils';\n\nexport default class AutoCompleteFilter extends React.Component {\n  static propTypes = {\n    onChange: PropTypes.func.isRequired,\n    // column: PropTypes.shape(shapes.Column),\n    getValidFilterValues: PropTypes.func,\n    multiSelection: PropTypes.bool\n  };\n\n  constructor(props) {\n    super(props);\n    this.getOptions = this.getOptions.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.filterValues = this.filterValues.bind(this);\n    this.state = { options: this.getOptions(), rawValue: '', placeholder: 'Search' };\n  }\n\n  // FIXME\n  // eslint-disable-next-line react/no-deprecated\n  componentWillReceiveProps(newProps) {\n    this.setState({ options: this.getOptions(newProps) });\n  }\n\n  getOptions(newProps) {\n    const props = newProps || this.props;\n    let options = props.getValidFilterValues(props.column.key);\n    options = options.map(o => {\n      if (typeof o === 'string') {\n        return { value: o, label: o };\n      }\n      return o;\n    });\n    return options;\n  }\n\n  columnValueContainsSearchTerms(columnValue, filterTermValue) {\n    if (columnValue !== undefined && filterTermValue !== undefined) {\n      const strColumnValue = columnValue.toString();\n      const strFilterTermValue = filterTermValue.toString();\n      const checkValueIndex = strColumnValue.trim().toLowerCase().indexOf(strFilterTermValue.trim().toLowerCase());\n      return checkValueIndex !== -1 && (checkValueIndex !== 0 || strColumnValue === strFilterTermValue);\n    }\n    return false;\n  }\n\n  filterValues(row, columnFilter, columnKey) {\n    let include = true;\n    if (columnFilter === null) {\n      include = false;\n    } else if (columnFilter.filterTerm && !isEmptyArray(columnFilter.filterTerm)) {\n      if (columnFilter.filterTerm.length) {\n        include = columnFilter.filterTerm.some(filterTerm => {\n          return this.columnValueContainsSearchTerms(row[columnKey], filterTerm.value) === true;\n        });\n      } else {\n        include = this.columnValueContainsSearchTerms(row[columnKey], columnFilter.filterTerm.value);\n      }\n    }\n    return include;\n  }\n\n  handleChange(value) {\n    const filters = value;\n    this.setState({ filters });\n    this.props.onChange({ filterTerm: filters, column: this.props.column, rawValue: value, filterValues: this.filterValues });\n  }\n\n  render() {\n    return (\n      <Select\n        autosize={false}\n        name={`filter-${this.props.column.key}`}\n        options={this.state.options}\n        placeholder={this.state.placeholder}\n        onChange={this.handleChange}\n        escapeClearsValue\n        multi={this.props.multiSelection !== undefined && this.props.multiSelection !== null ? this.props.multiSelection : true}\n        value={this.state.filters}\n      />\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}