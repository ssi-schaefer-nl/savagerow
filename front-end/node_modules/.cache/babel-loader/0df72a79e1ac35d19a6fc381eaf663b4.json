{"ast":null,"code":"import TableService from '../../Service/TableService';\n\nclass TableManager {\n  constructor(table) {\n    this.table = table;\n    this.tableService = new TableService();\n    this.unsynchronizedRows = [];\n    this.rows = this.loadTableRowSetFromDatabase(); //requires TableService instance\n  }\n\n  loadTableRowSetFromDatabase() {\n    var rows = [];\n    this.tableService.getRowsOfTable(this.table, function (data) {\n      rows = data.data.rows;\n      console.debug(\"Fetched rowset from database for table \" + this.table + \". Number of rows: \" + rows.length);\n    }, function (data) {\n      console.debug(\"An error occured during fetching rowset of table \" + this.table + \" from database. ( \" + data.data + \")\");\n    });\n    return rows;\n  }\n\n  getRowSet() {\n    return this.rows;\n  }\n\n  getRow(index) {\n    return this.rows[index];\n  }\n\n  addRow(columns, index) {\n    var copyOfRows = [...this.rows];\n    var newRow = {};\n    columns.forEach(col => {\n      newRow[col] = \"\";\n    });\n    copyOfRows.splice(index, 0, newRow);\n    this.rows = copyOfRows;\n    updateUnsynchronizedRowsForInsertion(index);\n    console.debug(\"Inserted a new row at index \" + index);\n  }\n\n  update(updatedRow, index) {\n    var oldRow = this.rows[index];\n    var newRowSet = [...this.rows];\n    var rowUpdateData = {\n      oldRow: oldRow,\n      newRow: updatedRow\n    };\n    this.tableService.addRowToTable(this.table, rowUpdateData, function () {\n      newRowSet[index] = updatedRow;\n      console.debug(\"Added row to database for table \" + this.table);\n    }, function (data) {\n      console.debug(\"Error occured during adding row to database for table \" + this.table + \"(\" + data.data + \")\");\n    });\n    this.rows = newRowSet;\n  }\n\n  delete(index) {\n    if (this.unsynchronizedRows.includes(index)) {\n      this.deleteRowFromLocalTable(index);\n    } else {\n      var data = {\n        row: this.rows[index]\n      };\n      this.tableService.deleteRowOfTable(this.table, data, function () {\n        this.deleteRowFromLocalTable(index);\n      }.bind(this), function (data) {\n        console.log(data);\n      });\n    }\n  }\n\n  addUnsynchronizedRowsToDatabase() {\n    var exceptions = [];\n    var addedRows = [];\n    this.unsynchronizedRows.forEach(index => {\n      this.tableService.addRowToTable(this.table, {\n        row: row\n      }, function (data) {\n        var synchronizedRow = data.data.row;\n        this.rows[index] = synchronizedRow;\n        addedRows.push(index);\n      }, function (data) {\n        exceptions.push({\n          index: index,\n          message: data.data\n        });\n      });\n    });\n    addedRows.forEach(i => deleteRowFromUnsynchronizedRowsIfPresent(i));\n    return exceptions;\n  }\n\n  addRowToDatabase(row) {\n    var data = {\n      row: row\n    };\n    this.tableService.addRowToTable(this.table, data, function (data) {\n      this.state.rows[rowIndex] = data.data.row;\n      var idx = this.state.unsavedRowsIndices.indexOf(rowIndex);\n      console.log(idx);\n      this.state.unsavedRowsIndices.splice(idx, 1); // Unmark row as new\n\n      this.forceUpdate();\n    }.bind(this), function (data) {\n      console.log(data);\n    }.bind(this));\n  }\n\n  deleteRowFromLocalTable(index) {\n    var newRowSet = [...this.rows];\n    newRowSet.splice(index, 1);\n    this.rows = newRowSet;\n    updateUnsynchronizedRowsForDeletion(index);\n  }\n\n  updateUnsynchronizedRowsAfterInsertion(index) {\n    this.unsynchronizedRows = this.unsynchronizedRows.map(i => index <= i ? i + 1 : i);\n    this.this.unsynchronizedRows.push(index);\n  }\n\n  updateUnsynchronizedRowsAfterDeletion(index) {\n    deleteRowFromUnsynchronizedRowsIfPresent(index);\n    this.unsynchronizedRows = this.unsynchronizedRows.map(i => index <= i ? i - 1 : i);\n  }\n\n  deleteRowFromUnsynchronizedRowsIfPresent(index) {\n    var indexInList = this.unsynchronizedRows.indexOf(index);\n    if (indexInList > -1) this.unsynchronizedRows.splice(indexInList, 1);\n  }\n\n}\n\nexport default TableManager;","map":{"version":3,"sources":["C:/Users/vincent/git/savagerow/front-end/src/Components/Table/TableManager.js"],"names":["TableService","TableManager","constructor","table","tableService","unsynchronizedRows","rows","loadTableRowSetFromDatabase","getRowsOfTable","data","console","debug","length","getRowSet","getRow","index","addRow","columns","copyOfRows","newRow","forEach","col","splice","updateUnsynchronizedRowsForInsertion","update","updatedRow","oldRow","newRowSet","rowUpdateData","addRowToTable","delete","includes","deleteRowFromLocalTable","row","deleteRowOfTable","bind","log","addUnsynchronizedRowsToDatabase","exceptions","addedRows","synchronizedRow","push","message","i","deleteRowFromUnsynchronizedRowsIfPresent","addRowToDatabase","state","rowIndex","idx","unsavedRowsIndices","indexOf","forceUpdate","updateUnsynchronizedRowsForDeletion","updateUnsynchronizedRowsAfterInsertion","map","this","updateUnsynchronizedRowsAfterDeletion","indexInList"],"mappings":"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","sourcesContent":["import TableService from '../../Service/TableService';\r\n\r\n\r\nclass TableManager {\r\n    constructor(table) {\r\n        this.table = table\r\n        this.tableService = new TableService()\r\n        this.unsynchronizedRows = []\r\n        this.rows = this.loadTableRowSetFromDatabase(); //requires TableService instance\r\n    }\r\n\r\n    loadTableRowSetFromDatabase() {\r\n        var rows = []\r\n        this.tableService.getRowsOfTable(\r\n            this.table,\r\n            function (data) {\r\n                rows = data.data.rows\r\n                console.debug(\"Fetched rowset from database for table \" + this.table + \". Number of rows: \" + rows.length)\r\n            },\r\n            function (data) {\r\n                console.debug(\"An error occured during fetching rowset of table \" + this.table + \" from database. ( \" + data.data + \")\")\r\n            }\r\n        )\r\n\r\n        return rows\r\n    }\r\n\r\n    getRowSet() {\r\n        return this.rows\r\n    }\r\n\r\n    getRow(index) {\r\n        return this.rows[index]\r\n    }\r\n\r\n    addRow(columns, index) {\r\n        var copyOfRows = [...this.rows]\r\n        var newRow = {}\r\n        columns.forEach(col => { newRow[col] = \"\" })\r\n        copyOfRows.splice(index, 0, newRow)\r\n        this.rows = copyOfRows;\r\n        updateUnsynchronizedRowsForInsertion(index);\r\n        console.debug(\"Inserted a new row at index \" + index)\r\n    }\r\n\r\n\r\n    update(updatedRow, index) {\r\n        var oldRow = this.rows[index]\r\n        var newRowSet = [...this.rows]\r\n        var rowUpdateData = { oldRow: oldRow, newRow: updatedRow }\r\n\r\n        this.tableService.addRowToTable(\r\n            this.table,\r\n            rowUpdateData,\r\n            function () {\r\n                newRowSet[index] = updatedRow;\r\n                console.debug(\"Added row to database for table \" + this.table)\r\n            },\r\n            function (data) {\r\n                console.debug(\"Error occured during adding row to database for table \" + this.table + \"(\" + data.data + \")\")\r\n            });\r\n\r\n        this.rows = newRowSet\r\n    }\r\n\r\n    delete(index) {\r\n        if (this.unsynchronizedRows.includes(index)) {\r\n            this.deleteRowFromLocalTable(index)\r\n        } else {\r\n            var data = { row: this.rows[index] }\r\n            this.tableService.deleteRowOfTable(\r\n                this.table,\r\n                data,\r\n                function () {\r\n                    this.deleteRowFromLocalTable(index)\r\n                }.bind(this),\r\n                function (data) {\r\n                    console.log(data)\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    addUnsynchronizedRowsToDatabase() {\r\n        var exceptions = []\r\n        var addedRows = []\r\n\r\n        this.unsynchronizedRows.forEach(index => {\r\n            this.tableService.addRowToTable(this.table, { row: row },\r\n                function (data) {\r\n                    var synchronizedRow = data.data.row\r\n                    this.rows[index] = synchronizedRow\r\n                    addedRows.push(index)\r\n                },\r\n                function (data) { exceptions.push({ index: index, message: data.data }) }\r\n            )\r\n        })\r\n\r\n        addedRows.forEach(i => deleteRowFromUnsynchronizedRowsIfPresent(i))\r\n\r\n        return exceptions\r\n    }\r\n\r\n    addRowToDatabase(row) {\r\n        var data = { row: row }\r\n        this.tableService.addRowToTable(\r\n            this.table,\r\n            data,\r\n            function (data) {\r\n                this.state.rows[rowIndex] = data.data.row\r\n                var idx = this.state.unsavedRowsIndices.indexOf(rowIndex)\r\n                console.log(idx)\r\n                this.state.unsavedRowsIndices.splice(idx, 1); // Unmark row as new\r\n                this.forceUpdate();\r\n\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n            }.bind(this));\r\n    }\r\n\r\n    deleteRowFromLocalTable(index) {\r\n        var newRowSet = [...this.rows]\r\n        newRowSet.splice(index, 1)\r\n        this.rows = newRowSet;\r\n        updateUnsynchronizedRowsForDeletion(index);\r\n    }\r\n\r\n    updateUnsynchronizedRowsAfterInsertion(index) {\r\n        this.unsynchronizedRows = this.unsynchronizedRows.map(i => (index <= i ? i + 1 : i))\r\n        this.this.unsynchronizedRows.push(index)\r\n    }\r\n\r\n    updateUnsynchronizedRowsAfterDeletion(index) {\r\n        deleteRowFromUnsynchronizedRowsIfPresent(index)\r\n        this.unsynchronizedRows = this.unsynchronizedRows.map(i => (index <= i ? i - 1 : i))\r\n    }\r\n\r\n    deleteRowFromUnsynchronizedRowsIfPresent(index) {\r\n        var indexInList = this.unsynchronizedRows.indexOf(index)\r\n        if (indexInList > -1) this.unsynchronizedRows.splice(indexInList, 1)\r\n    }\r\n}\r\nexport default TableManager"]},"metadata":{},"sourceType":"module"}