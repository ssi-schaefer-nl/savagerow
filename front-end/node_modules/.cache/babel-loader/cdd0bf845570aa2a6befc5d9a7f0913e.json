{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\savagerow\\\\front-end\\\\src\\\\Components\\\\Table\\\\Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport DataGrid, { TextEditor } from \"react-data-grid\";\nimport TableManager from \"./TableManager\";\nimport TableService from '../../Service/TableService';\nimport { CircularProgress, Typography } from '@material-ui/core';\nimport CollapsableAlert from '../CollapsableAlert/CollapsableAlert';\nimport ContentWithContextMenu from '../ContentWithContextMenu/ContentWithContextMenu';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport { green, grey, yellow } from '@material-ui/core/colors';\nimport SyncIcon from '@material-ui/icons/Sync';\nimport StorageIcon from '@material-ui/icons/Storage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SavageTable = props => {\n  _s();\n\n  const tableService = new TableService();\n  const [tableManager, setTableManager] = useState(new TableManager(props.table));\n  const [exceptions, setExceptions] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [rows, setRows] = useState([]);\n  useEffect(() => {\n    setRows(tableManager.getRowSet());\n  }, []);\n  console.log(rows);\n  setLoading(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DataGrid, {\n      columns: columns,\n      rows: rows,\n      rowGetter: i => tableManager.getRow[i],\n      onRowsChange: (rows, index) => {\n        var i = index.indexes[0];\n        tableManager.update(rows[i], i);\n      },\n      enableCellSelect: true,\n      style: {\n        'height': \"70vh\",\n        overflowX: 'hidden'\n      },\n      className: \"fill-grid\",\n      minHeight: \"1000\" // onSelectedCellChange={this.handleCellChange}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BottomNavigation, {\n      showLabels: true,\n      style: {\n        backgroundColor: grey[50],\n        borderWidth: 0.5,\n        borderStyle: \"solid\",\n        borderColor: grey[300]\n      },\n      children: [/*#__PURE__*/_jsxDEV(BottomNavigationAction, {\n        label: \"Rows: 5\",\n        icon: /*#__PURE__*/_jsxDEV(StorageIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 57\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BottomNavigationAction, {\n        label: \"Columns: 5\",\n        icon: /*#__PURE__*/_jsxDEV(StorageIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 60\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; // const update = (rows, index) => {\n//   var indexOfUpdatedRow = index.indexes[0];\n//   var updatedRow = rows[indexOfUpdatedRow];\n//   this.tableManager.update(updatedRow, index)\n// }\n// class ST extends Component {\n//   state = {\n//     tableDataService: new TableService(),\n//     tableManager: new TableManager(this.props.table),\n//     alert: null,\n//     columns: [],\n//     dataLoadingError: false,\n//     loading: true,\n//   }\n//   componentDidMount() {\n//     this.state.tableDataService.getSchemaOfTable(this.props.table,\n//       function (data) {\n//         var columns = data.data.columns.map(col => ({\n//           key: col.column,\n//           name: col.column,\n//           resizable: true,\n//           nullable: col.nullable,\n//           editor: col.editable ? TextEditor : undefined\n//         }));\n//         this.setState({\n//           columns: columns,\n//           loading: false,\n//           indexOfSelectedRow: rows.length,\n//         })\n//       }.bind(this),\n//       function (data) {\n//         console.log(data)\n//         this.setState({ loading: false, dataLoadingError: true })\n//       }.bind(this));\n//   }\n//   render() {\n//     if (this.state.loading) {\n//       return (<CircularProgress />)\n//     }\n//     if (this.state.dataLoadingError) {\n//       window.location.reload(false)\n//     }\n//     return (\n//       <div>\n//         {this.state.alert &&\n//           <CollapsableAlert\n//             severity={this.state.alert.severity}\n//             message={this.state.alert.message}\n//             onClose={() => this.setState({ alert: null })}\n//           />}\n//         <ContentWithContextMenu\n//           content={\n//             <DataGrid\n//               columns={this.state.columns}\n//               rows={this.tableManager.getRowSet()}\n//               rowGetter={i => this.tableManager.getRow[i]}\n//               onRowsChange={this.update}\n//               enableCellSelect={true}\n//               style={{ 'height': \"70vh\", overflowX: 'hidden' }}\n//               className=\"fill-grid\"\n//               minHeight=\"1000\"\n//               onSelectedCellChange={this.handleCellChange}\n//             />\n//           }\n//           menuItems={Object.keys(this.contextMenuItems)}\n//           action={(a) => this.contextMenuItems[a]()}\n//         />\n//         <BottomNavigation showLabels style={{ backgroundColor: grey[50], borderWidth: 0.5, borderStyle: \"solid\", borderColor: grey[300] }}>\n//           {this.state.unsavedRowsIndices.length > 0 &&\n//             <BottomNavigationAction\n//               label=\"Unsaved rows\"\n//               icon={<SyncIcon style={{ color: yellow[500] }} />}\n//             />\n//           }\n//           <BottomNavigationAction label={\"Rows: \" + this.state.rows.length} icon={<StorageIcon />} />\n//           <BottomNavigationAction label={\"Columns: \" + this.state.columns.length} icon={<StorageIcon />} />\n//         </BottomNavigation>\n//       </div >\n//     );\n//   }\n//   contextMenuItems = {\n//     \"Insert\": () => { this.insertRow(this.) },\n//     \"Delete\": () => { this.deleteRow() },\n//     \"Save\": () => { this.save(true) },\n//     \"Reload\": () => { this.loadTableData() }\n//   }\n//   handleCellChange = (c) => {\n//     if (c.rowIdx != this.state.indexOfSelectedRow && this.state.unsavedRowsIndices.includes(this.state.indexOfSelectedRow)) {\n//       this.save(false)\n//     }\n//     this.state.indexOfSelectedRow = c.rowIdx\n//   }\n//   update = (rows, index) => {\n//     var indexOfUpdatedRow = index.indexes[0];\n//     var updatedRow = rows[indexOfUpdatedRow];\n//     this.tableManager.update(updatedRow, index)\n//   }\n// }\n\n\n_s(SavageTable, \"QEq7hkX3GlVOPWi6ZIzMqRhIXFM=\");\n\n_c = SavageTable;\nexport default SavageTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"SavageTable\");","map":{"version":3,"sources":["C:/Users/vincent/git/savagerow/front-end/src/Components/Table/Table.js"],"names":["React","Component","useEffect","useState","DataGrid","TextEditor","TableManager","TableService","CircularProgress","Typography","CollapsableAlert","ContentWithContextMenu","BottomNavigation","BottomNavigationAction","LocationOnIcon","green","grey","yellow","SyncIcon","StorageIcon","SavageTable","props","tableService","tableManager","setTableManager","table","exceptions","setExceptions","columns","setColumns","loading","setLoading","rows","setRows","getRowSet","console","log","i","getRow","index","indexes","update","overflowX","backgroundColor","borderWidth","borderStyle","borderColor"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,OAAOC,QAAP,IAAmBC,UAAnB,QAAqC,iBAArC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,mBAA7C;AACA,OAAOC,gBAAP,MAA6B,sCAA7B;AACA,OAAOC,sBAAP,MAAmC,kDAAnC;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,sBAAP,MAAmC,0CAAnC;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,MAAtB,QAAoC,0BAApC;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;;;;AAIA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAMC,YAAY,GAAG,IAAIf,YAAJ,EAArB;AACA,QAAM,CAACgB,YAAD,EAAeC,eAAf,IAAkCrB,QAAQ,CAAC,IAAIG,YAAJ,CAAiBe,KAAK,CAACI,KAAvB,CAAD,CAAhD;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BxB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACyB,OAAD,EAAUC,UAAV,IAAwB1B,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAAC2B,OAAD,EAAUC,UAAV,IAAwB5B,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAAC6B,IAAD,EAAOC,OAAP,IAAkB9B,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd+B,IAAAA,OAAO,CAACV,YAAY,CAACW,SAAb,EAAD,CAAP;AACD,GAFQ,EAEN,EAFM,CAAT;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAD,EAAAA,UAAU,CAAC,KAAD,CAAV;AACA,sBACE;AAAA,4BACE,QAAC,QAAD;AACE,MAAA,OAAO,EAAEH,OADX;AAEE,MAAA,IAAI,EAAEI,IAFR;AAGE,MAAA,SAAS,EAAEK,CAAC,IAAId,YAAY,CAACe,MAAb,CAAoBD,CAApB,CAHlB;AAIE,MAAA,YAAY,EAAE,CAACL,IAAD,EAAOO,KAAP,KAAiB;AAC7B,YAAIF,CAAC,GAAGE,KAAK,CAACC,OAAN,CAAc,CAAd,CAAR;AACAjB,QAAAA,YAAY,CAACkB,MAAb,CAAoBT,IAAI,CAACK,CAAD,CAAxB,EAA6BA,CAA7B;AACD,OAPH;AAQE,MAAA,gBAAgB,EAAE,IARpB;AASE,MAAA,KAAK,EAAE;AAAE,kBAAU,MAAZ;AAAoBK,QAAAA,SAAS,EAAE;AAA/B,OATT;AAUE,MAAA,SAAS,EAAC,WAVZ;AAWE,MAAA,SAAS,EAAC,MAXZ,CAYE;;AAZF;AAAA;AAAA;AAAA;AAAA,YADF,eAeE,QAAC,gBAAD;AAAkB,MAAA,UAAU,MAA5B;AAA6B,MAAA,KAAK,EAAE;AAAEC,QAAAA,eAAe,EAAE3B,IAAI,CAAC,EAAD,CAAvB;AAA6B4B,QAAAA,WAAW,EAAE,GAA1C;AAA+CC,QAAAA,WAAW,EAAE,OAA5D;AAAqEC,QAAAA,WAAW,EAAE9B,IAAI,CAAC,GAAD;AAAtF,OAApC;AAAA,8BAOE,QAAC,sBAAD;AAAwB,QAAA,KAAK,EAAE,SAA/B;AAA0C,QAAA,IAAI,eAAE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAhD;AAAA;AAAA;AAAA;AAAA,cAPF,eAQE,QAAC,sBAAD;AAAwB,QAAA,KAAK,EAAE,YAA/B;AAA6C,QAAA,IAAI,eAAE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAnD;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA,kBADF;AA4BD,CA1CD,C,CA4CA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;GAvJMI,W;;KAAAA,W;AAyJN,eAAeA,WAAf","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\nimport DataGrid, { TextEditor } from \"react-data-grid\";\r\nimport TableManager from \"./TableManager\"\r\nimport TableService from '../../Service/TableService';\r\nimport { CircularProgress, Typography } from '@material-ui/core';\r\nimport CollapsableAlert from '../CollapsableAlert/CollapsableAlert';\r\nimport ContentWithContextMenu from '../ContentWithContextMenu/ContentWithContextMenu';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport { green, grey, yellow } from '@material-ui/core/colors';\r\nimport SyncIcon from '@material-ui/icons/Sync';\r\nimport StorageIcon from '@material-ui/icons/Storage';\r\n\r\n\r\n\r\nconst SavageTable = (props) => {\r\n  const tableService = new TableService()\r\n  const [tableManager, setTableManager] = useState(new TableManager(props.table))\r\n  const [exceptions, setExceptions] = useState([])\r\n  const [columns, setColumns] = useState([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [rows, setRows] = useState([])\r\n\r\n  useEffect(() => {\r\n    setRows(tableManager.getRowSet())\r\n  }, [])\r\n  \r\n  console.log(rows)\r\n  setLoading(false)\r\n  return (\r\n    <>\r\n      <DataGrid\r\n        columns={columns}\r\n        rows={rows}\r\n        rowGetter={i => tableManager.getRow[i]}\r\n        onRowsChange={(rows, index) => { \r\n          var i = index.indexes[0];\r\n          tableManager.update(rows[i], i)\r\n        }}\r\n        enableCellSelect={true}\r\n        style={{ 'height': \"70vh\", overflowX: 'hidden' }}\r\n        className=\"fill-grid\"\r\n        minHeight=\"1000\"\r\n        // onSelectedCellChange={this.handleCellChange}\r\n      />\r\n      <BottomNavigation showLabels style={{ backgroundColor: grey[50], borderWidth: 0.5, borderStyle: \"solid\", borderColor: grey[300] }}>\r\n        {/* {this.state.unsavedRowsIndices.length > 0 &&\r\n          <BottomNavigationAction\r\n            label=\"Unsaved rows\"\r\n            icon={<SyncIcon style={{ color: yellow[500] }} />}\r\n          />\r\n        } */}\r\n        <BottomNavigationAction label={\"Rows: 5\"} icon={<StorageIcon />} />\r\n        <BottomNavigationAction label={\"Columns: 5\"} icon={<StorageIcon />} />\r\n      </BottomNavigation>\r\n    </>\r\n  )\r\n}\r\n\r\n// const update = (rows, index) => {\r\n//   var indexOfUpdatedRow = index.indexes[0];\r\n//   var updatedRow = rows[indexOfUpdatedRow];\r\n//   this.tableManager.update(updatedRow, index)\r\n// }\r\n\r\n\r\n// class ST extends Component {\r\n//   state = {\r\n//     tableDataService: new TableService(),\r\n//     tableManager: new TableManager(this.props.table),\r\n//     alert: null,\r\n//     columns: [],\r\n//     dataLoadingError: false,\r\n//     loading: true,\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     this.state.tableDataService.getSchemaOfTable(this.props.table,\r\n//       function (data) {\r\n//         var columns = data.data.columns.map(col => ({\r\n//           key: col.column,\r\n//           name: col.column,\r\n//           resizable: true,\r\n//           nullable: col.nullable,\r\n//           editor: col.editable ? TextEditor : undefined\r\n//         }));\r\n\r\n//         this.setState({\r\n//           columns: columns,\r\n//           loading: false,\r\n//           indexOfSelectedRow: rows.length,\r\n//         })\r\n\r\n//       }.bind(this),\r\n//       function (data) {\r\n//         console.log(data)\r\n//         this.setState({ loading: false, dataLoadingError: true })\r\n//       }.bind(this));\r\n//   }\r\n\r\n//   render() {\r\n//     if (this.state.loading) {\r\n//       return (<CircularProgress />)\r\n//     }\r\n//     if (this.state.dataLoadingError) {\r\n//       window.location.reload(false)\r\n//     }\r\n//     return (\r\n//       <div>\r\n//         {this.state.alert &&\r\n//           <CollapsableAlert\r\n//             severity={this.state.alert.severity}\r\n//             message={this.state.alert.message}\r\n//             onClose={() => this.setState({ alert: null })}\r\n//           />}\r\n//         <ContentWithContextMenu\r\n//           content={\r\n//             <DataGrid\r\n//               columns={this.state.columns}\r\n//               rows={this.tableManager.getRowSet()}\r\n//               rowGetter={i => this.tableManager.getRow[i]}\r\n//               onRowsChange={this.update}\r\n//               enableCellSelect={true}\r\n//               style={{ 'height': \"70vh\", overflowX: 'hidden' }}\r\n//               className=\"fill-grid\"\r\n//               minHeight=\"1000\"\r\n//               onSelectedCellChange={this.handleCellChange}\r\n//             />\r\n//           }\r\n//           menuItems={Object.keys(this.contextMenuItems)}\r\n//           action={(a) => this.contextMenuItems[a]()}\r\n//         />\r\n//         <BottomNavigation showLabels style={{ backgroundColor: grey[50], borderWidth: 0.5, borderStyle: \"solid\", borderColor: grey[300] }}>\r\n//           {this.state.unsavedRowsIndices.length > 0 &&\r\n//             <BottomNavigationAction\r\n//               label=\"Unsaved rows\"\r\n//               icon={<SyncIcon style={{ color: yellow[500] }} />}\r\n//             />\r\n//           }\r\n\r\n//           <BottomNavigationAction label={\"Rows: \" + this.state.rows.length} icon={<StorageIcon />} />\r\n//           <BottomNavigationAction label={\"Columns: \" + this.state.columns.length} icon={<StorageIcon />} />\r\n//         </BottomNavigation>\r\n//       </div >\r\n//     );\r\n//   }\r\n\r\n//   contextMenuItems = {\r\n//     \"Insert\": () => { this.insertRow(this.) },\r\n//     \"Delete\": () => { this.deleteRow() },\r\n//     \"Save\": () => { this.save(true) },\r\n//     \"Reload\": () => { this.loadTableData() }\r\n//   }\r\n\r\n//   handleCellChange = (c) => {\r\n//     if (c.rowIdx != this.state.indexOfSelectedRow && this.state.unsavedRowsIndices.includes(this.state.indexOfSelectedRow)) {\r\n//       this.save(false)\r\n//     }\r\n//     this.state.indexOfSelectedRow = c.rowIdx\r\n//   }\r\n\r\n//   update = (rows, index) => {\r\n//     var indexOfUpdatedRow = index.indexes[0];\r\n//     var updatedRow = rows[indexOfUpdatedRow];\r\n//     this.tableManager.update(updatedRow, index)\r\n//   }\r\n// }\r\n\r\nexport default SavageTable"]},"metadata":{},"sourceType":"module"}