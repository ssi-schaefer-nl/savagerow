{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\playground\\\\src\\\\Components\\\\Tables\\\\SavageTable.js\";\nimport React from \"react\";\nimport DataGrid, { TextEditor } from \"react-data-grid\";\nimport \"./styles.css\";\nimport TableDataService from '../../Service/TableDataServices';\nimport { CircularProgress } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Example extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rows: [],\n      rowStagedForInsertion: -1,\n      newRows: [],\n      columns: [],\n      loading: true,\n      selectedRow: 0,\n      tableDataService: new TableDataService()\n    };\n\n    this.handleClick = e => {\n      if (e.type === 'contextmenu') {\n        e.preventDefault();\n        this.insertEmptyRow(this.state.selectedRow);\n      }\n    };\n\n    this.handleCellChange = c => {\n      if (c.rowIdx != this.state.selectedRow && this.state.rowStagedForInsertion != -1) {\n        // Changed row selection and a row is staged for insertion\n        console.log(\"Changed row selection and a row is staged for insertion\");\n        var indexOfChangedRow = this.state.rowStagedForInsertion;\n        var newRow = this.state.rows[indexOfChangedRow];\n        this.addRow(newRow, newRowIdx);\n      }\n\n      this.state.selectedRow = c.rowIdx;\n    };\n\n    this.insertEmptyRow = idx => {\n      var emptyRow = {};\n      this.state.columns.forEach(col => {\n        emptyRow[col.key] = \"\";\n      });\n      var data = this.state.rows;\n      data.splice(idx, 0, emptyRow); //Insert empty row at index idx\n\n      this.setState({\n        rows: data\n      });\n      this.state.newRows.push(idx);\n    };\n\n    this.rowsChanged = (rows, index) => {\n      var indexOfChangedRow = index.indexes[0];\n      var oldInstanceOfChangedRow = this.state.rows[indexOfChangedRow];\n      var newInstanceOfChangedRow = rows[indexOfChangedRow];\n\n      if (!this.state.newRows.includes(indexOfChangedRow)) {\n        //Changed row is not new, so we can update right away\n        this.updateRow(oldInstanceOfChangedRow, newInstanceOfChangedRow, indexOfChangedRow);\n      } else {\n        // Row is new, so we wait for a change in row before pushing the new row\n        this.setState({\n          rowStagedForChange: indexOfChangedRow\n        });\n      }\n    };\n\n    this.addRow = (newInstanceOfChangedRow, newRowIdx) => {\n      var data = {\n        newRow: newInstanceOfChangedRow\n      };\n      console.log(data);\n      this.state.tableDataService.addTableData(this.props.table, data, function (data) {\n        var rows = this.state.rows;\n        rows.push(newRowIdx);\n        this.setState({\n          rows: rows\n        });\n        this.state.newRows.splice(newRowIdx, 1); // Unmark row as new\n      }.bind(this), function (data) {\n        console.log(data);\n      }.bind(this));\n    };\n\n    this.updateRow = (oldRow, newRow, index) => {\n      var data = [{\n        oldRow: oldRow,\n        newRow: newRow\n      }];\n      this.state.tableDataService.updateTableData(this.props.table, data, function (data) {\n        var rows = this.state.rows;\n        rows[index] = newRow;\n        this.setState({\n          rows: rows\n        });\n      }.bind(this), function (data) {\n        console.log(data);\n      }.bind(this));\n    };\n  }\n\n  componentDidMount() {\n    this.loadTableData();\n  }\n\n  loadTableData() {\n    this.state.tableDataService.getTableData(this.props.table, function (data) {\n      this.setState({\n        columns: this.createColumns(data.data.tableSchema.columns)\n      });\n      this.setState({\n        rows: data.data.data\n      });\n      this.setState({\n        loading: false\n      });\n    }.bind(this), function (data) {\n      console.log(data);\n      this.setState({\n        loading: false\n      });\n    }.bind(this));\n  }\n\n  createColumns(columns) {\n    return columns.map(col => {\n      var def = {\n        key: col.column,\n        name: col.column,\n        resizable: true\n      };\n\n      if (col.editable) {\n        def.editor = TextEditor;\n      }\n\n      return def;\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      onContextMenu: this.handleClick,\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        columns: this.state.columns,\n        rows: this.state.rows,\n        rowGetter: i => this.state.rows[i],\n        onRowsChange: this.rowsChanged,\n        enableCellSelect: true,\n        style: {\n          resize: 'both',\n          'height': \"70vh\",\n          maxWidth: \"100%\"\n        },\n        className: \"fill-grid\",\n        minHeight: \"1000\",\n        onSelectedCellChange: this.handleCellChange,\n        on: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Example;","map":{"version":3,"sources":["C:/Users/vincent/git/playground/src/Components/Tables/SavageTable.js"],"names":["React","DataGrid","TextEditor","TableDataService","CircularProgress","Example","Component","state","rows","rowStagedForInsertion","newRows","columns","loading","selectedRow","tableDataService","handleClick","e","type","preventDefault","insertEmptyRow","handleCellChange","c","rowIdx","console","log","indexOfChangedRow","newRow","addRow","newRowIdx","idx","emptyRow","forEach","col","key","data","splice","setState","push","rowsChanged","index","indexes","oldInstanceOfChangedRow","newInstanceOfChangedRow","includes","updateRow","rowStagedForChange","addTableData","props","table","bind","oldRow","updateTableData","componentDidMount","loadTableData","getTableData","createColumns","tableSchema","map","def","column","name","resizable","editable","editor","render","i","resize","maxWidth"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport DataGrid, { TextEditor } from \"react-data-grid\";\r\nimport \"./styles.css\";\r\nimport TableDataService from '../../Service/TableDataServices';\r\nimport { CircularProgress } from \"@material-ui/core\";\r\n\r\n\r\nclass Example extends React.Component {\r\n\r\n    state = {\r\n        rows: [],\r\n        rowStagedForInsertion: -1,\r\n        newRows: [],\r\n        columns: [],\r\n        loading: true,\r\n        selectedRow: 0,\r\n        tableDataService: new TableDataService(),\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.loadTableData()\r\n    }\r\n\r\n    loadTableData() {\r\n        this.state.tableDataService.getTableData(this.props.table,\r\n            function (data) {\r\n                this.setState({ columns: this.createColumns(data.data.tableSchema.columns) })\r\n                this.setState({ rows: data.data.data })\r\n                this.setState({ loading: false })\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n                this.setState({ loading: false })\r\n            }.bind(this));\r\n    }\r\n\r\n    createColumns(columns) {\r\n        return columns.map(col => {\r\n            var def = {\r\n                key: col.column,\r\n                name: col.column,\r\n                resizable: true\r\n            }\r\n            if (col.editable) {\r\n                def.editor = TextEditor\r\n            }\r\n            return def;\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.state.loading) {\r\n            return (<CircularProgress />)\r\n        }\r\n\r\n        return (\r\n            <div onContextMenu={this.handleClick}>\r\n                <DataGrid\r\n                    columns={this.state.columns}\r\n                    rows={this.state.rows}\r\n                    rowGetter={i => this.state.rows[i]}\r\n                    onRowsChange={this.rowsChanged}\r\n                    enableCellSelect={true}\r\n                    style={{ resize: 'both', 'height': \"70vh\", maxWidth: \"100%\" }}\r\n                    className=\"fill-grid\"\r\n                    minHeight=\"1000\"\r\n                    onSelectedCellChange={this.handleCellChange}\r\n                    on\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        if (e.type === 'contextmenu') {\r\n            e.preventDefault()\r\n            this.insertEmptyRow(this.state.selectedRow)\r\n        }\r\n    }\r\n\r\n\r\n    handleCellChange = (c) => {\r\n        if (c.rowIdx != this.state.selectedRow && this.state.rowStagedForInsertion != -1) { // Changed row selection and a row is staged for insertion\r\n            console.log(\"Changed row selection and a row is staged for insertion\")\r\n            var indexOfChangedRow = this.state.rowStagedForInsertion\r\n            var newRow = this.state.rows[indexOfChangedRow]\r\n            this.addRow(newRow, newRowIdx)\r\n        }\r\n        this.state.selectedRow = c.rowIdx\r\n    }\r\n\r\n    insertEmptyRow = (idx) => {\r\n        var emptyRow = {}\r\n        this.state.columns.forEach(col => { emptyRow[col.key] = \"\" })\r\n        var data = this.state.rows\r\n        data.splice(idx, 0, emptyRow) //Insert empty row at index idx\r\n        this.setState({ rows: data })\r\n        this.state.newRows.push(idx)\r\n    }\r\n\r\n\r\n    rowsChanged = (rows, index) => {\r\n        var indexOfChangedRow = index.indexes[0];\r\n        var oldInstanceOfChangedRow = this.state.rows[indexOfChangedRow];\r\n        var newInstanceOfChangedRow = rows[indexOfChangedRow];\r\n\r\n        if (!this.state.newRows.includes(indexOfChangedRow)) { //Changed row is not new, so we can update right away\r\n            this.updateRow(oldInstanceOfChangedRow, newInstanceOfChangedRow, indexOfChangedRow)\r\n        }\r\n        else { // Row is new, so we wait for a change in row before pushing the new row\r\n            this.setState({ rowStagedForChange: indexOfChangedRow })\r\n        }\r\n\r\n    }\r\n\r\n    addRow = (newInstanceOfChangedRow, newRowIdx) => {\r\n        var data = { newRow: newInstanceOfChangedRow }\r\n        console.log(data)\r\n        this.state.tableDataService.addTableData(this.props.table, data,\r\n            function (data) {\r\n                var rows = this.state.rows;\r\n                rows.push(newRowIdx)\r\n                this.setState({ rows: rows })\r\n                this.state.newRows.splice(newRowIdx, 1); // Unmark row as new\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n            }.bind(this));\r\n\r\n    }\r\n\r\n    updateRow = (oldRow, newRow, index) => {\r\n        var data = [\r\n            {\r\n                oldRow: oldRow,\r\n                newRow: newRow\r\n            },\r\n        ]\r\n\r\n        this.state.tableDataService.updateTableData(this.props.table, data,\r\n            function (data) {\r\n                var rows = this.state.rows;\r\n                rows[index] = newRow;\r\n                this.setState({ rows: rows })\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n            }.bind(this));\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Example;"]},"metadata":{},"sourceType":"module"}