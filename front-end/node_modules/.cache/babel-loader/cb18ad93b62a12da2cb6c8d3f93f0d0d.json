{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\playground\\\\src\\\\Components\\\\Tables\\\\SavageTable.js\";\nimport React from \"react\";\nimport DataGrid, { TextEditor } from \"react-data-grid\";\nimport \"./styles.css\";\nimport './react-contextmenu.css';\nimport TableDataService from '../../Service/TableDataServices';\nimport { CircularProgress } from \"@material-ui/core\";\nimport { Colorize } from \"@material-ui/icons\";\nimport Alert from '@material-ui/lab/Alert';\nimport IconButton from '@material-ui/core/IconButton';\nimport Collapse from '@material-ui/core/Collapse';\nimport Button from '@material-ui/core/Button';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport CollapsableAlert from \"../CollapsableAlert/CollapsableAlert\";\nimport ContentWithContextMenu from \"../ContentWithContextMenu/ContentWithContextMenu\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SavageTable extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rows: [],\n      rowStagedForInsertion: -1,\n      newRows: [],\n      columns: [],\n      loading: true,\n      selectedRow: null,\n      alert: null,\n      tableDataService: new TableDataService(),\n      mouseX: null,\n      mouseY: null\n    };\n\n    this.loadTableData = () => {\n      this.state.tableDataService.getTableData(this.props.table, function (data) {\n        this.setState({\n          columns: this.createColumns(data.data.tableSchema.columns)\n        });\n        this.setState({\n          rows: data.data.data\n        });\n        this.setState({\n          loading: false\n        });\n        var emptyRow = {};\n        this.state.columns.forEach(col => {\n          emptyRow[col.key] = \"\";\n        });\n        var data = this.state.rows;\n        var idx = data.push(emptyRow) - 1;\n        this.setState({\n          rows: data,\n          newRows: [idx]\n        });\n      }.bind(this), function (data) {\n        console.log(data);\n        this.setState({\n          loading: false\n        });\n      }.bind(this));\n    };\n\n    this.contextMenuItems = {\n      \"Insert\": () => {\n        this.insertEmptyRow();\n      },\n      \"Delete\": () => {\n        this.deleteRow();\n      },\n      \"Save\": () => {\n        this.saveSelectRowManually();\n      },\n      \"Reload\": () => {\n        this.loadTableData();\n      }\n    };\n\n    this.handleContextMenuClick = action => {\n      console.log(\"action: \" + action);\n      this.contextMenuItems[action]();\n    };\n\n    this.saveSelectRowManually = () => {\n      if (this.rowStagedForInsertHasAllData()) {\n        this.addRow(this.state.rowStagedForInsertion);\n      }\n    };\n\n    this.handleCellChange = c => {\n      console.log(c);\n\n      if (this.shouldProcessStagedRowInsert(c.rowIdx)) {\n        console.log(\"Changed row selection and a row is staged for insertion\");\n        this.addRow(this.state.rowStagedForInsertion);\n      }\n\n      this.state.selectedRow = c.rowIdx;\n    };\n\n    this.insertEmptyRow = () => {\n      var idx = this.state.selectedRow;\n      var emptyRow = {};\n      this.state.columns.forEach(col => {\n        emptyRow[col.key] = \"\";\n      });\n      var data = this.state.rows;\n      data.splice(idx, 0, emptyRow); //Insert empty row at index idx\n\n      this.state.newRows.push(idx);\n      this.setState({\n        rows: data\n      });\n    };\n\n    this.deleteRow = () => {\n      var idx = this.state.selectedRow;\n      var data = {\n        row: this.state.rows[idx]\n      };\n\n      if (this.state.newRows.includes(idx)) {\n        var data = this.state.rows;\n        data.splice(idx, 1);\n        this.setState({\n          rows: data\n        });\n      } else {\n        this.state.tableDataService.deleteTableData(this.props.table, data, function (data) {\n          var data = this.state.rows;\n          data.splice(idx, 1);\n          this.setState({\n            rows: data\n          });\n        }.bind(this), function (data) {\n          console.log(data);\n        }.bind(this));\n      }\n    };\n\n    this.rowsChanged = (rows, index) => {\n      var indexOfChangedRow = index.indexes[0];\n      var oldInstanceOfChangedRow = this.state.rows[indexOfChangedRow];\n      var newInstanceOfChangedRow = rows[indexOfChangedRow];\n\n      if (!this.state.newRows.includes(indexOfChangedRow)) {\n        //Changed row is not new, so we can update right away\n        this.updateRow(oldInstanceOfChangedRow, newInstanceOfChangedRow, indexOfChangedRow);\n      } else {\n        // Row is new, so we store locally and wait for a change in row before pushing the new row\n        this.setState({\n          rowStagedForInsertion: indexOfChangedRow\n        });\n        var rows = this.state.rows;\n        rows[indexOfChangedRow] = newInstanceOfChangedRow;\n        this.setState({\n          rows: rows\n        });\n      }\n    };\n\n    this.addRow = indexOfChangedRow => {\n      var data = {\n        row: this.state.rows[indexOfChangedRow]\n      };\n      var newRowsEntryIndex = this.state.newRows.indexOf(indexOfChangedRow);\n      this.state.tableDataService.addTableData(this.props.table, data, function (data) {\n        this.state.newRows.splice(newRowsEntryIndex, 1); // Unmark row as new\n      }.bind(this), function (data) {\n        console.log(data);\n      }.bind(this));\n      this.setState({\n        rowStagedForInsertion: -1\n      }); // unset the row as staged for insertion \n    };\n\n    this.updateRow = (oldRow, newRow, index) => {\n      var data = [{\n        oldRow: oldRow,\n        newRow: newRow\n      }];\n      this.state.tableDataService.updateTableData(this.props.table, data, function (data) {\n        var rows = this.state.rows;\n        rows[index] = newRow;\n        this.setState({\n          rows: rows\n        });\n      }.bind(this), function (data) {\n        console.log(data);\n      }.bind(this));\n    };\n  }\n\n  componentDidMount() {\n    this.loadTableData();\n  }\n\n  createColumns(columns) {\n    return columns.map(col => {\n      var def = {\n        key: col.column,\n        name: col.column,\n        resizable: true,\n        nullable: col.nullable\n      };\n\n      if (col.editable) {\n        def.editor = TextEditor;\n      }\n\n      return def;\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.alert && /*#__PURE__*/_jsxDEV(CollapsableAlert, {\n        severity: this.state.alert.severity,\n        message: this.state.alert.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(ContentWithContextMenu, {\n        content: /*#__PURE__*/_jsxDEV(DataGrid, {\n          columns: this.state.columns,\n          rows: this.state.rows,\n          rowGetter: i => this.state.rows[i],\n          onRowsChange: this.rowsChanged,\n          enableCellSelect: true,\n          style: {\n            resize: 'both',\n            'height': \"70vh\",\n            maxWidth: \"100%\"\n          },\n          className: \"fill-grid\",\n          minHeight: \"1000\",\n          onSelectedCellChange: this.handleCellChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this),\n        menuItems: Object.keys(this.contextMenuItems),\n        action: a => this.contextMenuItems[a]()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this);\n  }\n\n  shouldProcessStagedRowInsert(rowIdx) {\n    if (rowIdx != this.state.selectedRow && this.state.rowStagedForInsertion != -1) {\n      // Changed row selection and a row is staged for insertion\n      return this.rowStagedForInsertHasAllData();\n    }\n\n    return false;\n  }\n\n  rowStagedForInsertHasAllData() {\n    var row = this.state.rows[this.state.rowStagedForInsertion];\n    var colsRequiringValue = this.state.columns.filter(col => {\n      if (!col.nullable && col.editor && !row[col.key]) {\n        return col.key;\n      }\n    });\n\n    if (colsRequiringValue.length == 0) {\n      this.setState({\n        alert: null\n      });\n      return true;\n    }\n\n    alert = {\n      severity: \"warning\",\n      message: \"The following columns require a value before entry is stored:\" + colsRequiringValue.map(col => \" \" + col.name),\n      row: this.state.rowStagedForInsertion\n    };\n    this.setState({\n      alert: alert\n    });\n    return false;\n  }\n\n}\n\nexport default SavageTable;","map":{"version":3,"sources":["C:/Users/vincent/git/playground/src/Components/Tables/SavageTable.js"],"names":["React","DataGrid","TextEditor","TableDataService","CircularProgress","Colorize","Alert","IconButton","Collapse","Button","CloseIcon","Menu","MenuItem","Typography","CollapsableAlert","ContentWithContextMenu","SavageTable","Component","state","rows","rowStagedForInsertion","newRows","columns","loading","selectedRow","alert","tableDataService","mouseX","mouseY","loadTableData","getTableData","props","table","data","setState","createColumns","tableSchema","emptyRow","forEach","col","key","idx","push","bind","console","log","contextMenuItems","insertEmptyRow","deleteRow","saveSelectRowManually","handleContextMenuClick","action","rowStagedForInsertHasAllData","addRow","handleCellChange","c","shouldProcessStagedRowInsert","rowIdx","splice","row","includes","deleteTableData","rowsChanged","index","indexOfChangedRow","indexes","oldInstanceOfChangedRow","newInstanceOfChangedRow","updateRow","newRowsEntryIndex","indexOf","addTableData","oldRow","newRow","updateTableData","componentDidMount","map","def","column","name","resizable","nullable","editable","editor","render","severity","message","i","resize","maxWidth","Object","keys","a","colsRequiringValue","filter","length"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport DataGrid, { TextEditor } from \"react-data-grid\";\r\nimport \"./styles.css\";\r\nimport './react-contextmenu.css'\r\n\r\nimport TableDataService from '../../Service/TableDataServices';\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport { Colorize } from \"@material-ui/icons\";\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Button from '@material-ui/core/Button';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CollapsableAlert from \"../CollapsableAlert/CollapsableAlert\";\r\nimport ContentWithContextMenu from \"../ContentWithContextMenu/ContentWithContextMenu\";\r\n\r\n\r\n\r\nclass SavageTable extends React.Component {\r\n    state = {\r\n        rows: [],\r\n        rowStagedForInsertion: -1,\r\n        newRows: [],\r\n        columns: [],\r\n        loading: true,\r\n        selectedRow: null,\r\n        alert: null,\r\n        tableDataService: new TableDataService(),\r\n        mouseX: null,\r\n        mouseY: null,\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.loadTableData()\r\n    }\r\n\r\n    loadTableData = () => {\r\n        this.state.tableDataService.getTableData(this.props.table,\r\n            function (data) {\r\n                this.setState({ columns: this.createColumns(data.data.tableSchema.columns) })\r\n                this.setState({ rows: data.data.data })\r\n                this.setState({ loading: false })\r\n                var emptyRow = {}\r\n                this.state.columns.forEach(col => { emptyRow[col.key] = \"\" })\r\n                var data = this.state.rows\r\n                var idx = data.push(emptyRow) - 1\r\n                this.setState({ rows: data, newRows: [idx] })\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n                this.setState({ loading: false })\r\n            }.bind(this));\r\n    }\r\n\r\n    createColumns(columns) {\r\n        return columns.map(col => {\r\n            var def = {\r\n                key: col.column,\r\n                name: col.column,\r\n                resizable: true,\r\n                nullable: col.nullable\r\n            }\r\n            if (col.editable) {\r\n                def.editor = TextEditor\r\n            }\r\n            return def;\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.loading) {\r\n            return (<CircularProgress />)\r\n        }\r\n        return (\r\n\r\n            <div>\r\n                {this.state.alert && <CollapsableAlert severity={this.state.alert.severity} message={this.state.alert.message} /> }\r\n                <ContentWithContextMenu\r\n                    content={\r\n                        <DataGrid\r\n                            columns={this.state.columns}\r\n                            rows={this.state.rows}\r\n                            rowGetter={i => this.state.rows[i]}\r\n                            onRowsChange={this.rowsChanged}\r\n                            enableCellSelect={true}\r\n                            style={{ resize: 'both', 'height': \"70vh\", maxWidth: \"100%\" }}\r\n                            className=\"fill-grid\"\r\n                            minHeight=\"1000\"\r\n                            onSelectedCellChange={this.handleCellChange}\r\n                        />\r\n                    }\r\n                    menuItems={Object.keys(this.contextMenuItems)}\r\n                    action={(a) => this.contextMenuItems[a]()}\r\n                />\r\n            </div >\r\n        );\r\n    }\r\n\r\n    contextMenuItems = {\r\n        \"Insert\": () => { this.insertEmptyRow() },\r\n        \"Delete\": () => { this.deleteRow() },\r\n        \"Save\": () => { this.saveSelectRowManually() },\r\n        \"Reload\": () => { this.loadTableData() }\r\n    }\r\n\r\n    handleContextMenuClick = (action) => {\r\n        console.log(\"action: \" + action)\r\n        this.contextMenuItems[action]()\r\n    }\r\n\r\n\r\n    saveSelectRowManually = () => {\r\n        if (this.rowStagedForInsertHasAllData()) {\r\n            this.addRow(this.state.rowStagedForInsertion)\r\n        }\r\n    }\r\n\r\n    handleCellChange = (c) => {\r\n        console.log(c)\r\n        if (this.shouldProcessStagedRowInsert(c.rowIdx)) {\r\n            console.log(\"Changed row selection and a row is staged for insertion\")\r\n            this.addRow(this.state.rowStagedForInsertion)\r\n        }\r\n        this.state.selectedRow = c.rowIdx\r\n    }\r\n\r\n    shouldProcessStagedRowInsert(rowIdx) {\r\n        if (rowIdx != this.state.selectedRow && this.state.rowStagedForInsertion != -1) { // Changed row selection and a row is staged for insertion\r\n            return this.rowStagedForInsertHasAllData()\r\n        }\r\n        return false;\r\n    }\r\n\r\n    rowStagedForInsertHasAllData() {\r\n        var row = this.state.rows[this.state.rowStagedForInsertion]\r\n        var colsRequiringValue = this.state.columns.filter(col => {\r\n            if (!col.nullable && col.editor && !row[col.key]) {\r\n                return col.key\r\n            }\r\n        })\r\n\r\n        if (colsRequiringValue.length == 0) {\r\n            this.setState({ alert: null })\r\n            return true\r\n\r\n        }\r\n\r\n        alert = {\r\n            severity: \"warning\",\r\n            message: \"The following columns require a value before entry is stored:\" + colsRequiringValue.map(col => \" \" + col.name),\r\n            row: this.state.rowStagedForInsertion\r\n        }\r\n\r\n        this.setState({ alert: alert })\r\n        return false\r\n    }\r\n\r\n\r\n    insertEmptyRow = () => {\r\n        var idx = this.state.selectedRow;\r\n\r\n        var emptyRow = {}\r\n        this.state.columns.forEach(col => { emptyRow[col.key] = \"\" })\r\n        var data = this.state.rows\r\n\r\n        data.splice(idx, 0, emptyRow) //Insert empty row at index idx\r\n        this.state.newRows.push(idx)\r\n        this.setState({ rows: data })\r\n\r\n    }\r\n\r\n    deleteRow = () => {\r\n        var idx = this.state.selectedRow\r\n        var data = { row: this.state.rows[idx] }\r\n        if (this.state.newRows.includes(idx)) {\r\n            var data = this.state.rows\r\n            data.splice(idx, 1)\r\n            this.setState({ rows: data })\r\n        }\r\n        else {\r\n            this.state.tableDataService.deleteTableData(this.props.table, data,\r\n                function (data) {\r\n                    var data = this.state.rows\r\n                    data.splice(idx, 1)\r\n                    this.setState({ rows: data })\r\n                }.bind(this),\r\n                function (data) {\r\n                    console.log(data)\r\n                }.bind(this));\r\n        }\r\n    }\r\n\r\n\r\n    rowsChanged = (rows, index) => {\r\n        var indexOfChangedRow = index.indexes[0];\r\n        var oldInstanceOfChangedRow = this.state.rows[indexOfChangedRow];\r\n        var newInstanceOfChangedRow = rows[indexOfChangedRow];\r\n\r\n        if (!this.state.newRows.includes(indexOfChangedRow)) { //Changed row is not new, so we can update right away\r\n            this.updateRow(oldInstanceOfChangedRow, newInstanceOfChangedRow, indexOfChangedRow)\r\n        }\r\n        else { // Row is new, so we store locally and wait for a change in row before pushing the new row\r\n            this.setState({ rowStagedForInsertion: indexOfChangedRow })\r\n            var rows = this.state.rows;\r\n            rows[indexOfChangedRow] = newInstanceOfChangedRow;\r\n            this.setState({ rows: rows })\r\n        }\r\n\r\n    }\r\n\r\n    addRow = (indexOfChangedRow) => {\r\n        var data = { row: this.state.rows[indexOfChangedRow] }\r\n        var newRowsEntryIndex = this.state.newRows.indexOf(indexOfChangedRow)\r\n        this.state.tableDataService.addTableData(this.props.table, data,\r\n            function (data) {\r\n                this.state.newRows.splice(newRowsEntryIndex, 1); // Unmark row as new\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n            }.bind(this));\r\n\r\n        this.setState({ rowStagedForInsertion: -1 }) // unset the row as staged for insertion \r\n\r\n    }\r\n\r\n    updateRow = (oldRow, newRow, index) => {\r\n        var data = [\r\n            {\r\n                oldRow: oldRow,\r\n                newRow: newRow\r\n            },\r\n        ]\r\n\r\n        this.state.tableDataService.updateTableData(this.props.table, data,\r\n            function (data) {\r\n                var rows = this.state.rows;\r\n                rows[index] = newRow;\r\n                this.setState({ rows: rows })\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n            }.bind(this));\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default SavageTable;"]},"metadata":{},"sourceType":"module"}