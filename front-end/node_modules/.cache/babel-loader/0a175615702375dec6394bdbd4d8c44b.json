{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\savagerow\\\\front-end\\\\src\\\\Components\\\\Table\\\\Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport TableService from '../../Service/TableService';\nimport ContextMenu from '../ContextMenu/ContextMenu';\nimport DataGridControlBar from './DataGridControlBar';\nimport DataGridTable from './DataGridTable';\nimport NotificationArea from './NotificationArea';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst tableService = new TableService();\n\nconst createNotification = (content, severity) => {\n  return {\n    content: content,\n    severity: severity\n  };\n};\n\nconst SavageTable = props => {\n  _s();\n\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [rows, setRows] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n  const table = props.table;\n  const contextMenuItems = {\n    \"Insert\": console.log,\n    \"Delete\": row => {\n      console.log(\"delete \" + row);\n    },\n    \"Save\": () => {\n      console.log(\"save\");\n    },\n    \"Reload\": loadTableRows\n  };\n\n  const loadTableRows = () => {\n    tableService.getRowsOfTable(table, data => setRows(data.data.rows), () => setNotifications(notifications => [...notifications, createNotification(\"Unable to fetch table rows\", \"error\")]));\n  };\n\n  useEffect(() => {\n    loadTableRows();\n    tableService.getSchemaOfTable(table, data => setColumns(data.data.columns), () => setNotifications(notifications => [...notifications, createNotification(\"Unable to fetch table schema\", \"error\")]));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NotificationArea, {\n      notifications: notifications,\n      handleClose: index => setNotifications(curr => curr.filter((notifications, i) => i !== index))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContextMenu, {\n      menuItems: Object.keys(contextMenuItems),\n      onItemClick: a => contextMenuItems[a](selectedRow),\n      children: /*#__PURE__*/_jsxDEV(DataGridTable, {\n        rows: rows,\n        columns: columns,\n        onRowChange: undefined,\n        onRowSelect: setSelectedRow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataGridControlBar, {\n      rowCount: rows.length,\n      columnCount: columns.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SavageTable, \"59Ek9srhyztE7Rjy1bqatNdjaUE=\");\n\n_c = SavageTable;\nexport default SavageTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"SavageTable\");","map":{"version":3,"sources":["C:/Users/vincent/git/savagerow/front-end/src/Components/Table/Table.js"],"names":["React","Component","useEffect","useState","TableService","ContextMenu","DataGridControlBar","DataGridTable","NotificationArea","tableService","createNotification","content","severity","SavageTable","props","selectedRow","setSelectedRow","rows","setRows","columns","setColumns","notifications","setNotifications","table","contextMenuItems","console","log","row","loadTableRows","getRowsOfTable","data","getSchemaOfTable","index","curr","filter","i","Object","keys","a","undefined","length"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\nimport TableService from '../../Service/TableService';\r\nimport ContextMenu from '../ContextMenu/ContextMenu';\r\nimport DataGridControlBar from './DataGridControlBar';\r\nimport DataGridTable from './DataGridTable';\r\nimport NotificationArea from './NotificationArea';\r\n\r\nconst tableService = new TableService()\r\n\r\nconst createNotification = (content, severity) => {\r\n  return {\r\n    content: content,\r\n    severity: severity,\r\n  }\r\n}\r\n\r\nconst SavageTable = (props) => {\r\n  const [selectedRow, setSelectedRow] = useState(null)\r\n  const [rows, setRows] = useState([])\r\n  const [columns, setColumns] = useState([])\r\n  const [notifications, setNotifications] = useState([])\r\n  const table = props.table\r\n\r\n  const contextMenuItems = {\r\n    \"Insert\": console.log,\r\n    \"Delete\": (row) => { console.log(\"delete \" + row) },\r\n    \"Save\": () => { console.log(\"save\") },\r\n    \"Reload\": loadTableRows\r\n  }\r\n\r\n\r\n  const loadTableRows = () => {\r\n    tableService.getRowsOfTable(\r\n      table,\r\n      data => setRows(data.data.rows),\r\n      () => setNotifications(notifications => [...notifications, createNotification(\"Unable to fetch table rows\", \"error\")])\r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadTableRows()\r\n\r\n    tableService.getSchemaOfTable(\r\n      table,\r\n      data => setColumns(data.data.columns),\r\n      () => setNotifications(notifications => [...notifications, createNotification(\"Unable to fetch table schema\", \"error\")])\r\n    )\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <NotificationArea\r\n        notifications={notifications}\r\n        handleClose={(index) => setNotifications(curr => curr.filter((notifications, i) => i !== index))}\r\n      />\r\n\r\n      <ContextMenu\r\n        menuItems={Object.keys(contextMenuItems)}\r\n        onItemClick={(a) => contextMenuItems[a](selectedRow)}\r\n      >\r\n\r\n        <DataGridTable\r\n          rows={rows}\r\n          columns={columns}\r\n          onRowChange={undefined}\r\n          onRowSelect={setSelectedRow}\r\n        />\r\n\r\n      </ContextMenu>\r\n\r\n      <DataGridControlBar\r\n        rowCount={rows.length}\r\n        columnCount={columns.length}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default SavageTable"]},"metadata":{},"sourceType":"module"}