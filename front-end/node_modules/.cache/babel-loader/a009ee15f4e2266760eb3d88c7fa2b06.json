{"ast":null,"code":"import { createSelector } from 'reselect';\nimport groupRows from './RowGrouper';\nimport filterRows from './RowFilterer';\nimport sortRows from './RowSorter';\nimport { isEmptyObject, isEmptyArray } from '../utils';\n\nvar getInputRows = function (state) {\n  return state.rows;\n};\n\nvar getFilters = function (state) {\n  return state.filters;\n};\n\nvar getFilteredRows = createSelector([getFilters, getInputRows], function (filters, rows) {\n  if (rows === void 0) {\n    rows = [];\n  }\n\n  if (!filters || isEmptyObject(filters)) {\n    return rows;\n  }\n\n  return filterRows(filters, rows);\n});\n\nvar getSortColumn = function (state) {\n  return state.sortColumn;\n};\n\nvar getSortDirection = function (state) {\n  return state.sortDirection;\n};\n\nvar getSortedRows = createSelector([getFilteredRows, getSortColumn, getSortDirection], function (rows, sortColumn, sortDirection) {\n  if (!sortDirection && !sortColumn) {\n    return rows;\n  }\n\n  return sortRows(rows, sortColumn, sortDirection);\n});\n\nvar getGroupedColumns = function (state) {\n  return state.groupBy;\n};\n\nvar getExpandedRows = function (state) {\n  return state.expandedRows;\n};\n\nvar getFlattenedGroupedRows = createSelector([getSortedRows, getGroupedColumns, getExpandedRows], function (rows, groupedColumns, expandedRows) {\n  if (expandedRows === void 0) {\n    expandedRows = {};\n  }\n\n  if (!groupedColumns || isEmptyObject(groupedColumns) || isEmptyArray(groupedColumns)) {\n    return rows;\n  }\n\n  return groupRows(rows, groupedColumns, expandedRows);\n});\n\nvar getSelectedKeys = function (state) {\n  return state.selectedKeys;\n};\n\nvar getRowKey = function (state) {\n  return state.rowKey;\n};\n\nvar getSelectedRowsByKey = createSelector([getRowKey, getSelectedKeys, getInputRows], function (rowKey, selectedKeys, rows) {\n  if (rows === void 0) {\n    rows = [];\n  }\n\n  return selectedKeys.map(function (k) {\n    return rows.filter(function (r) {\n      return r[rowKey] === k;\n    })[0];\n  });\n});\nexport { getFlattenedGroupedRows as getRows, getSelectedRowsByKey };","map":{"version":3,"sources":["../../src/data/Selectors.js"],"names":[],"mappings":"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","sourcesContent":["import { createSelector } from 'reselect';\nimport groupRows from './RowGrouper';\nimport filterRows from './RowFilterer';\nimport sortRows from './RowSorter';\nimport { isEmptyObject, isEmptyArray } from '../utils';\n\nconst getInputRows = (state) => state.rows;\nconst getFilters = (state) => state.filters;\nconst getFilteredRows = createSelector([getFilters, getInputRows], (filters, rows = []) => {\n  if (!filters || isEmptyObject(filters)) {\n    return rows;\n  }\n  return filterRows(filters, rows);\n});\n\nconst getSortColumn = state => state.sortColumn;\nconst getSortDirection = state => state.sortDirection;\nconst getSortedRows = createSelector([getFilteredRows, getSortColumn, getSortDirection], (rows, sortColumn, sortDirection) => {\n  if (!sortDirection && !sortColumn) {\n    return rows;\n  }\n  return sortRows(rows, sortColumn, sortDirection);\n});\n\nconst getGroupedColumns = (state) => state.groupBy;\nconst getExpandedRows = (state) => state.expandedRows;\nconst getFlattenedGroupedRows = createSelector([getSortedRows, getGroupedColumns, getExpandedRows], (rows, groupedColumns, expandedRows = {}) => {\n  if (!groupedColumns || isEmptyObject(groupedColumns) || isEmptyArray(groupedColumns)) {\n    return rows;\n  }\n  return groupRows(rows, groupedColumns, expandedRows);\n});\n\nconst getSelectedKeys = (state) => state.selectedKeys;\nconst getRowKey = (state) => state.rowKey;\nconst getSelectedRowsByKey = createSelector([getRowKey, getSelectedKeys, getInputRows], (rowKey, selectedKeys, rows = []) => {\n  return selectedKeys.map(k => {\n    return rows.filter(r => {\n      return r[rowKey] === k;\n    })[0];\n  });\n});\n\nexport {\n  getFlattenedGroupedRows as getRows,\n  getSelectedRowsByKey\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}