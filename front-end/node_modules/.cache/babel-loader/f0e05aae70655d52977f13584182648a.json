{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\savagerow\\\\front-end\\\\src\\\\Components\\\\Table\\\\Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport DataGridTable from './DataGrid/DataGridTable';\nimport NotificationArea from '../NotificationArea/NotificationArea';\nimport DataGridControlBar from './DataGridControlBar/DataGridControlBar';\nimport TableService from '../../Service/TableService';\nimport DefineColumnDialog from './DefineColumnDialog/DefineColumnDialog';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SavageTable = props => {\n  _s();\n\n  const history = useHistory();\n  history.push(`${history.location.pathname}${props.table}`);\n  const tableService = new TableService(props.table);\n  const [rows, setRows] = useState([]);\n  const [columnFilter, setColumnFilter] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n  const [insertedRows, setInsertedRows] = useState([]);\n  const [errorRows, setErrorRows] = useState([]);\n  const [defineColumnDialogOpen, setDefineColumnDialogOpen] = useState(false);\n\n  const addNotification = (content, severity) => {\n    const notification = {\n      content: content,\n      severity: severity\n    };\n    setNotifications(notifications => [...notifications, notification]);\n  };\n\n  const removeErrorsForRow = id => {\n    setErrorRows(er => er.filter(r => r.id != id));\n  };\n\n  const addErrorRow = (id, message) => {\n    const error = {\n      id: id,\n      message: message\n    };\n    removeErrorsForRow(id);\n    setErrorRows(er => [...er, error]);\n  };\n\n  const loadTableRows = () => {\n    setInsertedRows([]);\n    setNotifications([]);\n    setErrorRows([]);\n    tableService.getRowSet(data => setRows(data.data.rows), () => addNotification(\"Unable to fetch table rows for database: \" + localStorage.getItem(\"database\"), \"error\"));\n  };\n\n  const insertAction = rId => {\n    rId = rId + 1;\n    setInsertedRows(irs => [...irs.map(ir => ir >= rId ? ir + 1 : ir), rId]);\n    setRows(tableService.addRow(rows, rId));\n    setErrorRows([]);\n  };\n\n  const deleteAction = rId => {\n    tableService.delete(rows, rId, resultingRows => {\n      setInsertedRows(irs => irs.filter(r => r != rId).map(ir => ir > rId ? ir - 1 : ir));\n      setRows(resultingRows);\n      setErrorRows([]);\n    }, e => addErrorRow(rId, e));\n  };\n\n  const saveAction = rId => {\n    if (insertedRows.indexOf(rId) == -1) return;\n    tableService.save(rows, rId, resultingRows => {\n      setRows(resultingRows);\n      setInsertedRows(irs => irs.filter(r => r != rId));\n      removeErrorsForRow(rId);\n    }, e => addErrorRow(rId, \" Error saving the row: \" + e));\n  };\n\n  const handleRowChange = (newRow, index) => {\n    if (insertedRows.indexOf(index) == -1) tableService.update(rows, newRow, index, rows => {\n      setRows(rows);\n      removeErrorsForRow(index);\n    }, e => {\n      var message = e.message.length == 0 ? \" Undefined error during row update\" : \" Error updating row: \" + e.message;\n      addErrorRow(index, message);\n      console.log(e);\n    });else setRows(tableService.updateLocal(rows, newRow, index));\n  };\n\n  useEffect(() => {\n    loadTableRows();\n    tableService.getSchema(data => setColumns(data.data.columns), () => addNotification(\"Unable to fetch table schema\", \"error\"));\n  }, []);\n  var highlightedRowsFinal = [];\n\n  if (errorRows.length > 0) {\n    highlightedRowsFinal = highlightedRowsFinal.concat(errorRows.slice(0).reverse().map(er => {\n      return {\n        id: er.id,\n        message: er.message,\n        type: \"error\"\n      };\n    }));\n  }\n\n  if (insertedRows.length > 0) {\n    highlightedRowsFinal = highlightedRowsFinal.concat(insertedRows.map(i => {\n      return {\n        id: i,\n        message: \"This row is not saved\",\n        type: \"warning\"\n      };\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NotificationArea, {\n      notifications: notifications,\n      handleClose: index => setNotifications(curr => curr.filter((notifications, i) => i !== index))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataGridControlBar, {\n      rowCount: rows.length,\n      columns: columns,\n      onChangeColumnFilter: setColumnFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataGridTable, {\n      rows: rows,\n      columns: columnFilter.length > 0 ? columns.filter(c => columnFilter.includes(c.column)) : columns,\n      highlightRows: highlightedRowsFinal,\n      onRowChange: handleRowChange,\n      onDelete: deleteAction,\n      onInsert: idx => insertAction(idx, true),\n      onSave: saveAction,\n      onRefresh: loadTableRows,\n      onColumnDelete: col => setColumns(columns => columns.filter(c => c.column != col)),\n      onColumnRename: undefined,\n      onColumnInsert: () => setDefineColumnDialogOpen(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DefineColumnDialog, {\n      open: defineColumnDialogOpen,\n      handleClose: () => setDefineColumnDialogOpen(false),\n      onSubmit: data => tableService.addColumn(data, () => {\n        window.location.reload(false);\n      }, () => {\n        console.log(\"error\");\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SavageTable, \"VGvlXZBL+4fB49asDqDMLQdAggw=\", false, function () {\n  return [useHistory];\n});\n\n_c = SavageTable;\nexport default SavageTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"SavageTable\");","map":{"version":3,"sources":["C:/Users/vincent/git/savagerow/front-end/src/Components/Table/Table.js"],"names":["React","Component","useEffect","useState","useHistory","DataGridTable","NotificationArea","DataGridControlBar","TableService","DefineColumnDialog","SavageTable","props","history","push","location","pathname","table","tableService","rows","setRows","columnFilter","setColumnFilter","columns","setColumns","notifications","setNotifications","insertedRows","setInsertedRows","errorRows","setErrorRows","defineColumnDialogOpen","setDefineColumnDialogOpen","addNotification","content","severity","notification","removeErrorsForRow","id","er","filter","r","addErrorRow","message","error","loadTableRows","getRowSet","data","localStorage","getItem","insertAction","rId","irs","map","ir","addRow","deleteAction","delete","resultingRows","e","saveAction","indexOf","save","handleRowChange","newRow","index","update","length","console","log","updateLocal","getSchema","highlightedRowsFinal","concat","slice","reverse","type","i","curr","c","includes","column","idx","col","undefined","addColumn","window","reload"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport DataGridTable from './DataGrid/DataGridTable';\r\nimport NotificationArea from '../NotificationArea/NotificationArea';\r\nimport DataGridControlBar from './DataGridControlBar/DataGridControlBar';\r\nimport TableService from '../../Service/TableService';\r\nimport DefineColumnDialog from './DefineColumnDialog/DefineColumnDialog';\r\n\r\nconst SavageTable = (props) => {\r\n  const history = useHistory();\r\n  history.push(`${history.location.pathname}${props.table}`)\r\n  const tableService = new TableService(props.table)\r\n  const [rows, setRows] = useState([])\r\n  const [columnFilter, setColumnFilter] = useState([])\r\n  const [columns, setColumns] = useState([])\r\n  const [notifications, setNotifications] = useState([])\r\n  const [insertedRows, setInsertedRows] = useState([])\r\n  const [errorRows, setErrorRows] = useState([])\r\n  const [defineColumnDialogOpen, setDefineColumnDialogOpen] = useState(false)\r\n\r\n\r\n  const addNotification = (content, severity) => {\r\n    const notification = { content: content, severity: severity }\r\n    setNotifications(notifications => [...notifications, notification])\r\n  }\r\n\r\n  const removeErrorsForRow = id => {\r\n    setErrorRows(er => er.filter(r => r.id != id))\r\n  }\r\n\r\n  const addErrorRow = (id, message) => {\r\n    const error = { id: id, message: message }\r\n    removeErrorsForRow(id)\r\n    setErrorRows(er => [...er, error])\r\n  }\r\n\r\n  const loadTableRows = () => {\r\n    setInsertedRows([])\r\n    setNotifications([])\r\n    setErrorRows([])\r\n    tableService.getRowSet(data => setRows(data.data.rows), () => addNotification(\"Unable to fetch table rows for database: \" + localStorage.getItem(\"database\"), \"error\"))\r\n\r\n  }\r\n\r\n  const insertAction = (rId) => {\r\n    rId = rId + 1\r\n\r\n    setInsertedRows(irs => [...irs.map(ir => ir >= rId ? ir + 1 : ir), rId])\r\n    setRows(tableService.addRow(rows, rId))\r\n    setErrorRows([])\r\n  }\r\n\r\n  const deleteAction = (rId) => {\r\n    tableService.delete(rows, rId, (resultingRows) => {\r\n      setInsertedRows(irs => irs.filter(r => r != rId).map(ir => ir > rId ? ir - 1 : ir))\r\n      setRows(resultingRows)\r\n      setErrorRows([])\r\n    }, (e) => addErrorRow(rId, e))\r\n  }\r\n\r\n  const saveAction = (rId) => {\r\n    if (insertedRows.indexOf(rId) == -1) return\r\n\r\n    tableService.save(rows, rId, (resultingRows) => {\r\n      setRows(resultingRows)\r\n      setInsertedRows(irs => irs.filter(r => r != rId))\r\n      removeErrorsForRow(rId)\r\n    }, (e) => addErrorRow(rId, \" Error saving the row: \" + e))\r\n  }\r\n\r\n  const handleRowChange = (newRow, index) => {\r\n    if (insertedRows.indexOf(index) == -1)\r\n      tableService.update(rows, newRow, index, (rows) => {\r\n        setRows(rows)\r\n        removeErrorsForRow(index)\r\n      }, (e) => {\r\n        var message = e.message.length == 0 ? \" Undefined error during row update\" : \" Error updating row: \" + e.message\r\n        addErrorRow(index, message)\r\n        console.log(e)\r\n      })\r\n    else\r\n      setRows(tableService.updateLocal(rows, newRow, index))\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadTableRows()\r\n    tableService.getSchema(data => setColumns(data.data.columns), () => addNotification(\"Unable to fetch table schema\", \"error\"))\r\n  }, [])\r\n\r\n  var highlightedRowsFinal = []\r\n  if (errorRows.length > 0) {\r\n    highlightedRowsFinal = highlightedRowsFinal.concat(errorRows.slice(0).reverse().map(er => { return { id: er.id, message: er.message, type: \"error\" } }))\r\n  }\r\n\r\n  if (insertedRows.length > 0) {\r\n    highlightedRowsFinal = highlightedRowsFinal.concat(insertedRows.map(i => { return { id: i, message: \"This row is not saved\", type: \"warning\" } }))\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <NotificationArea\r\n        notifications={notifications}\r\n        handleClose={(index) => setNotifications(curr => curr.filter((notifications, i) => i !== index))}\r\n      />\r\n      <DataGridControlBar rowCount={rows.length} columns={columns} onChangeColumnFilter={setColumnFilter} />\r\n\r\n      <DataGridTable\r\n        rows={rows}\r\n        columns={columnFilter.length > 0 ? columns.filter(c => columnFilter.includes(c.column)) : columns}\r\n        highlightRows={highlightedRowsFinal}\r\n        onRowChange={handleRowChange}\r\n        onDelete={deleteAction}\r\n        onInsert={(idx) => insertAction(idx, true)}\r\n        onSave={saveAction}\r\n        onRefresh={loadTableRows}\r\n        onColumnDelete={(col) => setColumns(columns => columns.filter(c => c.column != col))}\r\n        onColumnRename={undefined}\r\n        onColumnInsert={() => setDefineColumnDialogOpen(true)}\r\n      />\r\n      <DefineColumnDialog\r\n        open={defineColumnDialogOpen}\r\n        handleClose={() => setDefineColumnDialogOpen(false)}\r\n        onSubmit={(data) => tableService.addColumn(data, () => {window.location.reload(false)}, () => { console.log(\"error\")})}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SavageTable"]},"metadata":{},"sourceType":"module"}