{"ast":null,"code":"import TableService from '../../Service/TableService';\n\nclass TableManager {\n  constructor(table) {\n    this.table = table;\n    this.tableService = new TableService();\n    this.unsynchronizedRows = [];\n    this.rows = [];\n    console.debug(\"Initialized table manager for table \" + table);\n  }\n\n  loadTableRowSetFromDatabase() {\n    var rows = [];\n    this.tableService.getRowsOfTable(this.table, function (data) {\n      rows = data.data.rows;\n      console.debug(\"Fetched rowset from database for table \" + this.table + \". Number of rows: \" + rows.length);\n    }, function (data) {\n      console.debug(\"An error occured during fetching rowset of table \" + this.table + \" from database. ( \" + data.data + \")\");\n    });\n    return rows;\n  }\n\n  getRowSet() {\n    if (this.rows.length == 0) {\n      this.loadTableRowSetFromDatabase();\n    }\n\n    return this.rows;\n  }\n\n  getRow(index) {\n    return this.getRowSet()[index];\n  }\n\n  addRow(columns, index) {\n    var copyOfRows = [...this.rows];\n    var newRow = {};\n    columns.forEach(col => {\n      newRow[col] = \"\";\n    });\n    copyOfRows.splice(index, 0, newRow);\n    this.rows = copyOfRows;\n    this.updateUnsynchronizedRowsAfterInsertion(index);\n    console.debug(\"Inserted a new row at index \" + index);\n  }\n\n  update(updatedRow, index) {\n    var oldRow = this.rows[index];\n    var newRowSet = [...this.rows];\n    var rowUpdateData = {\n      oldRow: oldRow,\n      newRow: updatedRow\n    };\n    this.tableService.addRowToTable(this.table, rowUpdateData, function () {\n      newRowSet[index] = updatedRow;\n      console.debug(\"Added row to database for table \" + this.table);\n    }, function (data) {\n      console.debug(\"Error occured during adding row to database for table \" + this.table + \"(\" + data.data + \")\");\n    });\n    this.rows = newRowSet;\n  }\n\n  delete(index) {\n    if (this.unsynchronizedRows.includes(index)) {\n      this.deleteRowFromLocalTable(index);\n    } else {\n      var data = {\n        row: this.rows[index]\n      };\n      this.tableService.deleteRowOfTable(this.table, data, function () {\n        this.deleteRowFromLocalTable(index);\n      }.bind(this), function (data) {\n        console.log(data);\n      });\n    }\n  }\n\n  addUnsynchronizedRowsToDatabase() {\n    var exceptions = [];\n    var addedRows = [];\n    this.unsynchronizedRows.forEach(index => {\n      this.tableService.addRowToTable(this.table, {\n        row: this.rows[index]\n      }, function (data) {\n        var synchronizedRow = data.data.row;\n        this.rows[index] = synchronizedRow;\n        addedRows.push(index);\n      }, function (data) {\n        exceptions.push({\n          index: index,\n          message: data.data\n        });\n      });\n    });\n    addedRows.forEach(i => this.deleteRowFromUnsynchronizedRowsIfPresent(i));\n    return exceptions;\n  }\n\n  deleteRowFromLocalTable(index) {\n    var newRowSet = [...this.rows];\n    newRowSet.splice(index, 1);\n    this.rows = newRowSet;\n    this.updateUnsynchronizedRowsAfterDeletion(index);\n  }\n\n  updateUnsynchronizedRowsAfterInsertion(index) {\n    this.unsynchronizedRows = this.unsynchronizedRows.map(i => index <= i ? i + 1 : i);\n    this.this.unsynchronizedRows.push(index);\n  }\n\n  updateUnsynchronizedRowsAfterDeletion(index) {\n    this.deleteRowFromUnsynchronizedRowsIfPresent(index);\n    this.unsynchronizedRows = this.unsynchronizedRows.map(i => index <= i ? i - 1 : i);\n  }\n\n  deleteRowFromUnsynchronizedRowsIfPresent(index) {\n    var indexInList = this.unsynchronizedRows.indexOf(index);\n    if (indexInList > -1) this.unsynchronizedRows.splice(indexInList, 1);\n  }\n\n}\n\nexport default TableManager;","map":{"version":3,"sources":["C:/Users/vincent/git/savagerow/front-end/src/Components/Table/TableManager.js"],"names":["TableService","TableManager","constructor","table","tableService","unsynchronizedRows","rows","console","debug","loadTableRowSetFromDatabase","getRowsOfTable","data","length","getRowSet","getRow","index","addRow","columns","copyOfRows","newRow","forEach","col","splice","updateUnsynchronizedRowsAfterInsertion","update","updatedRow","oldRow","newRowSet","rowUpdateData","addRowToTable","delete","includes","deleteRowFromLocalTable","row","deleteRowOfTable","bind","log","addUnsynchronizedRowsToDatabase","exceptions","addedRows","synchronizedRow","push","message","i","deleteRowFromUnsynchronizedRowsIfPresent","updateUnsynchronizedRowsAfterDeletion","map","this","indexInList","indexOf"],"mappings":"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","sourcesContent":["import TableService from '../../Service/TableService';\r\n\r\n\r\nclass TableManager {\r\n    constructor(table) {\r\n        this.table = table\r\n        this.tableService = new TableService()\r\n        this.unsynchronizedRows = []\r\n        this.rows = [] \r\n        console.debug(\"Initialized table manager for table \" + table)\r\n    }\r\n\r\n    loadTableRowSetFromDatabase() {\r\n        var rows = []\r\n        this.tableService.getRowsOfTable(\r\n            this.table,\r\n            function (data) {\r\n                rows = data.data.rows\r\n                console.debug(\"Fetched rowset from database for table \" + this.table + \". Number of rows: \" + rows.length)\r\n            },\r\n            function (data) {\r\n                console.debug(\"An error occured during fetching rowset of table \" + this.table + \" from database. ( \" + data.data + \")\")\r\n            }\r\n        )\r\n\r\n        return rows\r\n    }\r\n\r\n    getRowSet() {\r\n        if(this.rows.length == 0) {\r\n            this.loadTableRowSetFromDatabase();\r\n        }\r\n        return this.rows\r\n    }\r\n\r\n    getRow(index) {\r\n        return this.getRowSet()[index]\r\n    }\r\n\r\n    addRow(columns, index) {\r\n        var copyOfRows = [...this.rows]\r\n        var newRow = {}\r\n        columns.forEach(col => { newRow[col] = \"\" })\r\n        copyOfRows.splice(index, 0, newRow)\r\n        this.rows = copyOfRows;\r\n        this.updateUnsynchronizedRowsAfterInsertion(index);\r\n        console.debug(\"Inserted a new row at index \" + index)\r\n    }\r\n\r\n\r\n    update(updatedRow, index) {\r\n        var oldRow = this.rows[index]\r\n        var newRowSet = [...this.rows]\r\n        var rowUpdateData = { oldRow: oldRow, newRow: updatedRow }\r\n\r\n        this.tableService.addRowToTable(\r\n            this.table,\r\n            rowUpdateData,\r\n            function () {\r\n                newRowSet[index] = updatedRow;\r\n                console.debug(\"Added row to database for table \" + this.table)\r\n            },\r\n            function (data) {\r\n                console.debug(\"Error occured during adding row to database for table \" + this.table + \"(\" + data.data + \")\")\r\n            });\r\n\r\n        this.rows = newRowSet\r\n    }\r\n\r\n    delete(index) {\r\n        if (this.unsynchronizedRows.includes(index)) {\r\n            this.deleteRowFromLocalTable(index)\r\n        } else {\r\n            var data = { row: this.rows[index] }\r\n            this.tableService.deleteRowOfTable(\r\n                this.table,\r\n                data,\r\n                function () {\r\n                    this.deleteRowFromLocalTable(index)\r\n                }.bind(this),\r\n                function (data) {\r\n                    console.log(data)\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    addUnsynchronizedRowsToDatabase() {\r\n        var exceptions = []\r\n        var addedRows = []\r\n\r\n        this.unsynchronizedRows.forEach(index => {\r\n            this.tableService.addRowToTable(this.table, { row: this.rows[index] },\r\n                function (data) {\r\n                    var synchronizedRow = data.data.row\r\n                    this.rows[index] = synchronizedRow\r\n                    addedRows.push(index)\r\n                },\r\n                function (data) { exceptions.push({ index: index, message: data.data }) }\r\n            )\r\n        })\r\n\r\n        addedRows.forEach(i => this.deleteRowFromUnsynchronizedRowsIfPresent(i))\r\n\r\n        return exceptions\r\n    }\r\n\r\n    deleteRowFromLocalTable(index) {\r\n        var newRowSet = [...this.rows]\r\n        newRowSet.splice(index, 1)\r\n        this.rows = newRowSet;\r\n        this.updateUnsynchronizedRowsAfterDeletion(index);\r\n    }\r\n\r\n    updateUnsynchronizedRowsAfterInsertion(index) {\r\n        this.unsynchronizedRows = this.unsynchronizedRows.map(i => (index <= i ? i + 1 : i))\r\n        this.this.unsynchronizedRows.push(index)\r\n    }\r\n\r\n    updateUnsynchronizedRowsAfterDeletion(index) {\r\n        this.deleteRowFromUnsynchronizedRowsIfPresent(index)\r\n        this.unsynchronizedRows = this.unsynchronizedRows.map(i => (index <= i ? i - 1 : i))\r\n    }\r\n\r\n    deleteRowFromUnsynchronizedRowsIfPresent(index) {\r\n        var indexInList = this.unsynchronizedRows.indexOf(index)\r\n        if (indexInList > -1) this.unsynchronizedRows.splice(indexInList, 1)\r\n    }\r\n}\r\nexport default TableManager"]},"metadata":{},"sourceType":"module"}