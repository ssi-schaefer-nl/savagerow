{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\savagerow\\\\front-end\\\\src\\\\Components\\\\DatabaseSelect\\\\DatabaseSelect.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { CircularProgress, Divider } from \"@material-ui/core\";\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport CollapsableAlert from \"../CollapsableAlert/CollapsableAlert\";\nimport DatabaseService from \"../../Service/ConfigureService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DatabaseSelect(props) {\n  _s();\n\n  const configureService = new DatabaseService();\n  const onSelect = props.onSelect;\n  const [databases, setDatabases] = useState([]);\n  const [database, setDatabase] = useState(undefined);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [loadingAvailableDatabases, setLoadingAvailableDatabases] = useState(true);\n  const [initialValue, setInitialValue] = useState(null);\n  const [loadingError, setLoadingError] = useState(false);\n  useEffect(() => {\n    setInitialValue(props.initialValue);\n    configureService.listAllDatabases(function (data) {\n      setDatabases(data.data);\n      setLoadingAvailableDatabases(false);\n    }, function (data) {\n      setLoadingAvailableDatabases(false);\n      setLoadingError(true);\n    });\n  }, []);\n\n  const handleChange = e => {\n    var db = e.target.value;\n    configureService.changeDatabases(db, () => {\n      localStorage.setItem('database', db);\n      setDatabase(db);\n      if (onSelect) onSelect();\n    }, undefined);\n  };\n\n  if (loadingAvailableDatabases) {\n    return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }, this);\n  } else if (loadingError) {\n    return /*#__PURE__*/_jsxDEV(CollapsableAlert, {\n      severity: \"warning\",\n      message: \"Unable to fetch available databases. Check database connection.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this);\n  }\n\n  var val = database ? database : initialValue ? initialValue : \"\";\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    style: {\n      margin: 1,\n      minWidth: 120\n    },\n    children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n      htmlFor: \"demo-customized-select-native\",\n      children: \"Database\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NativeSelect, {\n      labelId: \"demo-simple-select-label\",\n      id: \"demo-simple-select\",\n      value: val,\n      onChange: handleChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        \"aria-label\": \"None\",\n        value: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), databases.map(d => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: d,\n        children: d\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DatabaseSelect, \"1V2vYywNVx3pdkvmeOd4QBTSALo=\");\n\n_c = DatabaseSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"DatabaseSelect\");","map":{"version":3,"sources":["C:/Users/vincent/git/savagerow/front-end/src/Components/DatabaseSelect/DatabaseSelect.js"],"names":["React","Component","useEffect","useState","Typography","InputLabel","MenuItem","FormControl","Select","CircularProgress","Divider","NativeSelect","CollapsableAlert","DatabaseService","DatabaseSelect","props","configureService","onSelect","databases","setDatabases","database","setDatabase","undefined","anchorEl","setAnchorEl","loadingAvailableDatabases","setLoadingAvailableDatabases","initialValue","setInitialValue","loadingError","setLoadingError","listAllDatabases","data","handleChange","e","db","target","value","changeDatabases","localStorage","setItem","val","margin","minWidth","map","d"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { CircularProgress, Divider } from \"@material-ui/core\";\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CollapsableAlert from \"../CollapsableAlert/CollapsableAlert\";\r\nimport DatabaseService from \"../../Service/ConfigureService\";\r\n\r\n\r\nexport default function DatabaseSelect(props) {\r\n    const configureService = new DatabaseService()\r\n    const onSelect = props.onSelect\r\n    const [databases, setDatabases] = useState([])\r\n    const [database, setDatabase] = useState(undefined)\r\n    const [anchorEl, setAnchorEl] = useState(null)\r\n    const [loadingAvailableDatabases, setLoadingAvailableDatabases] = useState(true)\r\n    const [initialValue, setInitialValue] = useState(null)\r\n    const [loadingError, setLoadingError] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setInitialValue(props.initialValue)\r\n\r\n        configureService.listAllDatabases(\r\n            function (data) {\r\n                setDatabases(data.data)\r\n                setLoadingAvailableDatabases(false)\r\n            },\r\n            function (data) {\r\n                setLoadingAvailableDatabases(false)\r\n                setLoadingError(true)\r\n            });\r\n    }, [])\r\n\r\n    const handleChange = (e) => {\r\n        var db = e.target.value\r\n        configureService.changeDatabases(\r\n            db,\r\n            () => {\r\n                localStorage.setItem('database', db);\r\n                setDatabase(db)\r\n                if (onSelect) onSelect()\r\n            },\r\n            undefined\r\n        );\r\n    }\r\n\r\n    if (loadingAvailableDatabases) {\r\n        return (<CircularProgress />)\r\n    } else if (loadingError) {\r\n        return (<CollapsableAlert severity=\"warning\" message=\"Unable to fetch available databases. Check database connection.\" />)\r\n    }\r\n\r\n    var val = database ? database : initialValue ? initialValue : \"\"\r\n    return (\r\n\r\n        <FormControl style={{ margin: 1, minWidth: 120 }}>\r\n            <InputLabel htmlFor=\"demo-customized-select-native\">Database</InputLabel>\r\n            <NativeSelect\r\n                labelId=\"demo-simple-select-label\"\r\n                id=\"demo-simple-select\"\r\n                value={val}\r\n                onChange={handleChange}\r\n            >\r\n                <option aria-label=\"None\" value=\"\" />\r\n\r\n                {databases.map(d => (\r\n                    <option value={d}>{d}</option>\r\n                ))}\r\n\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}