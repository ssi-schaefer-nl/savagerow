{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\playground\\\\src\\\\Components\\\\Tables\\\\SavageTable.js\";\nimport React from \"react\";\nimport ReactDataGrid, { TextEditor } from \"react-data-grid\";\nimport \"./styles.css\";\nimport TableDataService from '../../Service/TableDataServices';\nimport { CircularProgress } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Example extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rows: [],\n      columns: [],\n      loading: true,\n      tableDataService: new TableDataService()\n    };\n\n    this.handleClick = e => {\n      if (e.type === 'contextmenu') {\n        e.preventDefault();\n        this.insertEmptyRow();\n      }\n    };\n\n    this.insertEmptyRow = () => {\n      var emptyRow = {};\n      this.state.columns.forEach(col => {\n        emptyRow[col.key] = \"\";\n      });\n      var data = this.state.rows;\n      data.unshift(emptyRow);\n      this.setState({\n        rows: data\n      });\n    };\n\n    this.rowsChanged = (rows, index) => {\n      var rowIdx = index.indexes[0];\n      var oldRow = this.state.rows[rowIdx];\n      var changedRow = rows[rowIdx];\n\n      if (rowIdx == 0) {\n        this.addRow(changedRow, rowIdx);\n      } else {\n        this.updateRow(oldRow, changedRow, rowIdx);\n      }\n    };\n\n    this.addRow = (newRow, index) => {\n      var data = {\n        newRow\n      };\n      this.state.tableDataService.addTableData(this.props.table, data, function (data) {\n        var rows = this.state.rows;\n        rows.push(newRow);\n        this.setState({\n          rows: rows\n        });\n      }.bind(this), function (data) {\n        console.log(data);\n      }.bind(this));\n    };\n\n    this.updateRow = (oldRow, newRow, index) => {\n      var data = [{\n        oldRow: oldRow,\n        newRow: newRow\n      }];\n      this.state.tableDataService.updateTableData(this.props.table, data, function (data) {\n        var rows = this.state.rows;\n        rows[index] = newRow;\n        this.setState({\n          rows: rows\n        });\n      }.bind(this), function (data) {\n        console.log(data);\n      }.bind(this));\n    };\n  }\n\n  componentDidMount() {\n    this.loadTableData();\n  }\n\n  loadTableData() {\n    this.state.tableDataService.getTableData(this.props.table, function (data) {\n      this.setState({\n        columns: this.createColumns(data.data.tableSchema.columns)\n      });\n      this.setState({\n        rows: data.data.data\n      });\n      this.setState({\n        loading: false\n      });\n    }.bind(this), function (data) {\n      console.log(data);\n      this.setState({\n        loading: false\n      });\n    }.bind(this));\n  }\n\n  createColumns(columns) {\n    return columns.map(col => {\n      var def = {\n        key: col.column,\n        name: col.column,\n        resizable: true\n      };\n\n      if (col.editable) {\n        def.editor = TextEditor;\n      }\n\n      return def;\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: this.handleClick,\n      onContextMenu: this.handleClick,\n      children: /*#__PURE__*/_jsxDEV(ReactDataGrid, {\n        columns: this.state.columns,\n        rows: this.state.rows,\n        rowGetter: i => this.state.rows[i],\n        onRowsChange: this.rowsChanged,\n        enableCellSelect: true,\n        style: {\n          resize: 'both',\n          'height': \"70vh\",\n          maxWidth: \"100%\"\n        },\n        className: \"fill-grid\",\n        minHeight: \"1000\",\n        onRowClick: this.handleClick,\n        onFocus: console.log\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Example;","map":{"version":3,"sources":["C:/Users/vincent/git/playground/src/Components/Tables/SavageTable.js"],"names":["React","ReactDataGrid","TextEditor","TableDataService","CircularProgress","Example","Component","state","rows","columns","loading","tableDataService","handleClick","e","type","preventDefault","insertEmptyRow","emptyRow","forEach","col","key","data","unshift","setState","rowsChanged","index","rowIdx","indexes","oldRow","changedRow","addRow","updateRow","newRow","addTableData","props","table","push","bind","console","log","updateTableData","componentDidMount","loadTableData","getTableData","createColumns","tableSchema","map","def","column","name","resizable","editable","editor","render","i","resize","maxWidth"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport ReactDataGrid, { TextEditor } from \"react-data-grid\";\r\nimport \"./styles.css\";\r\nimport TableDataService from '../../Service/TableDataServices';\r\nimport { CircularProgress } from \"@material-ui/core\";\r\n\r\n\r\nclass Example extends React.Component {\r\n    state = {\r\n        rows: [],\r\n        columns: [],\r\n        loading: true,\r\n        tableDataService: new TableDataService(),\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.loadTableData()\r\n    }\r\n\r\n    loadTableData() {\r\n        this.state.tableDataService.getTableData(this.props.table,\r\n            function (data) {\r\n                this.setState({ columns: this.createColumns(data.data.tableSchema.columns) })\r\n                this.setState({ rows: data.data.data })\r\n                this.setState({ loading: false })\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n                this.setState({ loading: false })\r\n            }.bind(this));\r\n    }\r\n\r\n    createColumns(columns) {\r\n        return columns.map(col => {\r\n            var def = {\r\n                key: col.column,\r\n                name: col.column,\r\n                resizable: true\r\n            }\r\n            if (col.editable) {\r\n                def.editor = TextEditor\r\n            }\r\n            return def;\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.state.loading) {\r\n            return (<CircularProgress />)\r\n        }\r\n\r\n        return (\r\n            <div onClick={this.handleClick} onContextMenu={this.handleClick}>\r\n                <ReactDataGrid\r\n                    columns={this.state.columns}\r\n                    rows={this.state.rows}\r\n                    rowGetter={i => this.state.rows[i]}\r\n                    onRowsChange={this.rowsChanged}\r\n                    enableCellSelect={true}\r\n                    style={{ resize: 'both', 'height': \"70vh\", maxWidth: \"100%\" }}\r\n                    className=\"fill-grid\"\r\n                    minHeight=\"1000\"\r\n                    onRowClick={this.handleClick}\r\n                    onFocus={console.log}\r\n                    \r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    handleClick = (e) => {\r\n        if (e.type === 'contextmenu') {\r\n            e.preventDefault();\r\n            \r\n            this.insertEmptyRow()\r\n        }\r\n    }\r\n\r\n    insertEmptyRow = () => {\r\n        var emptyRow = {}\r\n        this.state.columns.forEach(col => {emptyRow[col.key] = \"\"})\r\n        var data = this.state.rows\r\n        data.unshift(emptyRow)\r\n        this.setState({rows: data})\r\n    }\r\n\r\n\r\n    rowsChanged = (rows, index) => {\r\n        var rowIdx = index.indexes[0];\r\n        var oldRow = this.state.rows[rowIdx];\r\n        var changedRow = rows[rowIdx];\r\n\r\n\r\n        if (rowIdx == 0) {\r\n            this.addRow(changedRow, rowIdx)\r\n        } else {\r\n            this.updateRow(oldRow, changedRow, rowIdx)\r\n        }\r\n    }\r\n\r\n    addRow = (newRow, index) => {\r\n        var data = { newRow }\r\n        this.state.tableDataService.addTableData(this.props.table, data,\r\n            function (data) {\r\n                var rows = this.state.rows;\r\n                rows.push(newRow)\r\n                this.setState({ rows: rows })\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n            }.bind(this));\r\n\r\n    }\r\n\r\n    updateRow = (oldRow, newRow, index) => {\r\n        var data = [\r\n            {\r\n                oldRow: oldRow,\r\n                newRow: newRow\r\n            },\r\n        ]\r\n\r\n        this.state.tableDataService.updateTableData(this.props.table, data,\r\n            function (data) {\r\n                var rows = this.state.rows;\r\n                rows[index] = newRow;\r\n                this.setState({ rows: rows })\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n            }.bind(this));\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Example;"]},"metadata":{},"sourceType":"module"}