{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\savagerow\\\\front-end\\\\src\\\\Components\\\\Table\\\\Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport ContextMenu from '../ContextMenu/ContextMenu';\nimport DataGridControlBar from './DataGridControlBar';\nimport DataGridTable from './DataGridTable';\nimport NotificationArea from '../NotificationArea/NotificationArea';\nimport TableService from './TableService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SavageTable = props => {\n  _s();\n\n  const tableService = new TableService(props.table);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [rows, setRows] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n  const [insertedRows, setInsertedRows] = useState([]);\n\n  const addNotification = (content, severity) => {\n    const notification = {\n      content: content,\n      severity: severity\n    };\n\n    if (notifications.find(function (el) {\n      return el.content === content;\n    }) == undefined) {\n      setNotifications(notifications => [...notifications, notification]);\n    }\n  };\n\n  const loadTableRows = () => {\n    tableService.getRowSet(data => setRows(data.data.rows), () => addNotification(\"Unable to fetch table rows\", \"error\"));\n    setInsertedRows([]);\n    setNotifications([]);\n  };\n\n  const insertAction = () => {\n    const rId = selectedRow;\n    setInsertedRows(irs => [...irs.map(ir => ir >= rId ? ir + 1 : ir), rId]);\n    setRows(tableService.addRow(rows, rId));\n  };\n\n  const deleteAction = () => {\n    const rId = selectedRow;\n    tableService.delete(rows, rId, resultingRows => {\n      setInsertedRows(irs => irs.filter(r => r != rId).map(ir => ir > rId ? ir - 1 : ir));\n      setRows(resultingRows);\n    }, e => addNotification(\"Unable to delete row: \" + e, \"warning\"));\n  };\n\n  const saveAction = () => {\n    const rId = selectedRow;\n\n    if (insertedRows.indexOf(rId) == -1) {\n      addNotification(\"The row you are trying to save is already synchronized\", \"info\");\n      return;\n    }\n\n    tableService.save(rows, rId, resultingRows => {\n      setRows(resultingRows);\n      setInsertedRows(irs => irs.filter(r => r != rId));\n    }, e => addNotification(\"Unable to save data: \" + e, \"error\"));\n  };\n\n  const contextMenuActions = {\n    \"Insert\": () => insertAction(),\n    \"Delete\": () => deleteAction(),\n    \"Save\": () => saveAction(),\n    \"Reload\": () => loadTableRows()\n  };\n\n  const handleRowChange = (newRow, index) => {\n    if (insertedRows.indexOf(index) == -1) tableService.update(rows, newRow, index, rows => setRows(rows), e => addNotification(\"Unable to update row: \" + e, \"warning\"));else setRows(tableService.updateLocal(rows, newRow, index));\n  };\n\n  const keydownHandler = e => {\n    if ((window.navigator.platform.match(\"Mac\") ? e.metaKey : e.ctrlKey) && e.key === 's') {\n      e.preventDefault();\n      console.log(insertedRows);\n      insertedRows.forEach(rId => {\n        tableService.save(rows, rId, resultingRows => {\n          setRows(resultingRows);\n          setInsertedRows(irs => irs.filter(r => r != rId));\n        }, e => addNotification(\"Unable to save data: \" + e, \"warning\"));\n      });\n    }\n  };\n\n  useEffect(() => {\n    loadTableRows();\n    tableService.getSchema(data => setColumns(data.data.columns), () => addNotification(\"Unable to fetch table schema\", \"error\"));\n    document.addEventListener('keydown', keydownHandler);\n    return () => {\n      document.removeEventListener('keydown', keydownHandler);\n    };\n  }, []);\n  console.log(insertedRows);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NotificationArea, {\n      notifications: notifications,\n      handleClose: index => setNotifications(curr => curr.filter((notifications, i) => i !== index))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContextMenu, {\n      menuItems: Object.keys(contextMenuActions),\n      onItemClick: a => contextMenuActions[a](),\n      children: /*#__PURE__*/_jsxDEV(DataGridTable, {\n        rows: rows,\n        columns: columns,\n        onRowSelect: setSelectedRow,\n        highlightRows: insertedRows,\n        onRowChange: handleRowChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataGridControlBar, {\n      rowCount: rows.length,\n      columnCount: columns.length,\n      unsavedRows: insertedRows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SavageTable, \"nY/93GssPvURsuTGCnBwNG1pO9k=\");\n\n_c = SavageTable;\nexport default SavageTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"SavageTable\");","map":{"version":3,"sources":["C:/Users/vincent/git/savagerow/front-end/src/Components/Table/Table.js"],"names":["React","Component","useEffect","useState","ContextMenu","DataGridControlBar","DataGridTable","NotificationArea","TableService","SavageTable","props","tableService","table","selectedRow","setSelectedRow","rows","setRows","columns","setColumns","notifications","setNotifications","insertedRows","setInsertedRows","addNotification","content","severity","notification","find","el","undefined","loadTableRows","getRowSet","data","insertAction","rId","irs","map","ir","addRow","deleteAction","delete","resultingRows","filter","r","e","saveAction","indexOf","save","contextMenuActions","handleRowChange","newRow","index","update","updateLocal","keydownHandler","window","navigator","platform","match","metaKey","ctrlKey","key","preventDefault","console","log","forEach","getSchema","document","addEventListener","removeEventListener","curr","i","Object","keys","a","length"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\nimport ContextMenu from '../ContextMenu/ContextMenu';\r\nimport DataGridControlBar from './DataGridControlBar';\r\nimport DataGridTable from './DataGridTable';\r\nimport NotificationArea from '../NotificationArea/NotificationArea';\r\nimport TableService from './TableService';\r\n\r\n\r\nconst SavageTable = (props) => {\r\n  const tableService = new TableService(props.table)\r\n  const [selectedRow, setSelectedRow] = useState(null)\r\n  const [rows, setRows] = useState([])\r\n  const [columns, setColumns] = useState([])\r\n  const [notifications, setNotifications] = useState([])\r\n  const [insertedRows, setInsertedRows] = useState([])\r\n\r\n  const addNotification = (content, severity) => {\r\n    const notification = { content: content, severity: severity }\r\n    if (notifications.find(function (el) { return el.content === content }) == undefined) {\r\n      setNotifications(notifications => [...notifications, notification])\r\n    }\r\n  }\r\n\r\n  const loadTableRows = () => {\r\n    tableService.getRowSet(data => setRows(data.data.rows), () => addNotification(\"Unable to fetch table rows\", \"error\"))\r\n    setInsertedRows([])\r\n    setNotifications([])\r\n  }\r\n\r\n  const insertAction = () => {\r\n    const rId = selectedRow\r\n    setInsertedRows(irs => [...irs.map(ir => ir >= rId ? ir + 1 : ir), rId])\r\n    setRows(tableService.addRow(rows, rId))\r\n  }\r\n\r\n  const deleteAction = () => {\r\n    const rId = selectedRow\r\n\r\n    tableService.delete(rows, rId, (resultingRows) => {\r\n      setInsertedRows(irs => irs.filter(r => r != rId).map(ir => ir > rId ? ir - 1 : ir))\r\n      setRows(resultingRows)\r\n    }, (e) => addNotification(\"Unable to delete row: \" + e, \"warning\"))\r\n  }\r\n\r\n  const saveAction = () => {\r\n    const rId = selectedRow\r\n    if (insertedRows.indexOf(rId) == -1) {\r\n      addNotification(\"The row you are trying to save is already synchronized\", \"info\")\r\n      return\r\n    }\r\n\r\n    tableService.save(rows, rId, (resultingRows) => {\r\n      setRows(resultingRows)\r\n      setInsertedRows(irs => irs.filter(r => r != rId))\r\n    }, (e) => addNotification(\"Unable to save data: \" + e, \"error\"))\r\n  }\r\n\r\n\r\n  const contextMenuActions = {\r\n    \"Insert\": () => insertAction(),\r\n    \"Delete\": () => deleteAction(),\r\n    \"Save\": () => saveAction(),\r\n    \"Reload\": () => loadTableRows()\r\n  }\r\n\r\n  const handleRowChange = (newRow, index) => {\r\n    if (insertedRows.indexOf(index) == -1)\r\n      tableService.update(rows, newRow, index, (rows) => setRows(rows), (e) => addNotification(\"Unable to update row: \" + e, \"warning\"))\r\n    else\r\n      setRows(tableService.updateLocal(rows, newRow, index))\r\n  }\r\n\r\n  const keydownHandler = (e) => {\r\n    if ((window.navigator.platform.match(\"Mac\") ? e.metaKey : e.ctrlKey)  && e.key === 's')  {\r\n      e.preventDefault()\r\n      console.log(insertedRows)\r\n\r\n      insertedRows.forEach(rId => {\r\n\r\n        tableService.save(rows, rId, (resultingRows) => {\r\n          setRows(resultingRows)\r\n          setInsertedRows(irs => irs.filter(r => r != rId))\r\n        }, (e) => addNotification(\"Unable to save data: \" + e, \"warning\"))\r\n      })\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadTableRows()\r\n    tableService.getSchema(data => setColumns(data.data.columns), () => addNotification(\"Unable to fetch table schema\", \"error\"))\r\n    document.addEventListener('keydown', keydownHandler);\r\n    return () => {\r\n      document.removeEventListener('keydown', keydownHandler);\r\n    }\r\n  }, [])\r\n  console.log(insertedRows)\r\n\r\n  return (\r\n    <>\r\n      <NotificationArea\r\n        notifications={notifications}\r\n        handleClose={(index) => setNotifications(curr => curr.filter((notifications, i) => i !== index))}\r\n      />\r\n      <ContextMenu menuItems={Object.keys(contextMenuActions)} onItemClick={(a) => contextMenuActions[a]()}>\r\n        <DataGridTable\r\n          rows={rows}\r\n          columns={columns}\r\n          onRowSelect={setSelectedRow}\r\n          highlightRows={insertedRows}\r\n          onRowChange={handleRowChange}\r\n        />\r\n      </ContextMenu>\r\n      <DataGridControlBar rowCount={rows.length} columnCount={columns.length} unsavedRows={insertedRows} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SavageTable"]},"metadata":{},"sourceType":"module"}