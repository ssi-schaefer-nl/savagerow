{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\savagerow\\\\front-end\\\\src\\\\Components\\\\Table\\\\Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport DataGrid, { TextEditor } from \"react-data-grid\";\nimport TableManager from \"./TableManager\";\nimport TableService from '../../Service/TableService';\nimport { CircularProgress, Typography } from '@material-ui/core';\nimport CollapsableAlert from '../CollapsableAlert/CollapsableAlert';\nimport ContentWithContextMenu from '../ContextMenu/ContextMenu';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport { green, grey, yellow } from '@material-ui/core/colors';\nimport SyncIcon from '@material-ui/icons/Sync';\nimport StorageIcon from '@material-ui/icons/Storage';\nimport ContextMenu from '../ContextMenu/ContextMenu';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst contextMenuItems = {\n  \"Insert\": () => {},\n  \"Delete\": () => {},\n  \"Save\": () => {},\n  \"Reload\": () => {}\n};\n\nconst SavageTable = props => {\n  _s();\n\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [rows, setRows] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [notification, setNotification] = useState(null);\n  const tableService = new TableService();\n  const table = props.table;\n  useEffect(() => {\n    tableService.getRowsOfTable(table, function (data) {\n      setRows(data.rows);\n    }, function (data) {\n      setNotification(data);\n    });\n    tableService.getSchemaOfTable(table, function (data) {\n      setColumns(data.columns);\n    }, function (data) {\n      setNotification(data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ContextMenu, {\n      menuItems: contextMenuItems,\n      onItemClick: a => contextMenuItems[a](),\n      children: /*#__PURE__*/_jsxDEV(SavageDataGrid, {\n        rows: rows,\n        columns: columns,\n        onRowChange: undefined,\n        onRowSelect: setSelectedRow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataGridControlBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SavageTable, \"/J/srHKooi4caKB69JQSL+Y6YSE=\");\n\n_c = SavageTable;\n\nconst SavageDataGrid = props => {\n  const columns = props.columns.map(col => ({\n    key: col.column,\n    name: col.column,\n    resizable: true,\n    nullable: col.nullable,\n    editor: col.editable ? TextEditor : undefined\n  }));\n  const rows = props.rows;\n  const onRowChange = props.onRowChange;\n  const onRowSelect = props.onRowSelect;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      columns: columns,\n      rows: rows,\n      onRowsChange: onRowChange,\n      enableCellSelect: true,\n      style: {\n        'height': \"70vh\",\n        overflowX: 'hidden'\n      },\n      className: \"fill-grid\",\n      minHeight: \"1000\",\n      onSelectedCellChange: onRowSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c2 = SavageDataGrid;\n\nconst DataGridControlBar = props => {\n  const rowCount = props.rowCount;\n  const columnCount = props.columnCount;\n  return /*#__PURE__*/_jsxDEV(BottomNavigation, {\n    showLabels: true,\n    style: {\n      backgroundColor: grey[50],\n      borderWidth: 0.5,\n      borderStyle: \"solid\",\n      borderColor: grey[300]\n    },\n    children: [/*#__PURE__*/_jsxDEV(BottomNavigationAction, {\n      label: \"Rows: \" + rowCount,\n      icon: /*#__PURE__*/_jsxDEV(StorageIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 65\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BottomNavigationAction, {\n      label: \"Columns: \" + columnCount,\n      icon: /*#__PURE__*/_jsxDEV(StorageIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 71\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}; // class ST extends Component {\n//   state = {\n//     tableDataService: new TableService(),\n//     tableManager: new TableManager(this.props.table),\n//     alert: null,\n//     columns: [],\n//     dataLoadingError: false,\n//     loading: true,\n//   }\n//   componentDidMount() {\n//     this.state.tableDataService.getSchemaOfTable(this.props.table,\n//       function (data) {\n//         var columns = data.data.columns.map(col => ({\n//           key: col.column,\n//           name: col.column,\n//           resizable: true,\n//           nullable: col.nullable,\n//           editor: col.editable ? TextEditor : undefined\n//         }));\n//         this.setState({\n//           columns: columns,\n//           loading: false,\n//           indexOfSelectedRow: rows.length,\n//         })\n//       }.bind(this),\n//       function (data) {\n//         console.log(data)\n//         this.setState({loading: false, dataLoadingError: true })\n//       }.bind(this));\n//   }\n//   render() {\n//     if (this.state.loading) {\n//       return (<CircularProgress />)\n//     }\n//     if (this.state.dataLoadingError) {\n//       window.location.reload(false)\n//     }\n//     return (\n//       <div>\n//         {this.state.alert &&\n//           <CollapsableAlert\n//             severity={this.state.alert.severity}\n//             message={this.state.alert.message}\n//             onClose={() => this.setState({ alert: null })}\n//           />}\n//         <ContentWithContextMenu\n//           content={\n//             <DataGrid\n//               columns={this.state.columns}\n//               rows={this.tableManager.getRowSet()}\n//               rowGetter={i => this.tableManager.getRow[i]}\n//               onRowsChange={this.update}\n//               enableCellSelect={true}\n//               style={{ 'height': \"70vh\", overflowX: 'hidden' }}\n//               className=\"fill-grid\"\n//               minHeight=\"1000\"\n//               onSelectedCellChange={this.handleCellChange}\n//             />\n//           }\n//           menuItems={Object.keys(this.contextMenuItems)}\n//           action={(a) => this.contextMenuItems[a]()}\n//         />\n//         <BottomNavigation showLabels style={{ backgroundColor: grey[50], borderWidth: 0.5, borderStyle: \"solid\", borderColor: grey[300] }}>\n//           {this.state.unsavedRowsIndices.length > 0 &&\n//             <BottomNavigationAction\n//               label=\"Unsaved rows\"\n//               icon={<SyncIcon style={{ color: yellow[500] }} />}\n//             />\n//           }\n//           <BottomNavigationAction label={\"Rows: \" + this.state.rows.length} icon={<StorageIcon />} />\n//           <BottomNavigationAction label={\"Columns: \" + this.state.columns.length} icon={<StorageIcon />} />\n//         </BottomNavigation>\n//       </div >\n//     );\n//   }\n//   contextMenuItems = {\n//     \"Insert\": () => { this.insertRow(this.) },\n//     \"Delete\": () => { this.deleteRow() },\n//     \"Save\": () => { this.save(true) },\n//     \"Reload\": () => { this.loadTableData() }\n//   }\n//   handleCellChange = (c) => {\n//     if (c.rowIdx != this.state.indexOfSelectedRow && this.state.unsavedRowsIndices.includes(this.state.indexOfSelectedRow)) {\n//       this.save(false)\n//     }\n//     this.state.indexOfSelectedRow = c.rowIdx\n//   }\n//   update = (rows, index) => {\n//     var indexOfUpdatedRow = index.indexes[0];\n//     var updatedRow = rows[indexOfUpdatedRow];\n//     this.tableManager.update(updatedRow, index)\n//   }\n// }\n\n\n_c3 = DataGridControlBar;\nexport default SavageTable;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SavageTable\");\n$RefreshReg$(_c2, \"SavageDataGrid\");\n$RefreshReg$(_c3, \"DataGridControlBar\");","map":{"version":3,"sources":["C:/Users/vincent/git/savagerow/front-end/src/Components/Table/Table.js"],"names":["React","Component","useEffect","useState","DataGrid","TextEditor","TableManager","TableService","CircularProgress","Typography","CollapsableAlert","ContentWithContextMenu","BottomNavigation","BottomNavigationAction","LocationOnIcon","green","grey","yellow","SyncIcon","StorageIcon","ContextMenu","contextMenuItems","SavageTable","props","selectedRow","setSelectedRow","rows","setRows","columns","setColumns","notification","setNotification","tableService","table","getRowsOfTable","data","getSchemaOfTable","a","undefined","SavageDataGrid","map","col","key","column","name","resizable","nullable","editor","editable","onRowChange","onRowSelect","overflowX","DataGridControlBar","rowCount","columnCount","backgroundColor","borderWidth","borderStyle","borderColor"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\nimport DataGrid, { TextEditor } from \"react-data-grid\";\r\nimport TableManager from \"./TableManager\"\r\nimport TableService from '../../Service/TableService';\r\nimport { CircularProgress, Typography } from '@material-ui/core';\r\nimport CollapsableAlert from '../CollapsableAlert/CollapsableAlert';\r\nimport ContentWithContextMenu from '../ContextMenu/ContextMenu';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport { green, grey, yellow } from '@material-ui/core/colors';\r\nimport SyncIcon from '@material-ui/icons/Sync';\r\nimport StorageIcon from '@material-ui/icons/Storage';\r\nimport ContextMenu from '../ContextMenu/ContextMenu';\r\n\r\n\r\nconst contextMenuItems = {\r\n  \"Insert\": () => { },\r\n  \"Delete\": () => { },\r\n  \"Save\": () => { },\r\n  \"Reload\": () => { }\r\n}\r\n\r\nconst SavageTable = (props) => {\r\n  const [selectedRow, setSelectedRow] = useState(null)\r\n  const [rows, setRows] = useState([])\r\n  const [columns, setColumns] = useState([])\r\n  const [notification, setNotification] = useState(null)\r\n\r\n  const tableService = new TableService()\r\n  const table = props.table\r\n\r\n  useEffect(() => {\r\n    tableService.getRowsOfTable(table, function (data) { setRows(data.rows) }, function (data) { setNotification(data) })\r\n    tableService.getSchemaOfTable(table, function (data) { setColumns(data.columns) }, function (data) { setNotification(data) })\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {/* <NotificationArea notification={notification} /> */}\r\n      <ContextMenu menuItems={contextMenuItems} onItemClick={(a) => contextMenuItems[a]()}>\r\n        <SavageDataGrid rows={rows} columns={columns} onRowChange={undefined} onRowSelect={setSelectedRow} />\r\n      </ContextMenu>\r\n      <DataGridControlBar />\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n\r\nconst SavageDataGrid = (props) => {\r\n  const columns = props.columns.map(col => ({\r\n    key: col.column,\r\n    name: col.column,\r\n    resizable: true,\r\n    nullable: col.nullable,\r\n    editor: col.editable ? TextEditor : undefined\r\n  }));\r\n\r\n  const rows = props.rows\r\n  const onRowChange = props.onRowChange\r\n  const onRowSelect = props.onRowSelect\r\n\r\n  return (\r\n    <>\r\n      <DataGrid\r\n        columns={columns}\r\n        rows={rows}\r\n        onRowsChange={onRowChange}\r\n        enableCellSelect={true}\r\n        style={{ 'height': \"70vh\", overflowX: 'hidden' }}\r\n        className=\"fill-grid\"\r\n        minHeight=\"1000\"\r\n        onSelectedCellChange={onRowSelect}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nconst DataGridControlBar = (props) => {\r\n  const rowCount = props.rowCount\r\n  const columnCount = props.columnCount\r\n\r\n  return (\r\n    <BottomNavigation showLabels style={{ backgroundColor: grey[50], borderWidth: 0.5, borderStyle: \"solid\", borderColor: grey[300] }}>\r\n      <BottomNavigationAction label={\"Rows: \" + rowCount} icon={<StorageIcon />} />\r\n      <BottomNavigationAction label={\"Columns: \" + columnCount} icon={<StorageIcon />} />\r\n    </BottomNavigation>\r\n  )\r\n}\r\n\r\n\r\n// class ST extends Component {\r\n//   state = {\r\n//     tableDataService: new TableService(),\r\n//     tableManager: new TableManager(this.props.table),\r\n//     alert: null,\r\n//     columns: [],\r\n//     dataLoadingError: false,\r\n//     loading: true,\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     this.state.tableDataService.getSchemaOfTable(this.props.table,\r\n//       function (data) {\r\n//         var columns = data.data.columns.map(col => ({\r\n//           key: col.column,\r\n//           name: col.column,\r\n//           resizable: true,\r\n//           nullable: col.nullable,\r\n//           editor: col.editable ? TextEditor : undefined\r\n//         }));\r\n\r\n//         this.setState({\r\n//           columns: columns,\r\n//           loading: false,\r\n//           indexOfSelectedRow: rows.length,\r\n//         })\r\n\r\n//       }.bind(this),\r\n//       function (data) {\r\n//         console.log(data)\r\n//         this.setState({loading: false, dataLoadingError: true })\r\n//       }.bind(this));\r\n//   }\r\n\r\n//   render() {\r\n//     if (this.state.loading) {\r\n//       return (<CircularProgress />)\r\n//     }\r\n//     if (this.state.dataLoadingError) {\r\n//       window.location.reload(false)\r\n//     }\r\n//     return (\r\n//       <div>\r\n//         {this.state.alert &&\r\n//           <CollapsableAlert\r\n//             severity={this.state.alert.severity}\r\n//             message={this.state.alert.message}\r\n//             onClose={() => this.setState({ alert: null })}\r\n//           />}\r\n//         <ContentWithContextMenu\r\n//           content={\r\n//             <DataGrid\r\n//               columns={this.state.columns}\r\n//               rows={this.tableManager.getRowSet()}\r\n//               rowGetter={i => this.tableManager.getRow[i]}\r\n//               onRowsChange={this.update}\r\n//               enableCellSelect={true}\r\n//               style={{ 'height': \"70vh\", overflowX: 'hidden' }}\r\n//               className=\"fill-grid\"\r\n//               minHeight=\"1000\"\r\n//               onSelectedCellChange={this.handleCellChange}\r\n//             />\r\n//           }\r\n//           menuItems={Object.keys(this.contextMenuItems)}\r\n//           action={(a) => this.contextMenuItems[a]()}\r\n//         />\r\n//         <BottomNavigation showLabels style={{ backgroundColor: grey[50], borderWidth: 0.5, borderStyle: \"solid\", borderColor: grey[300] }}>\r\n//           {this.state.unsavedRowsIndices.length > 0 &&\r\n//             <BottomNavigationAction\r\n//               label=\"Unsaved rows\"\r\n//               icon={<SyncIcon style={{ color: yellow[500] }} />}\r\n//             />\r\n//           }\r\n\r\n//           <BottomNavigationAction label={\"Rows: \" + this.state.rows.length} icon={<StorageIcon />} />\r\n//           <BottomNavigationAction label={\"Columns: \" + this.state.columns.length} icon={<StorageIcon />} />\r\n//         </BottomNavigation>\r\n//       </div >\r\n//     );\r\n//   }\r\n\r\n//   contextMenuItems = {\r\n//     \"Insert\": () => { this.insertRow(this.) },\r\n//     \"Delete\": () => { this.deleteRow() },\r\n//     \"Save\": () => { this.save(true) },\r\n//     \"Reload\": () => { this.loadTableData() }\r\n//   }\r\n\r\n//   handleCellChange = (c) => {\r\n//     if (c.rowIdx != this.state.indexOfSelectedRow && this.state.unsavedRowsIndices.includes(this.state.indexOfSelectedRow)) {\r\n//       this.save(false)\r\n//     }\r\n//     this.state.indexOfSelectedRow = c.rowIdx\r\n//   }\r\n\r\n//   update = (rows, index) => {\r\n//     var indexOfUpdatedRow = index.indexes[0];\r\n//     var updatedRow = rows[indexOfUpdatedRow];\r\n//     this.tableManager.update(updatedRow, index)\r\n//   }\r\n// }\r\n\r\nexport default SavageTable"]},"metadata":{},"sourceType":"module"}