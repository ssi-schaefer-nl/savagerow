{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\savagerow\\\\front-end\\\\src\\\\Components\\\\DatabaseSelect\\\\DatabaseSelect.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { CircularProgress, Divider } from \"@material-ui/core\";\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport CollapsableAlert from \"../CollapsableAlert/CollapsableAlert\";\nimport ConfigureService from \"../../Service/ConfigureService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  DatabaseContext\n} = /*#__PURE__*/React.createContext();\nexport default function DatabaseSelect(props) {\n  _s();\n\n  const configureService = new ConfigureService();\n  const onSelect = props.onSelect;\n  const [databases, setDatabases] = useState([]);\n  const [database, setDatabase] = useState(undefined);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [loadingAvailableDatabases, setLoadingAvailableDatabases] = useState(true);\n  const [initialValue, setInitialValue] = useState(null);\n  const [loadingError, setLoadingError] = useState(false);\n  useEffect(() => {\n    setInitialValue(props.initialValue);\n    configureService.listAllDatabases(function (data) {\n      setDatabases(data.data);\n      setLoadingAvailableDatabases(false);\n    }, function (data) {\n      setLoadingAvailableDatabases(false);\n      setLoadingError(true);\n    });\n  }, []);\n\n  const handleChange = e => {\n    var db = e.target.value;\n    configureService.changeDatabases(db, () => {\n      setDatabase(db);\n      if (onSelect) onSelect();\n    }, undefined);\n  };\n\n  if (loadingAvailableDatabases) {\n    return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this);\n  } else if (loadingError) {\n    return /*#__PURE__*/_jsxDEV(CollapsableAlert, {\n      severity: \"warning\",\n      message: \"Unable to fetch available databases. Check database connection.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this);\n  }\n\n  var val = database ? database : initialValue ? initialValue : \"\";\n  return /*#__PURE__*/_jsxDEV(DatabaseContext.Provider, {\n    value: val,\n    children: /*#__PURE__*/_jsxDEV(FormControl, {\n      style: {\n        margin: 1,\n        minWidth: 120\n      },\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        htmlFor: \"demo-customized-select-native\",\n        children: \"Database\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NativeSelect, {\n        labelId: \"demo-simple-select-label\",\n        id: \"demo-simple-select\",\n        value: val,\n        onChange: handleChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          \"aria-label\": \"None\",\n          value: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), databases.map(d => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: d,\n          children: d\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DatabaseSelect, \"1V2vYywNVx3pdkvmeOd4QBTSALo=\");\n\n_c = DatabaseSelect;\n\nclass DatabaseSelectOld extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      configureService: new ConfigureService(),\n      databases: [],\n      anchorEl: null,\n      loadingAvailableDatabases: true,\n      onSelect: this.props.onSelect\n    };\n\n    this.handleChange = e => {\n      var database = e.target.value;\n      this.state.configureService.changeDatabases(database, function (data) {\n        this.setState({\n          database: database\n        });\n        if (this.state.onSelect) this.state.onSelect();\n      }.bind(this), function (data) {\n        console.log(\"did not change db\");\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      value: this.props.initialValue\n    });\n    this.state.configureService.listAllDatabases(function (data) {\n      this.setState({\n        databases: data.data\n      });\n      this.setState({\n        loadingAvailableDatabases: false\n      });\n    }.bind(this), function (data) {\n      console.log(data);\n      this.setState({\n        loadingAvailableDatabases: false,\n        loadingError: true\n      });\n    }.bind(this));\n  }\n\n  render() {\n    if (this.state.loadingAvailableDatabases) {\n      return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this);\n    } else if (this.state.loadingError) {\n      return /*#__PURE__*/_jsxDEV(CollapsableAlert, {\n        severity: \"warning\",\n        message: \"Unable to fetch available databases. Check database connection.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }, this);\n    }\n\n    var val = this.state.database ? this.state.database : this.props.initialValue ? this.props.initialValue : \"\";\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        style: {\n          margin: 1,\n          minWidth: 120\n        },\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          htmlFor: \"demo-customized-select-native\",\n          children: \"Database\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(NativeSelect, {\n          labelId: \"demo-simple-select-label\",\n          id: \"demo-simple-select\",\n          value: val,\n          onChange: this.handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            \"aria-label\": \"None\",\n            value: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this), this.state.databases.map(d => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: d,\n            children: d\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n} // export default DatabaseSelect\n\n\nvar _c;\n\n$RefreshReg$(_c, \"DatabaseSelect\");","map":{"version":3,"sources":["C:/Users/vincent/git/savagerow/front-end/src/Components/DatabaseSelect/DatabaseSelect.js"],"names":["React","Component","useEffect","useState","Typography","InputLabel","MenuItem","FormControl","Select","CircularProgress","Divider","NativeSelect","CollapsableAlert","ConfigureService","DatabaseContext","createContext","DatabaseSelect","props","configureService","onSelect","databases","setDatabases","database","setDatabase","undefined","anchorEl","setAnchorEl","loadingAvailableDatabases","setLoadingAvailableDatabases","initialValue","setInitialValue","loadingError","setLoadingError","listAllDatabases","data","handleChange","e","db","target","value","changeDatabases","val","margin","minWidth","map","d","DatabaseSelectOld","state","setState","bind","console","log","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { CircularProgress, Divider } from \"@material-ui/core\";\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CollapsableAlert from \"../CollapsableAlert/CollapsableAlert\";\r\nimport ConfigureService from \"../../Service/ConfigureService\";\r\n\r\nconst { DatabaseContext } = React.createContext()\r\n\r\n\r\nexport default function DatabaseSelect(props) {\r\n    const configureService = new ConfigureService()\r\n    const onSelect = props.onSelect\r\n    const [databases, setDatabases] = useState([])\r\n    const [database, setDatabase] = useState(undefined)\r\n    const [anchorEl, setAnchorEl] = useState(null)\r\n    const [loadingAvailableDatabases, setLoadingAvailableDatabases] = useState(true)\r\n    const [initialValue, setInitialValue] = useState(null)\r\n    const [loadingError, setLoadingError] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setInitialValue(props.initialValue)\r\n\r\n        configureService.listAllDatabases(\r\n            function (data) {\r\n                setDatabases(data.data)\r\n                setLoadingAvailableDatabases(false)\r\n            },\r\n            function (data) {\r\n                setLoadingAvailableDatabases(false)\r\n                setLoadingError(true)\r\n            });\r\n    }, [])\r\n\r\n    const handleChange = (e) => {\r\n        var db = e.target.value\r\n        configureService.changeDatabases(\r\n            db,\r\n            () => {\r\n                setDatabase(db)\r\n                if (onSelect) onSelect()\r\n            },\r\n            undefined\r\n        );\r\n    }\r\n\r\n    if (loadingAvailableDatabases) {\r\n        return (<CircularProgress />)\r\n    } else if (loadingError) {\r\n        return (<CollapsableAlert severity=\"warning\" message=\"Unable to fetch available databases. Check database connection.\" />)\r\n    }\r\n\r\n    var val = database ? database : initialValue ? initialValue : \"\"\r\n    return (\r\n        <DatabaseContext.Provider value={val}>\r\n\r\n            <FormControl style={{ margin: 1, minWidth: 120 }}>\r\n                <InputLabel htmlFor=\"demo-customized-select-native\">Database</InputLabel>\r\n                <NativeSelect\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    value={val}\r\n                    onChange={handleChange}\r\n                >\r\n                    <option aria-label=\"None\" value=\"\" />\r\n\r\n                    {databases.map(d => (\r\n                        <option value={d}>{d}</option>\r\n                    ))}\r\n\r\n                </NativeSelect>\r\n            </FormControl>\r\n        </DatabaseContext.Provider>\r\n    )\r\n\r\n}\r\n\r\n\r\nclass DatabaseSelectOld extends React.Component {\r\n    state = {\r\n        configureService: new ConfigureService(),\r\n        databases: [],\r\n        anchorEl: null,\r\n        loadingAvailableDatabases: true,\r\n        onSelect: this.props.onSelect\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({ value: this.props.initialValue })\r\n        this.state.configureService.listAllDatabases(\r\n            function (data) {\r\n                this.setState({ databases: data.data })\r\n                this.setState({ loadingAvailableDatabases: false })\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n                this.setState({ loadingAvailableDatabases: false, loadingError: true })\r\n            }.bind(this));\r\n\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        var database = e.target.value\r\n        this.state.configureService.changeDatabases(\r\n            database,\r\n            function (data) {\r\n                this.setState({ database: database })\r\n                if (this.state.onSelect) this.state.onSelect()\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(\"did not change db\")\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.loadingAvailableDatabases) {\r\n            return (<CircularProgress />)\r\n        } else if (this.state.loadingError) {\r\n            return (<CollapsableAlert severity=\"warning\" message=\"Unable to fetch available databases. Check database connection.\" />)\r\n        }\r\n\r\n        var val = this.state.database ? this.state.database : this.props.initialValue ? this.props.initialValue : \"\"\r\n        return (\r\n            <>\r\n                <FormControl style={{ margin: 1, minWidth: 120 }}>\r\n                    <InputLabel htmlFor=\"demo-customized-select-native\">Database</InputLabel>\r\n                    <NativeSelect\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"demo-simple-select\"\r\n                        value={val}\r\n                        onChange={this.handleChange}\r\n                    >\r\n                        <option aria-label=\"None\" value=\"\" />\r\n\r\n                        {this.state.databases.map(d => (\r\n                            <option value={d}>{d}</option>\r\n                        ))}\r\n\r\n                    </NativeSelect>\r\n                </FormControl>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n// export default DatabaseSelect"]},"metadata":{},"sourceType":"module"}