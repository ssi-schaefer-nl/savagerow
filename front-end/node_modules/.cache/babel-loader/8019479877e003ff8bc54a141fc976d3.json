{"ast":null,"code":"import { __extends } from \"tslib\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { DragSource, DropTarget } from 'react-dnd';\n\nvar DraggableHeaderCell =\n/** @class */\nfunction (_super) {\n  __extends(DraggableHeaderCell, _super);\n\n  function DraggableHeaderCell() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DraggableHeaderCell.prototype.render = function () {\n    var _a = this.props,\n        connectDragSource = _a.connectDragSource,\n        connectDropTarget = _a.connectDropTarget,\n        isDragging = _a.isDragging,\n        isOver = _a.isOver,\n        canDrop = _a.canDrop; // set drag source and drop target on header cell\n    // width: 0 - otherwise drag clone was wrongly positioned\n\n    return connectDragSource(connectDropTarget(React.createElement(\"div\", {\n      className: classNames('rdg-draggable-header-cell', {\n        'rdg-can-drop': isOver && canDrop\n      }),\n      style: {\n        opacity: isDragging ? 0.2 : 1\n      }\n    }, this.props.children)));\n  };\n\n  DraggableHeaderCell.propTypes = {\n    connectDragSource: PropTypes.func.isRequired,\n    connectDropTarget: PropTypes.func.isRequired,\n    isDragging: PropTypes.bool.isRequired,\n    isOver: PropTypes.bool,\n    canDrop: PropTypes.bool,\n    children: PropTypes.element.isRequired\n  };\n  return DraggableHeaderCell;\n}(React.Component); // drop source\n\n\nfunction collect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n}\n\nvar headerCellSource = {\n  beginDrag: function (props) {\n    return {\n      // source column\n      key: props.column.key\n    };\n  },\n  endDrag: function (props, monitor) {\n    // check if drop was made in droppable zone\n    if (monitor.didDrop()) {\n      var _a = monitor.getDropResult(),\n          source = _a.source,\n          target_1 = _a.target;\n\n      return props.onHeaderDrop(source, target_1);\n    }\n  }\n}; // drop target\n\nvar target = {\n  drop: function (props, monitor) {\n    var source = monitor.getItem().key;\n    var targetKey = props.column.key;\n    return {\n      source: source,\n      target: targetKey\n    };\n  }\n};\n\nfunction targetCollect(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n    canDrop: monitor.canDrop(),\n    draggedHeader: monitor.getItem()\n  };\n}\n\nexport default DragSource('Column', headerCellSource, collect)(DropTarget('Column', target, targetCollect)(DraggableHeaderCell));","map":{"version":3,"sources":["../../src/draggable-header/DraggableHeaderCell.js"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { DragSource, DropTarget } from 'react-dnd';\n\nclass DraggableHeaderCell extends React.Component {\n  static propTypes = {\n    connectDragSource: PropTypes.func.isRequired,\n    connectDropTarget: PropTypes.func.isRequired,\n    isDragging: PropTypes.bool.isRequired,\n    isOver: PropTypes.bool,\n    canDrop: PropTypes.bool,\n    children: PropTypes.element.isRequired\n  };\n\n  render() {\n    const {\n      connectDragSource,\n      connectDropTarget,\n      isDragging,\n      isOver,\n      canDrop\n    } = this.props;\n\n    // set drag source and drop target on header cell\n    // width: 0 - otherwise drag clone was wrongly positioned\n    return connectDragSource(\n      connectDropTarget(\n        <div\n          className={classNames('rdg-draggable-header-cell', { 'rdg-can-drop': isOver && canDrop })}\n          style={{ opacity: isDragging ? 0.2 : 1 }}\n        >\n          {this.props.children}\n        </div>\n      )\n    );\n  }\n}\n\n// drop source\nfunction collect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n}\n\nconst headerCellSource = {\n  beginDrag(props) {\n    return {\n      // source column\n      key: props.column.key\n    };\n  },\n  endDrag(props, monitor) {\n    // check if drop was made in droppable zone\n    if (monitor.didDrop()) {\n      const { source, target } = monitor.getDropResult();\n      return props.onHeaderDrop(source, target);\n    }\n  }\n};\n\n// drop target\nconst target = {\n  drop(props, monitor) {\n    const source = monitor.getItem().key;\n    const targetKey = props.column.key;\n    return {\n      source,\n      target: targetKey\n    };\n  }\n};\n\nfunction targetCollect(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n    canDrop: monitor.canDrop(),\n    draggedHeader: monitor.getItem()\n  };\n}\n\nexport default DragSource('Column', headerCellSource, collect)(\n  DropTarget('Column', target, targetCollect)(\n    DraggableHeaderCell\n  )\n);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}