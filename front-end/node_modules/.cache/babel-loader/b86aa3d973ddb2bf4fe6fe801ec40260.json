{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\savagerow\\\\front-end\\\\src\\\\Components\\\\Table\\\\Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport TableService from '../../Service/TableService';\nimport ContextMenu from '../ContextMenu/ContextMenu';\nimport DataGridControlBar from './DataGridControlBar';\nimport DataGridTable from './DataGridTable';\nimport NotificationArea from './NotificationArea';\nimport TableManager from './TableManager';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst createNotification = (content, severity) => {\n  return {\n    content: content,\n    severity: severity\n  };\n};\n\nconst SavageTable = props => {\n  _s();\n\n  const tableManager = new TableManager(props.table);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [rows, setRows] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n\n  const addNotification = notification => {\n    setNotifications(notifications => [...notifications, notification]);\n  };\n\n  const loadTableRows = () => {\n    tableManager.getRowSet(data => setRows(data.data.rows), () => addNotification(createNotification(\"Unable to fetch table rows\", \"error\")));\n  };\n\n  useEffect(() => {\n    loadTableRows();\n    tableManager.getSchema(data => setColumns(data.data.columns), () => addNotification(createNotification(\"Unable to fetch table schema\", \"error\")));\n  }, []);\n  const contextMenuActions = {\n    \"Insert\": () => setRows(tableManager.addRow(rows, selectedRow)),\n    \"Delete\": () => tableManager.delete(rows, selectedRow, rows => setRows(rows), e => addNotification(createNotification(\"Unable to delete row: \" + e, \"warning\"))),\n    \"Save\": () => tableManager.save(rows, selectedRow, rows => setRows(rows), e => addNotification(createNotification(\"Unable to save data: \" + e, \"warning\"))),\n    \"Reload\": loadTableRows\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NotificationArea, {\n      notifications: notifications,\n      handleClose: index => setNotifications(curr => curr.filter((notifications, i) => i !== index))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContextMenu, {\n      menuItems: Object.keys(contextMenuActions),\n      onItemClick: a => contextMenuActions[a](),\n      children: /*#__PURE__*/_jsxDEV(DataGridTable, {\n        rows: rows,\n        columns: columns,\n        onRowChange: (newRow, index) => tableManager.update(rows, newRow, index, rows => setRows(rows), e => addNotification(createNotification(\"Unable to update row: \" + e, \"warning\"))),\n        onRowSelect: setSelectedRow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataGridControlBar, {\n      rowCount: rows.length,\n      columnCount: columns.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SavageTable, \"59Ek9srhyztE7Rjy1bqatNdjaUE=\");\n\n_c = SavageTable;\nexport default SavageTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"SavageTable\");","map":{"version":3,"sources":["C:/Users/vincent/git/savagerow/front-end/src/Components/Table/Table.js"],"names":["React","Component","useEffect","useState","TableService","ContextMenu","DataGridControlBar","DataGridTable","NotificationArea","TableManager","createNotification","content","severity","SavageTable","props","tableManager","table","selectedRow","setSelectedRow","rows","setRows","columns","setColumns","notifications","setNotifications","addNotification","notification","loadTableRows","getRowSet","data","getSchema","contextMenuActions","addRow","delete","e","save","index","curr","filter","i","Object","keys","a","newRow","update","length"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\nimport TableService from '../../Service/TableService';\r\nimport ContextMenu from '../ContextMenu/ContextMenu';\r\nimport DataGridControlBar from './DataGridControlBar';\r\nimport DataGridTable from './DataGridTable';\r\nimport NotificationArea from './NotificationArea';\r\nimport TableManager from './TableManager';\r\n\r\n\r\n\r\nconst createNotification = (content, severity) => {\r\n  return {\r\n    content: content,\r\n    severity: severity,\r\n  }\r\n}\r\n\r\nconst SavageTable = (props) => {\r\n  const tableManager = new TableManager(props.table)\r\n  const [selectedRow, setSelectedRow] = useState(null)\r\n  const [rows, setRows] = useState([])\r\n  const [columns, setColumns] = useState([])\r\n  const [notifications, setNotifications] = useState([])\r\n\r\n  const addNotification = (notification) => {\r\n    setNotifications(notifications => [...notifications, notification])\r\n  }\r\n  \r\n  const loadTableRows = () => {\r\n    tableManager.getRowSet(data => setRows(data.data.rows), () => addNotification(createNotification(\"Unable to fetch table rows\", \"error\")))\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadTableRows()\r\n    tableManager.getSchema(data => setColumns(data.data.columns), () => addNotification(createNotification(\"Unable to fetch table schema\", \"error\")))\r\n  }, [])\r\n\r\n\r\n  const contextMenuActions = {\r\n    \"Insert\": () => setRows(tableManager.addRow(rows, selectedRow)),\r\n    \"Delete\": () => tableManager.delete(rows, selectedRow, (rows) => setRows(rows), (e) => addNotification(createNotification(\"Unable to delete row: \" + e, \"warning\"))),\r\n    \"Save\": () => tableManager.save(rows, selectedRow, (rows) => setRows(rows), (e) => addNotification(createNotification(\"Unable to save data: \" + e, \"warning\"))),\r\n    \"Reload\": loadTableRows\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <NotificationArea\r\n        notifications={notifications}\r\n        handleClose={(index) => setNotifications(curr => curr.filter((notifications, i) => i !== index))}\r\n      />\r\n\r\n      <ContextMenu\r\n        menuItems={Object.keys(contextMenuActions)}\r\n        onItemClick={(a) => contextMenuActions[a]()}\r\n      >\r\n\r\n        <DataGridTable\r\n          rows={rows}\r\n          columns={columns}\r\n          onRowChange={(newRow, index) => \r\n            tableManager.update(rows, newRow, index, (rows) => setRows(rows), (e) => addNotification(createNotification(\"Unable to update row: \" + e, \"warning\")))\r\n          }\r\n          onRowSelect={setSelectedRow}\r\n        />\r\n\r\n      </ContextMenu>\r\n\r\n      <DataGridControlBar\r\n        rowCount={rows.length}\r\n        columnCount={columns.length}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default SavageTable"]},"metadata":{},"sourceType":"module"}