{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\playground\\\\src\\\\Components\\\\Tables\\\\SavageTable.js\";\nimport React from \"react\";\nimport ReactDataGrid, { TextEditor } from \"react-data-grid\";\nimport \"./styles.css\";\nimport TableDataService from '../../Service/TableDataServices';\nimport { CircularProgress } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Example extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rows: [],\n      loading: true,\n      tableDataService: new TableDataService(),\n      columns: []\n    };\n\n    this.onGridRowsUpdated = ({\n      fromRow,\n      toRow,\n      updated\n    }) => {\n      console.log(\"DsadasdW \");\n      this.setState(state => {\n        const rows = state.rows.slice();\n\n        for (let i = fromRow; i <= toRow; i++) {\n          rows[i] = { ...rows[i],\n            ...updated\n          };\n        }\n\n        return {\n          rows\n        };\n      });\n    };\n\n    this.rowsChanged = (rows, index) => {\n      var rowIdx = index.indexes[0];\n      var oldRow = this.state.rows[rowIdx];\n      var changedRow = rows[rowIdx];\n\n      if (rowIdx == 0) {\n        this.addRow(changedRow, rowIdx);\n      } else {\n        this.updateRow(oldRow, changedRow, rowIdx);\n      }\n    };\n\n    this.addRow = (newRow, index) => {\n      console.log(\"Adding row! \" + newRow);\n      var data = {\n        newRow\n      };\n      this.state.tableDataService.addTableData(this.props.table, data, function (data) {\n        var rows = this.state.rows;\n        rows.push(newRow);\n        this.setState({\n          rows: rows\n        });\n      }.bind(this), function (data) {\n        console.log(data);\n      }.bind(this));\n    };\n\n    this.updateRow = (oldRow, newRow, index) => {\n      var data = [{\n        oldRow: oldRow,\n        newRow: newRow\n      }];\n      this.state.tableDataService.updateTableData(this.props.table, data, function (data) {\n        var rows = this.state.rows;\n        rows[index] = newRow;\n        this.setState({\n          rows: rows\n        });\n      }.bind(this), function (data) {\n        console.log(data);\n      }.bind(this));\n    };\n  }\n\n  componentDidMount() {\n    this.state.tableDataService.getTableData(this.props.table, function (data) {\n      this.setState({\n        columns: this.createColumns(data.data[0])\n      });\n      this.setState({\n        rows: this.createRows(data.data)\n      });\n      this.setState({\n        loading: false\n      });\n    }.bind(this), function (data) {\n      console.log(data);\n      this.setState({\n        loading: false\n      });\n    }.bind(this));\n  }\n\n  createColumns(row) {\n    return Object.keys(row).map(header => ({\n      key: header,\n      name: header,\n      editor: TextEditor,\n      resizable: true\n    }));\n  }\n\n  createRows(data) {\n    var emptyRow = {};\n    Object.keys(data[0]).forEach(key => {\n      emptyRow[key] = \"\";\n    });\n    console.log(emptyRow);\n    data.unshift(emptyRow);\n    return data;\n  }\n\n  render() {\n    if (this.state.loading) {\n      return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(ReactDataGrid, {\n      columns: this.state.columns,\n      rows: this.state.rows,\n      rowGetter: i => this.state.rows[i],\n      onGridRowsUpdated: this.onGridRowsUpdated,\n      onRowsChange: this.rowsChanged,\n      enableCellSelect: false,\n      style: {\n        resize: 'both',\n        'height': \"70vh\",\n        maxWidth: \"100%\"\n      },\n      className: \"fill-grid\",\n      minHeight: \"1000\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Example;","map":{"version":3,"sources":["C:/Users/vincent/git/playground/src/Components/Tables/SavageTable.js"],"names":["React","ReactDataGrid","TextEditor","TableDataService","CircularProgress","Example","Component","state","rows","loading","tableDataService","columns","onGridRowsUpdated","fromRow","toRow","updated","console","log","setState","slice","i","rowsChanged","index","rowIdx","indexes","oldRow","changedRow","addRow","updateRow","newRow","data","addTableData","props","table","push","bind","updateTableData","componentDidMount","getTableData","createColumns","createRows","row","Object","keys","map","header","key","name","editor","resizable","emptyRow","forEach","unshift","render","resize","maxWidth"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport ReactDataGrid, { TextEditor } from \"react-data-grid\";\r\nimport \"./styles.css\";\r\nimport TableDataService from '../../Service/TableDataServices';\r\nimport { CircularProgress } from \"@material-ui/core\";\r\n\r\n\r\nclass Example extends React.Component {\r\n    componentDidMount() {\r\n        this.state.tableDataService.getTableData(this.props.table,\r\n            function (data) {\r\n                this.setState({ columns: this.createColumns(data.data[0]) })\r\n                this.setState({ rows: this.createRows(data.data) })\r\n                this.setState({ loading: false })\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n                this.setState({ loading: false })\r\n            }.bind(this));\r\n\r\n    }\r\n\r\n    createColumns(row) {\r\n        return Object.keys(row).map(header => (\r\n            {\r\n                key: header,\r\n                name: header,\r\n                editor: TextEditor,\r\n                resizable: true\r\n            }));\r\n    }\r\n\r\n    createRows(data) {\r\n        var emptyRow = {}\r\n        Object.keys(data[0]).forEach(key => {emptyRow[key] = \"\"})\r\n        console.log(emptyRow)\r\n        data.unshift(emptyRow)\r\n        return data\r\n    }\r\n\r\n    state = {\r\n        rows: [],\r\n        loading: true,\r\n        tableDataService: new TableDataService(),\r\n        columns: []\r\n    };\r\n\r\n\r\n    onGridRowsUpdated = ({ fromRow, toRow, updated }) => {\r\n        console.log(\"DsadasdW \")\r\n        this.setState(state => {\r\n            const rows = state.rows.slice();\r\n            for (let i = fromRow; i <= toRow; i++) {\r\n                rows[i] = { ...rows[i], ...updated };\r\n            }\r\n            return { rows };\r\n        });\r\n    };\r\n\r\n    rowsChanged = (rows, index) => {\r\n        var rowIdx = index.indexes[0];\r\n        var oldRow = this.state.rows[rowIdx];\r\n        var changedRow = rows[rowIdx];\r\n\r\n\r\n        if(rowIdx == 0) {\r\n            this.addRow(changedRow, rowIdx)\r\n        } else {\r\n            this.updateRow(oldRow, changedRow, rowIdx)\r\n        }\r\n    }\r\n\r\n    addRow = (newRow, index) => {\r\n        console.log(\"Adding row! \" + newRow)\r\n        var data = { newRow }\r\n        this.state.tableDataService.addTableData(this.props.table, data,\r\n            function(data) {\r\n                var rows = this.state.rows;\r\n                rows.push(newRow)\r\n                this.setState({rows: rows})\r\n            }.bind(this),\r\n            function(data) {\r\n                console.log(data)\r\n            }.bind(this));\r\n\r\n    }\r\n\r\n    updateRow = (oldRow, newRow, index) => {\r\n        var data = [\r\n            {\r\n                oldRow: oldRow,\r\n                newRow: newRow\r\n            },\r\n        ]\r\n\r\n        this.state.tableDataService.updateTableData(this.props.table, data,\r\n            function(data) {\r\n                var rows = this.state.rows;\r\n                rows[index] = newRow;\r\n                this.setState({rows: rows})\r\n            }.bind(this),\r\n            function(data) {\r\n                console.log(data)\r\n            }.bind(this));\r\n\r\n    }\r\n\r\n    render() {\r\n        if (this.state.loading) {\r\n            return (<CircularProgress />)\r\n        }\r\n\r\n        return (\r\n            <ReactDataGrid\r\n                columns={this.state.columns}\r\n                rows={this.state.rows}\r\n                rowGetter={i => this.state.rows[i]}\r\n                onGridRowsUpdated={this.onGridRowsUpdated}\r\n                onRowsChange={this.rowsChanged}\r\n                enableCellSelect={false}\r\n                style={{ resize: 'both', 'height': \"70vh\", maxWidth: \"100%\" }}\r\n                className=\"fill-grid\"\r\n                minHeight=\"1000\"\r\n\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example;"]},"metadata":{},"sourceType":"module"}