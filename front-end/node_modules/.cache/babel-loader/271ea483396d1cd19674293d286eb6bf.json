{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\playground\\\\src\\\\Components\\\\Tables\\\\SavageTable.js\";\nimport React from \"react\";\nimport ReactDataGrid, { TextEditor } from \"react-data-grid\";\nimport \"./styles.css\";\nimport TableDataService from '../../Service/TableDataServices';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Example extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rows: this.props.rows,\n      loading: true,\n      tableDataService: new TableDataService(),\n      columns: this.createColumns(this.props.columns)\n    };\n\n    this.onGridRowsUpdated = ({\n      fromRow,\n      toRow,\n      updated\n    }) => {\n      this.setState(state => {\n        const rows = state.rows.slice();\n\n        for (let i = fromRow; i <= toRow; i++) {\n          rows[i] = { ...rows[i],\n            ...updated\n          };\n        }\n\n        return {\n          rows\n        };\n      });\n    };\n\n    this.rowsChanged = (rows, index) => {\n      var rowIdx = index.indexes[0];\n      var changedRow = this.getChanges(this.state.rows, rows);\n      this.state.rows[rowIdx] = changedRow[0];\n      this.tableDataService.updateTableData();\n    };\n\n    this.getChanges = (originalArray, newArray) => newArray.filter((newRow, index) => originalArray[index] !== newRow);\n  }\n\n  createHeaders(row) {\n    return Object.keys(row).map(header => ({\n      key: header,\n      name: header\n    }));\n  }\n\n  createData(rows) {\n    return rows.map((row, index) => {\n      // row.key = index;\n      return row;\n    });\n  }\n\n  componentDidMount() {\n    this.state.tableDataService.getTableData(this.props.table, function (data) {\n      this.setState({\n        headers: this.createHeaders(data.data[0])\n      });\n      this.setState({\n        data: this.createData(data.data)\n      });\n      this.setState({\n        loading: false\n      });\n    }.bind(this), function (data) {\n      console.log(data);\n      this.setState({\n        loading: false\n      });\n    }.bind(this));\n  }\n\n  createColumns(columns) {\n    return columns.map(column => {\n      column.editor = TextEditor;\n      column.resizable = true;\n      return column;\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(ReactDataGrid, {\n      columns: this.state.columns,\n      rows: this.state.rows,\n      rowGetter: i => this.state.rows[i],\n      onGridRowsUpdated: this.onGridRowsUpdated,\n      onRowsChange: this.rowsChanged,\n      enableCellSelect: false,\n      style: {\n        resize: 'both',\n        'height': \"70vh\",\n        maxWidth: \"100%\"\n      },\n      className: \"fill-grid\",\n      minHeight: \"1000\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Example;","map":{"version":3,"sources":["C:/Users/vincent/git/playground/src/Components/Tables/SavageTable.js"],"names":["React","ReactDataGrid","TextEditor","TableDataService","Example","Component","state","rows","props","loading","tableDataService","columns","createColumns","onGridRowsUpdated","fromRow","toRow","updated","setState","slice","i","rowsChanged","index","rowIdx","indexes","changedRow","getChanges","updateTableData","originalArray","newArray","filter","newRow","createHeaders","row","Object","keys","map","header","key","name","createData","componentDidMount","getTableData","table","data","headers","bind","console","log","column","editor","resizable","render","resize","maxWidth"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport ReactDataGrid, { TextEditor } from \"react-data-grid\";\r\nimport \"./styles.css\";\r\nimport TableDataService from '../../Service/TableDataServices';\r\n\r\n\r\nclass Example extends React.Component {\r\n    state = {\r\n        rows: this.props.rows,\r\n        loading: true,\r\n        tableDataService: new TableDataService(),\r\n        columns: this.createColumns(this.props.columns)\r\n    };\r\n\r\n    createHeaders(row) {\r\n        return Object.keys(row).map(header => (\r\n            {\r\n                key: header,\r\n                name: header,\r\n            }));\r\n    }\r\n\r\n    createData(rows) {\r\n        return rows.map((row, index) => {\r\n            // row.key = index;\r\n            return row;\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.state.tableDataService.getTableData(this.props.table,\r\n            function (data) {\r\n                this.setState({ headers: this.createHeaders(data.data[0]) })\r\n                this.setState({ data: this.createData(data.data) })\r\n                this.setState({ loading: false })\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n                this.setState({ loading: false })\r\n            }.bind(this));\r\n\r\n    }\r\n\r\n    createColumns(columns) {\r\n        return columns.map((column) => {\r\n            column.editor = TextEditor;\r\n            column.resizable = true;\r\n            return column;\r\n        })\r\n    }\r\n\r\n    onGridRowsUpdated = ({ fromRow, toRow, updated }) => {\r\n        this.setState(state => {\r\n            const rows = state.rows.slice();\r\n            for (let i = fromRow; i <= toRow; i++) {\r\n                rows[i] = { ...rows[i], ...updated };\r\n            }\r\n            return { rows };\r\n        });\r\n    };\r\n\r\n    rowsChanged = (rows, index) => {\r\n        var rowIdx = index.indexes[0];\r\n        var changedRow = this.getChanges(this.state.rows, rows);\r\n        this.state.rows[rowIdx] = changedRow[0];\r\n        this.tableDataService.updateTableData()\r\n\r\n    }\r\n\r\n    getChanges = (originalArray, newArray) => newArray.filter((newRow, index) => originalArray[index] !== newRow);\r\n\r\n    render() {\r\n        return (\r\n            <ReactDataGrid\r\n                columns={this.state.columns}\r\n                rows={this.state.rows}\r\n                rowGetter={i => this.state.rows[i]}\r\n                onGridRowsUpdated={this.onGridRowsUpdated}\r\n                onRowsChange={this.rowsChanged}\r\n                enableCellSelect={false}\r\n                style={{ resize: 'both', 'height': \"70vh\", maxWidth: \"100%\" }}\r\n                className=\"fill-grid\"\r\n                minHeight=\"1000\"\r\n\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example;"]},"metadata":{},"sourceType":"module"}