{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\playground\\\\src\\\\Components\\\\Table\\\\Table.js\";\nimport React, { Component } from 'react';\nimport DataGrid, { TextEditor } from \"react-data-grid\";\nimport TableDataService from '../../Service/TableDataServices';\nimport { CircularProgress, Typography } from '@material-ui/core';\nimport CollapsableAlert from '../CollapsableAlert/CollapsableAlert';\nimport ContentWithContextMenu from '../ContentWithContextMenu/ContentWithContextMenu';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport { green, grey, yellow } from '@material-ui/core/colors';\nimport SyncIcon from '@material-ui/icons/Sync';\nimport StorageIcon from '@material-ui/icons/Storage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SavageTable extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tableDataService: new TableDataService(),\n      alert: null,\n      columns: [],\n      rows: [],\n      unsavedRowsIndices: [],\n      // Rows that are inserted to the table but not yet saved to the database\n      dataLoadingError: false,\n      loading: true\n    };\n\n    this.loadTableData = () => {\n      this.state.tableDataService.getTableData(this.props.table, function (data) {\n        var rows = data.data.data;\n        var columns = data.data.tableSchema.columns.map(col => ({\n          key: col.column,\n          name: col.column,\n          resizable: true,\n          nullable: col.nullable,\n          editor: col.editable ? TextEditor : undefined\n        }));\n        this.setState({\n          columns: columns,\n          rows: rows,\n          loading: false,\n          indexOfSelectedRow: rows.length,\n          unsavedRowsIndices: []\n        });\n      }.bind(this), function (data) {\n        console.log(data);\n        this.setState({\n          loading: false,\n          dataLoadingError: true\n        });\n      }.bind(this));\n    };\n\n    this.contextMenuItems = {\n      \"Insert\": () => {\n        this.insertRow();\n      },\n      \"Delete\": () => {\n        this.deleteRow();\n      },\n      \"Save\": () => {\n        this.save(true);\n      },\n      \"Reload\": () => {\n        this.loadTableData();\n      }\n    };\n\n    this.handleCellChange = c => {\n      if (c.rowIdx != this.state.indexOfSelectedRow && this.state.unsavedRowsIndices.includes(this.state.indexOfSelectedRow)) {\n        this.save(false);\n      }\n\n      this.state.indexOfSelectedRow = c.rowIdx;\n    };\n\n    this.insertRow = () => {\n      var insertRowBeforeIndex = this.state.indexOfSelectedRow;\n      var newRow = {};\n      this.state.columns.forEach(col => {\n        newRow[col.key] = \"\";\n      });\n      var rows = this.state.rows;\n      rows.splice(insertRowBeforeIndex, 0, newRow); //Insert empty row at index idx\n\n      console.log(\"inserted at \" + insertRowBeforeIndex);\n      this.setState({\n        rows: rows\n      });\n      this.state.unsavedRowsIndices = this.state.unsavedRowsIndices.map(i => insertRowBeforeIndex <= i ? i + 1 : i);\n      this.state.unsavedRowsIndices.push(insertRowBeforeIndex);\n    };\n\n    this.deleteRow = () => {\n      var rowSelectedForDeletion = this.state.indexOfSelectedRow;\n\n      if (this.state.unsavedRowsIndices.includes(rowSelectedForDeletion)) {\n        this.removeRowFromTable(rowSelectedForDeletion);\n      } else {\n        var data = {\n          row: this.state.rows[rowSelectedForDeletion]\n        };\n        this.state.tableDataService.deleteTableData(this.props.table, data, function () {\n          this.removeRowFromTable(rowSelectedForDeletion);\n        }.bind(this), function (data) {\n          console.log(data);\n        }.bind(this));\n      }\n    };\n\n    this.removeRowFromTable = rowIndex => {\n      var data = this.state.rows;\n      data.splice(rowIndex, 1);\n      var indexInUnsavedRowIndex = this.state.unsavedRowsIndices.indexOf(rowIndex);\n\n      if (indexInUnsavedRowIndex != -1) {\n        this.state.unsavedRowsIndices.splice(indexInUnsavedRowIndex, 1);\n      }\n\n      this.setState({\n        rows: data\n      });\n    };\n\n    this.save = explicitSave => {\n      var columnsWithMissingData = [];\n      var alert = null;\n      this.state.unsavedRowsIndices.forEach(unsavedRowIndex => {\n        var unsavedRow = this.state.rows[unsavedRowIndex];\n        var colsRequiringValue = this.state.columns.filter(col => {\n          if (!col.nullable && col.editor && !unsavedRow[col.key]) {\n            if (columnsWithMissingData.indexOf(col.key) === -1) {\n              columnsWithMissingData.push(col.key);\n            }\n\n            return col.key;\n          }\n        });\n        var emptyColumns = Object.keys(unsavedRow).filter(col => {\n          if (unsavedRow[col] == \"\") return col;\n        });\n        console.log(emptyColumns.length + \"   \" + Object.keys(unsavedRow).length);\n\n        if (colsRequiringValue.length == 0 && emptyColumns.length < Object.keys(unsavedRow).length) {\n          this.saveRow(unsavedRowIndex);\n        }\n      });\n\n      if (explicitSave || this.state.alert != null) {\n        if (columnsWithMissingData.length > 0) {\n          alert = {\n            severity: \"warning\",\n            message: \"One or more rows have incomplete data and cannot be stored (missing column:\" + columnsWithMissingData.map(col => \" \" + col) + \")\"\n          };\n        }\n      }\n\n      this.setState({\n        alert: alert\n      });\n    };\n\n    this.saveRow = rowIndex => {\n      var data = {\n        row: this.state.rows[rowIndex]\n      };\n      console.log(data);\n      this.state.tableDataService.addTableData(this.props.table, data, function (data) {\n        this.state.rows[rowIndex] = data.data.row;\n        var idx = this.state.unsavedRowsIndices.indexOf(rowIndex);\n        console.log(idx);\n        this.state.unsavedRowsIndices.splice(idx, 1); // Unmark row as new\n\n        this.forceUpdate();\n      }.bind(this), function (data) {\n        console.log(data);\n      }.bind(this));\n    };\n\n    this.update = (updatedRows, index) => {\n      var indexOfUpdatedRow = index.indexes[0];\n      var newInstanceOfUpdatedRow = updatedRows[indexOfUpdatedRow];\n\n      if (this.state.unsavedRowsIndices.includes(indexOfUpdatedRow)) {\n        var rows = this.state.rows;\n        rows[indexOfUpdatedRow] = newInstanceOfUpdatedRow;\n        this.setState({\n          rows: rows\n        });\n        return;\n      }\n\n      var oldInstanceOfUpdatedRow = this.state.rows[indexOfUpdatedRow];\n      var newInstanceOfUpdatedRow = updatedRows[indexOfUpdatedRow];\n      var data = {\n        oldRow: oldInstanceOfUpdatedRow,\n        newRow: newInstanceOfUpdatedRow\n      };\n      this.state.tableDataService.updateTableData(this.props.table, data, function () {\n        var rows = this.state.rows;\n        this.state.rows[indexOfUpdatedRow] = newInstanceOfUpdatedRow;\n        console.log(newInstanceOfUpdatedRow);\n        this.setState({\n          rows: rows\n        });\n      }.bind(this), function (data) {\n        console.log(data);\n      }.bind(this));\n    };\n  }\n\n  componentDidMount() {\n    this.loadTableData();\n  }\n\n  render() {\n    if (this.state.loading) {\n      return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }, this);\n    }\n\n    if (this.state.dataLoadingError) {\n      window.location.reload(false);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.alert && /*#__PURE__*/_jsxDEV(CollapsableAlert, {\n        severity: this.state.alert.severity,\n        message: this.state.alert.message,\n        onClose: () => this.setState({\n          alert: null\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ContentWithContextMenu, {\n        content: /*#__PURE__*/_jsxDEV(DataGrid, {\n          columns: this.state.columns,\n          rows: this.state.rows,\n          rowGetter: i => this.state.rows[i],\n          onRowsChange: this.update,\n          enableCellSelect: true,\n          style: {\n            'height': \"80vh\",\n            overflowX: 'hidden'\n          },\n          className: \"fill-grid\",\n          minHeight: \"1000\",\n          onSelectedCellChange: this.handleCellChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this),\n        menuItems: Object.keys(this.contextMenuItems),\n        action: a => this.contextMenuItems[a]()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BottomNavigation, {\n        showLabels: true,\n        color: \"red\",\n        children: [this.state.unsavedRowsIndices.length > 0 && /*#__PURE__*/_jsxDEV(BottomNavigationAction, {\n          label: \"Unsaved rows\",\n          icon: /*#__PURE__*/_jsxDEV(SyncIcon, {\n            style: {\n              color: yellow[500]\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(BottomNavigationAction, {\n          label: \"Rows: \" + this.state.rows.length,\n          icon: /*#__PURE__*/_jsxDEV(StorageIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 83\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(BottomNavigationAction, {\n          label: \"Columns: \" + this.state.columns.length,\n          icon: /*#__PURE__*/_jsxDEV(StorageIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 89\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default SavageTable;","map":{"version":3,"sources":["C:/Users/vincent/git/playground/src/Components/Table/Table.js"],"names":["React","Component","DataGrid","TextEditor","TableDataService","CircularProgress","Typography","CollapsableAlert","ContentWithContextMenu","BottomNavigation","BottomNavigationAction","LocationOnIcon","green","grey","yellow","SyncIcon","StorageIcon","SavageTable","state","tableDataService","alert","columns","rows","unsavedRowsIndices","dataLoadingError","loading","loadTableData","getTableData","props","table","data","tableSchema","map","col","key","column","name","resizable","nullable","editor","editable","undefined","setState","indexOfSelectedRow","length","bind","console","log","contextMenuItems","insertRow","deleteRow","save","handleCellChange","c","rowIdx","includes","insertRowBeforeIndex","newRow","forEach","splice","i","push","rowSelectedForDeletion","removeRowFromTable","row","deleteTableData","rowIndex","indexInUnsavedRowIndex","indexOf","explicitSave","columnsWithMissingData","unsavedRowIndex","unsavedRow","colsRequiringValue","filter","emptyColumns","Object","keys","saveRow","severity","message","addTableData","idx","forceUpdate","update","updatedRows","index","indexOfUpdatedRow","indexes","newInstanceOfUpdatedRow","oldInstanceOfUpdatedRow","oldRow","updateTableData","componentDidMount","render","window","location","reload","overflowX","a","color"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport DataGrid, { TextEditor } from \"react-data-grid\";\r\n\r\nimport TableDataService from '../../Service/TableDataServices';\r\nimport { CircularProgress, Typography } from '@material-ui/core';\r\nimport CollapsableAlert from '../CollapsableAlert/CollapsableAlert';\r\nimport ContentWithContextMenu from '../ContentWithContextMenu/ContentWithContextMenu';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport { green, grey, yellow } from '@material-ui/core/colors';\r\nimport SyncIcon from '@material-ui/icons/Sync';\r\nimport StorageIcon from '@material-ui/icons/Storage';\r\n\r\nclass SavageTable extends Component {\r\n  state = {\r\n    tableDataService: new TableDataService(),\r\n    alert: null,\r\n    columns: [],\r\n    rows: [],\r\n    unsavedRowsIndices: [], // Rows that are inserted to the table but not yet saved to the database\r\n    dataLoadingError: false,\r\n    loading: true,\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadTableData()\r\n  }\r\n\r\n  loadTableData = () => {\r\n    this.state.tableDataService.getTableData(this.props.table,\r\n      function (data) {\r\n        var rows = data.data.data\r\n        var columns = data.data.tableSchema.columns.map(col => ({\r\n          key: col.column,\r\n          name: col.column,\r\n          resizable: true,\r\n          nullable: col.nullable,\r\n          editor: col.editable ? TextEditor : undefined\r\n        }));\r\n        this.setState({\r\n          columns: columns,\r\n          rows: rows,\r\n          loading: false,\r\n          indexOfSelectedRow: rows.length,\r\n          unsavedRowsIndices: []\r\n        })\r\n\r\n      }.bind(this),\r\n      function (data) {\r\n        console.log(data)\r\n        this.setState({ loading: false, dataLoadingError: true })\r\n      }.bind(this));\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loading) {\r\n      return (<CircularProgress />)\r\n    }\r\n    if (this.state.dataLoadingError) {\r\n      window.location.reload(false)\r\n    }\r\n    return (\r\n      <div>\r\n        {this.state.alert &&\r\n          <CollapsableAlert\r\n            severity={this.state.alert.severity}\r\n            message={this.state.alert.message}\r\n            onClose={() => this.setState({ alert: null })}\r\n          />}\r\n        <ContentWithContextMenu\r\n          content={\r\n            <DataGrid\r\n              columns={this.state.columns}\r\n              rows={this.state.rows}\r\n              rowGetter={i => this.state.rows[i]}\r\n              onRowsChange={this.update}\r\n              enableCellSelect={true}\r\n              style={{ 'height': \"80vh\", overflowX: 'hidden' }}\r\n              className=\"fill-grid\"\r\n              minHeight=\"1000\"\r\n              onSelectedCellChange={this.handleCellChange}\r\n            />\r\n          }\r\n          menuItems={Object.keys(this.contextMenuItems)}\r\n          action={(a) => this.contextMenuItems[a]()}\r\n        />\r\n        <BottomNavigation showLabels color=\"red\">\r\n          {this.state.unsavedRowsIndices.length > 0 &&\r\n            <BottomNavigationAction\r\n              label=\"Unsaved rows\"\r\n              icon={<SyncIcon style={{ color: yellow[500] }} />}\r\n            />\r\n          }\r\n\r\n          <BottomNavigationAction label={\"Rows: \" + this.state.rows.length} icon={<StorageIcon />} />\r\n          <BottomNavigationAction label={\"Columns: \" + this.state.columns.length} icon={<StorageIcon />} />\r\n        </BottomNavigation>\r\n      </div >\r\n    );\r\n  }\r\n\r\n  contextMenuItems = {\r\n    \"Insert\": () => { this.insertRow() },\r\n    \"Delete\": () => { this.deleteRow() },\r\n    \"Save\": () => { this.save(true) },\r\n    \"Reload\": () => { this.loadTableData() }\r\n  }\r\n\r\n  handleCellChange = (c) => {\r\n    if (c.rowIdx != this.state.indexOfSelectedRow && this.state.unsavedRowsIndices.includes(this.state.indexOfSelectedRow)) {\r\n      this.save(false)\r\n    }\r\n    this.state.indexOfSelectedRow = c.rowIdx\r\n\r\n  }\r\n\r\n  insertRow = () => {\r\n    var insertRowBeforeIndex = this.state.indexOfSelectedRow;\r\n    var newRow = {}\r\n    this.state.columns.forEach(col => { newRow[col.key] = \"\" })\r\n    var rows = this.state.rows\r\n\r\n    rows.splice(insertRowBeforeIndex, 0, newRow) //Insert empty row at index idx\r\n    console.log(\"inserted at \" + insertRowBeforeIndex)\r\n\r\n    this.setState({ rows: rows })\r\n    this.state.unsavedRowsIndices = this.state.unsavedRowsIndices.map(i => (\r\n      insertRowBeforeIndex <= i ? i + 1 : i\r\n    ))\r\n\r\n    this.state.unsavedRowsIndices.push(insertRowBeforeIndex)\r\n  }\r\n\r\n  deleteRow = () => {\r\n    var rowSelectedForDeletion = this.state.indexOfSelectedRow\r\n\r\n    if (this.state.unsavedRowsIndices.includes(rowSelectedForDeletion)) {\r\n      this.removeRowFromTable(rowSelectedForDeletion)\r\n    }\r\n    else {\r\n      var data = { row: this.state.rows[rowSelectedForDeletion] }\r\n\r\n      this.state.tableDataService.deleteTableData(\r\n        this.props.table,\r\n        data,\r\n        function () {\r\n          this.removeRowFromTable(rowSelectedForDeletion)\r\n        }.bind(this),\r\n        function (data) {\r\n          console.log(data)\r\n        }.bind(this));\r\n    }\r\n  }\r\n\r\n  removeRowFromTable = (rowIndex) => {\r\n    var data = this.state.rows\r\n    data.splice(rowIndex, 1)\r\n    var indexInUnsavedRowIndex = this.state.unsavedRowsIndices.indexOf(rowIndex)\r\n    if (indexInUnsavedRowIndex != -1) {\r\n      this.state.unsavedRowsIndices.splice(indexInUnsavedRowIndex, 1)\r\n    }\r\n    this.setState({ rows: data })\r\n  }\r\n\r\n  save = (explicitSave) => {\r\n    var columnsWithMissingData = []\r\n    var alert = null\r\n\r\n    this.state.unsavedRowsIndices.forEach(unsavedRowIndex => {\r\n      var unsavedRow = this.state.rows[unsavedRowIndex]\r\n      var colsRequiringValue = this.state.columns.filter(col => {\r\n        if (!col.nullable && col.editor && !unsavedRow[col.key]) {\r\n          if (columnsWithMissingData.indexOf(col.key) === -1) {\r\n            columnsWithMissingData.push(col.key);\r\n          }\r\n          return col.key\r\n        }\r\n      })\r\n      var emptyColumns = Object.keys(unsavedRow).filter(col => {if(unsavedRow[col] == \"\") return col})\r\n      console.log(emptyColumns.length + \"   \" + Object.keys(unsavedRow).length)\r\n      if (colsRequiringValue.length == 0 && emptyColumns.length < Object.keys(unsavedRow).length) {\r\n        this.saveRow(unsavedRowIndex)\r\n      }\r\n    })\r\n\r\n    if (explicitSave || this.state.alert != null) {\r\n      if (columnsWithMissingData.length > 0) {\r\n        alert = {\r\n          severity: \"warning\",\r\n          message: \"One or more rows have incomplete data and cannot be stored (missing column:\" + columnsWithMissingData.map(col => \" \" + col) + \")\",\r\n        }\r\n      }\r\n\r\n    }\r\n    this.setState({ alert: alert })\r\n  }\r\n\r\n  saveRow = (rowIndex) => {\r\n    var data = { row: this.state.rows[rowIndex] }\r\n    console.log(data)\r\n    this.state.tableDataService.addTableData(this.props.table, data,\r\n      function (data) {\r\n        this.state.rows[rowIndex] = data.data.row\r\n        var idx = this.state.unsavedRowsIndices.indexOf(rowIndex)\r\n        console.log(idx)\r\n        this.state.unsavedRowsIndices.splice(idx, 1); // Unmark row as new\r\n        this.forceUpdate();\r\n\r\n      }.bind(this),\r\n      function (data) {\r\n        console.log(data)\r\n      }.bind(this));\r\n  }\r\n\r\n  update = (updatedRows, index) => {\r\n    var indexOfUpdatedRow = index.indexes[0];\r\n    var newInstanceOfUpdatedRow = updatedRows[indexOfUpdatedRow];\r\n\r\n    if (this.state.unsavedRowsIndices.includes(indexOfUpdatedRow)) {\r\n      var rows = this.state.rows;\r\n      rows[indexOfUpdatedRow] = newInstanceOfUpdatedRow;\r\n      this.setState({ rows: rows })\r\n      return\r\n    }\r\n\r\n    var oldInstanceOfUpdatedRow = this.state.rows[indexOfUpdatedRow];\r\n    var newInstanceOfUpdatedRow = updatedRows[indexOfUpdatedRow];\r\n    var data = { oldRow: oldInstanceOfUpdatedRow, newRow: newInstanceOfUpdatedRow }\r\n\r\n    this.state.tableDataService.updateTableData(this.props.table, data,\r\n      function () {\r\n        var rows = this.state.rows;\r\n        this.state.rows[indexOfUpdatedRow] = newInstanceOfUpdatedRow;\r\n        console.log(newInstanceOfUpdatedRow)\r\n        this.setState({ rows: rows })\r\n      }.bind(this),\r\n      function (data) {\r\n        console.log(data)\r\n      }.bind(this));\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default SavageTable;"]},"metadata":{},"sourceType":"module"}