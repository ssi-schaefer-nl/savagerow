{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\savagerow\\\\front-end\\\\src\\\\Components\\\\Table\\\\Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport ContextMenu from '../ContextMenu/ContextMenu';\nimport DataGridControlBar from './DataGridControlBar';\nimport DataGridTable from './DataGridTable';\nimport NotificationArea from '../NotificationArea/NotificationArea';\nimport TableService from './TableService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SavageTable = props => {\n  _s();\n\n  const tableService = new TableService(props.table);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [rows, setRows] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n  const [insertedRows, setInsertedRows] = useState([]);\n\n  const addNotification = (content, severity) => {\n    const notification = {\n      content: content,\n      severity: severity\n    };\n    setNotifications(notifications => [...notifications, notification]);\n  };\n\n  const loadTableRows = () => {\n    tableService.getRowSet(data => setRows(data.data.rows), () => addNotification(\"Unable to fetch table rows\", \"error\"));\n  };\n\n  const contextMenuActions = {\n    \"Insert\": () => insertAction(),\n    \"Delete\": () => deleteAction(),\n    \"Save\": () => saveAction(),\n    \"Reload\": () => loadTableRows()\n  };\n\n  const insertAction = () => {\n    const rId = selectedRow;\n    setInsertedRows(irs => [...irs.map(ir => ir >= rId ? ir + 1 : ir), rId]);\n    console.log(insertedRows);\n    setRows(tableService.addRow(rows, rId));\n  };\n\n  const deleteAction = () => {\n    const rId = selectedRow;\n    tableService.delete(rows, rId, resultingRows => {\n      setInsertedRows(irs => irs.map(ir => ir > rId ? ir - 1 : ir));\n      setRows(resultingRows);\n    }, e => addNotification(\"Unable to delete row: \" + e, \"warning\"));\n  };\n\n  const saveAction = () => {\n    const rId = selectedRow;\n\n    if (insertedRows.indexOf(rId) == -1) {\n      addNotification(\"The row you are trying to save is already synchronized\", \"info\");\n      return;\n    }\n\n    tableService.save(rows, rId, resultingRows => {\n      setRows(rows);\n      setInsertedRows(irs => irs.filter(r => r === rId));\n    }, e => addNotification(\"Unable to save data: \" + e, \"warning\"));\n  };\n\n  useEffect(() => {\n    loadTableRows();\n    tableService.getSchema(data => setColumns(data.data.columns), () => addNotification(\"Unable to fetch table schema\", \"error\"));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NotificationArea, {\n      notifications: notifications,\n      handleClose: index => setNotifications(curr => curr.filter((notifications, i) => i !== index))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContextMenu, {\n      menuItems: Object.keys(contextMenuActions),\n      onItemClick: a => contextMenuActions[a](),\n      children: /*#__PURE__*/_jsxDEV(DataGridTable, {\n        rows: rows,\n        columns: columns,\n        onRowSelect: setSelectedRow,\n        onRowChange: (newRow, index) => {\n          if (insertedRows.indexOf(index) == -1) tableService.update(rows, newRow, index, rows => setRows(rows), e => addNotification(\"Unable to update row: \" + e, \"warning\"));\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataGridControlBar, {\n      rowCount: rows.length,\n      columnCount: columns.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SavageTable, \"nY/93GssPvURsuTGCnBwNG1pO9k=\");\n\n_c = SavageTable;\nexport default SavageTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"SavageTable\");","map":{"version":3,"sources":["C:/Users/vincent/git/savagerow/front-end/src/Components/Table/Table.js"],"names":["React","Component","useEffect","useState","ContextMenu","DataGridControlBar","DataGridTable","NotificationArea","TableService","SavageTable","props","tableService","table","selectedRow","setSelectedRow","rows","setRows","columns","setColumns","notifications","setNotifications","insertedRows","setInsertedRows","addNotification","content","severity","notification","loadTableRows","getRowSet","data","contextMenuActions","insertAction","deleteAction","saveAction","rId","irs","map","ir","console","log","addRow","delete","resultingRows","e","indexOf","save","filter","r","getSchema","index","curr","i","Object","keys","a","newRow","update","length"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\nimport ContextMenu from '../ContextMenu/ContextMenu';\r\nimport DataGridControlBar from './DataGridControlBar';\r\nimport DataGridTable from './DataGridTable';\r\nimport NotificationArea from '../NotificationArea/NotificationArea';\r\nimport TableService from './TableService';\r\n\r\n\r\nconst SavageTable = (props) => {\r\n  const tableService = new TableService(props.table)\r\n  const [selectedRow, setSelectedRow] = useState(null)\r\n  const [rows, setRows] = useState([])\r\n  const [columns, setColumns] = useState([])\r\n  const [notifications, setNotifications] = useState([])\r\n  const [insertedRows, setInsertedRows] = useState([])\r\n\r\n  const addNotification = (content, severity) => {\r\n    const notification = { content: content, severity: severity }\r\n    setNotifications(notifications => [...notifications, notification])\r\n  }\r\n\r\n  const loadTableRows = () => {\r\n    tableService.getRowSet(data => setRows(data.data.rows), () => addNotification(\"Unable to fetch table rows\", \"error\"))\r\n  }\r\n\r\n  const contextMenuActions = {\r\n    \"Insert\": () => insertAction(),\r\n    \"Delete\": () => deleteAction(),\r\n    \"Save\": () => saveAction(),\r\n    \"Reload\": () => loadTableRows()\r\n  }\r\n\r\n  const insertAction = () => {\r\n    const rId = selectedRow\r\n    setInsertedRows(irs => [...irs.map(ir => ir >= rId ? ir + 1 : ir), rId])\r\n    console.log(insertedRows)\r\n    setRows(tableService.addRow(rows, rId))\r\n  }\r\n\r\n  const deleteAction = () => {\r\n    const rId = selectedRow\r\n\r\n    tableService.delete(rows, rId, (resultingRows) => {\r\n      setInsertedRows(irs => irs.map(ir => ir > rId ? ir - 1 : ir))\r\n      setRows(resultingRows)\r\n    }, (e) => addNotification(\"Unable to delete row: \" + e, \"warning\"))\r\n  }\r\n\r\n  const saveAction = () => {\r\n    const rId = selectedRow\r\n    \r\n    if(insertedRows.indexOf(rId) == -1) {\r\n      addNotification(\"The row you are trying to save is already synchronized\", \"info\")\r\n      return\r\n    }\r\n\r\n    tableService.save(rows, rId, (resultingRows) => {\r\n      setRows(rows)\r\n      setInsertedRows(irs => irs.filter(r => r === rId))\r\n    }, (e) => addNotification(\"Unable to save data: \" + e, \"warning\"))\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadTableRows()\r\n    tableService.getSchema(data => setColumns(data.data.columns), () => addNotification(\"Unable to fetch table schema\", \"error\"))\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <>\r\n      <NotificationArea\r\n        notifications={notifications}\r\n        handleClose={(index) => setNotifications(curr => curr.filter((notifications, i) => i !== index))}\r\n      />\r\n      <ContextMenu menuItems={Object.keys(contextMenuActions)} onItemClick={(a) => contextMenuActions[a]()}>\r\n        <DataGridTable\r\n          rows={rows}\r\n          columns={columns}\r\n          onRowSelect={setSelectedRow}\r\n          onRowChange={(newRow, index) => {\r\n            if (insertedRows.indexOf(index) == -1)\r\n              tableService.update(rows, newRow, index, (rows) => setRows(rows), (e) => addNotification(\"Unable to update row: \" + e, \"warning\"))\r\n          }}\r\n        />\r\n      </ContextMenu>\r\n      <DataGridControlBar rowCount={rows.length} columnCount={columns.length} />\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default SavageTable"]},"metadata":{},"sourceType":"module"}