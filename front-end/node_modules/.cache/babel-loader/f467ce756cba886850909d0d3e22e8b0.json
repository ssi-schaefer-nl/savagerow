{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\playground\\\\src\\\\Components\\\\Tables\\\\SavageTable.js\";\nimport React from \"react\";\nimport DataGrid, { TextEditor } from \"react-data-grid\";\nimport \"./styles.css\";\nimport TableDataService from '../../Service/TableDataServices';\nimport { CircularProgress } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Example extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rows: [],\n      newRows: [],\n      columns: [],\n      loading: true,\n      selectedRow: 0,\n      tableDataService: new TableDataService()\n    };\n\n    this.handleClick = e => {\n      if (e.type === 'contextmenu') {\n        e.preventDefault();\n        this.insertEmptyRow(this.state.selectedRow);\n      }\n    };\n\n    this.handleCellChange = c => {\n      this.state.selectedRow = c.rowIdx;\n    };\n\n    this.insertEmptyRow = idx => {\n      var emptyRow = {};\n      this.state.columns.forEach(col => {\n        emptyRow[col.key] = \"\";\n      });\n      var data = this.state.rows;\n      data.splice(idx, 0, emptyRow);\n      this.setState({\n        rows: data\n      });\n      this.state.newRows.push(idx);\n    };\n\n    this.rowsChanged = (rows, index) => {\n      var rowIdx = index.indexes[0];\n      var oldRow = this.state.rows[rowIdx];\n      var changedRow = rows[rowIdx];\n      var newRowIdx = this.state.newRows.indexOf(rowIdx); // Check if changed row is a new row\n\n      if (newRowIndex != -1) {\n        this.addRow(changedRow, rowIdx);\n        this.state.newRows.splice(newRowIdx, 1); // Unmark row as new\n      } else {\n        this.updateRow(oldRow, changedRow, rowIdx);\n      }\n    };\n\n    this.addRow = (newRow, index) => {\n      var data = {\n        newRow\n      };\n      this.state.tableDataService.addTableData(this.props.table, data, function (data) {\n        var rows = this.state.rows;\n        rows.push(newRow);\n        this.setState({\n          rows: rows\n        });\n      }.bind(this), function (data) {\n        console.log(data);\n      }.bind(this));\n    };\n\n    this.updateRow = (oldRow, newRow, index) => {\n      var data = [{\n        oldRow: oldRow,\n        newRow: newRow\n      }];\n      this.state.tableDataService.updateTableData(this.props.table, data, function (data) {\n        var rows = this.state.rows;\n        rows[index] = newRow;\n        this.setState({\n          rows: rows\n        });\n      }.bind(this), function (data) {\n        console.log(data);\n      }.bind(this));\n    };\n  }\n\n  componentDidMount() {\n    this.loadTableData();\n  }\n\n  loadTableData() {\n    this.state.tableDataService.getTableData(this.props.table, function (data) {\n      this.setState({\n        columns: this.createColumns(data.data.tableSchema.columns)\n      });\n      this.setState({\n        rows: data.data.data\n      });\n      this.setState({\n        loading: false\n      });\n    }.bind(this), function (data) {\n      console.log(data);\n      this.setState({\n        loading: false\n      });\n    }.bind(this));\n  }\n\n  createColumns(columns) {\n    return columns.map(col => {\n      var def = {\n        key: col.column,\n        name: col.column,\n        resizable: true\n      };\n\n      if (col.editable) {\n        def.editor = TextEditor;\n      }\n\n      return def;\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      onContextMenu: this.handleClick,\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        columns: this.state.columns,\n        rows: this.state.rows,\n        rowGetter: i => this.state.rows[i],\n        onRowsChange: this.rowsChanged,\n        enableCellSelect: true,\n        style: {\n          resize: 'both',\n          'height': \"70vh\",\n          maxWidth: \"100%\"\n        },\n        className: \"fill-grid\",\n        minHeight: \"1000\",\n        onSelectedCellChange: this.handleCellChange,\n        on: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Example;","map":{"version":3,"sources":["C:/Users/vincent/git/playground/src/Components/Tables/SavageTable.js"],"names":["React","DataGrid","TextEditor","TableDataService","CircularProgress","Example","Component","state","rows","newRows","columns","loading","selectedRow","tableDataService","handleClick","e","type","preventDefault","insertEmptyRow","handleCellChange","c","rowIdx","idx","emptyRow","forEach","col","key","data","splice","setState","push","rowsChanged","index","indexes","oldRow","changedRow","newRowIdx","indexOf","newRowIndex","addRow","updateRow","newRow","addTableData","props","table","bind","console","log","updateTableData","componentDidMount","loadTableData","getTableData","createColumns","tableSchema","map","def","column","name","resizable","editable","editor","render","i","resize","maxWidth"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,IAAmBC,UAAnB,QAAqC,iBAArC;AACA,OAAO,cAAP;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,SAASC,gBAAT,QAAiC,mBAAjC;;;AAGA,MAAMC,OAAN,SAAsBL,KAAK,CAACM,SAA5B,CAAsC;AAAA;AAAA;AAAA,SAClCC,KADkC,GAC1B;AACJC,MAAAA,IAAI,EAAE,EADF;AAEJC,MAAAA,OAAO,EAAE,EAFL;AAGJC,MAAAA,OAAO,EAAE,EAHL;AAIJC,MAAAA,OAAO,EAAE,IAJL;AAKJC,MAAAA,WAAW,EAAE,CALT;AAMJC,MAAAA,gBAAgB,EAAE,IAAIV,gBAAJ;AANd,KAD0B;;AAAA,SAiElCW,WAjEkC,GAiEnBC,CAAD,IAAO;AACjB,UAAIA,CAAC,CAACC,IAAF,KAAW,aAAf,EAA8B;AAC1BD,QAAAA,CAAC,CAACE,cAAF;AACA,aAAKC,cAAL,CAAoB,KAAKX,KAAL,CAAWK,WAA/B;AACH;AACJ,KAtEiC;;AAAA,SAyElCO,gBAzEkC,GAyEdC,CAAD,IAAO;AACtB,WAAKb,KAAL,CAAWK,WAAX,GAAyBQ,CAAC,CAACC,MAA3B;AACH,KA3EiC;;AAAA,SA6ElCH,cA7EkC,GA6EhBI,GAAD,IAAS;AACtB,UAAIC,QAAQ,GAAG,EAAf;AACA,WAAKhB,KAAL,CAAWG,OAAX,CAAmBc,OAAnB,CAA2BC,GAAG,IAAI;AAACF,QAAAA,QAAQ,CAACE,GAAG,CAACC,GAAL,CAAR,GAAoB,EAApB;AAAuB,OAA1D;AACA,UAAIC,IAAI,GAAG,KAAKpB,KAAL,CAAWC,IAAtB;AACAmB,MAAAA,IAAI,CAACC,MAAL,CAAYN,GAAZ,EAAiB,CAAjB,EAAoBC,QAApB;AACA,WAAKM,QAAL,CAAc;AAACrB,QAAAA,IAAI,EAAEmB;AAAP,OAAd;AAEA,WAAKpB,KAAL,CAAWE,OAAX,CAAmBqB,IAAnB,CAAwBR,GAAxB;AACH,KArFiC;;AAAA,SAwFlCS,WAxFkC,GAwFpB,CAACvB,IAAD,EAAOwB,KAAP,KAAiB;AAC3B,UAAIX,MAAM,GAAGW,KAAK,CAACC,OAAN,CAAc,CAAd,CAAb;AACA,UAAIC,MAAM,GAAG,KAAK3B,KAAL,CAAWC,IAAX,CAAgBa,MAAhB,CAAb;AACA,UAAIc,UAAU,GAAG3B,IAAI,CAACa,MAAD,CAArB;AAEA,UAAIe,SAAS,GAAG,KAAK7B,KAAL,CAAWE,OAAX,CAAmB4B,OAAnB,CAA2BhB,MAA3B,CAAhB,CAL2B,CAKwB;;AACnD,UAAIiB,WAAW,IAAI,CAAC,CAApB,EAAuB;AACnB,aAAKC,MAAL,CAAYJ,UAAZ,EAAwBd,MAAxB;AACA,aAAKd,KAAL,CAAWE,OAAX,CAAmBmB,MAAnB,CAA0BQ,SAA1B,EAAqC,CAArC,EAFmB,CAEsB;AAC5C,OAHD,MAGO;AACH,aAAKI,SAAL,CAAeN,MAAf,EAAuBC,UAAvB,EAAmCd,MAAnC;AACH;AACJ,KApGiC;;AAAA,SAsGlCkB,MAtGkC,GAsGzB,CAACE,MAAD,EAAST,KAAT,KAAmB;AACxB,UAAIL,IAAI,GAAG;AAAEc,QAAAA;AAAF,OAAX;AACA,WAAKlC,KAAL,CAAWM,gBAAX,CAA4B6B,YAA5B,CAAyC,KAAKC,KAAL,CAAWC,KAApD,EAA2DjB,IAA3D,EACI,UAAUA,IAAV,EAAgB;AACZ,YAAInB,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAtB;AACAA,QAAAA,IAAI,CAACsB,IAAL,CAAUW,MAAV;AACA,aAAKZ,QAAL,CAAc;AAAErB,UAAAA,IAAI,EAAEA;AAAR,SAAd;AACH,OAJD,CAIEqC,IAJF,CAIO,IAJP,CADJ,EAMI,UAAUlB,IAAV,EAAgB;AACZmB,QAAAA,OAAO,CAACC,GAAR,CAAYpB,IAAZ;AACH,OAFD,CAEEkB,IAFF,CAEO,IAFP,CANJ;AAUH,KAlHiC;;AAAA,SAoHlCL,SApHkC,GAoHtB,CAACN,MAAD,EAASO,MAAT,EAAiBT,KAAjB,KAA2B;AACnC,UAAIL,IAAI,GAAG,CACP;AACIO,QAAAA,MAAM,EAAEA,MADZ;AAEIO,QAAAA,MAAM,EAAEA;AAFZ,OADO,CAAX;AAOA,WAAKlC,KAAL,CAAWM,gBAAX,CAA4BmC,eAA5B,CAA4C,KAAKL,KAAL,CAAWC,KAAvD,EAA8DjB,IAA9D,EACI,UAAUA,IAAV,EAAgB;AACZ,YAAInB,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAtB;AACAA,QAAAA,IAAI,CAACwB,KAAD,CAAJ,GAAcS,MAAd;AACA,aAAKZ,QAAL,CAAc;AAAErB,UAAAA,IAAI,EAAEA;AAAR,SAAd;AACH,OAJD,CAIEqC,IAJF,CAIO,IAJP,CADJ,EAMI,UAAUlB,IAAV,EAAgB;AACZmB,QAAAA,OAAO,CAACC,GAAR,CAAYpB,IAAZ;AACH,OAFD,CAEEkB,IAFF,CAEO,IAFP,CANJ;AAUH,KAtIiC;AAAA;;AAUlCI,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,aAAL;AACH;;AAEDA,EAAAA,aAAa,GAAG;AACZ,SAAK3C,KAAL,CAAWM,gBAAX,CAA4BsC,YAA5B,CAAyC,KAAKR,KAAL,CAAWC,KAApD,EACI,UAAUjB,IAAV,EAAgB;AACZ,WAAKE,QAAL,CAAc;AAAEnB,QAAAA,OAAO,EAAE,KAAK0C,aAAL,CAAmBzB,IAAI,CAACA,IAAL,CAAU0B,WAAV,CAAsB3C,OAAzC;AAAX,OAAd;AACA,WAAKmB,QAAL,CAAc;AAAErB,QAAAA,IAAI,EAAEmB,IAAI,CAACA,IAAL,CAAUA;AAAlB,OAAd;AACA,WAAKE,QAAL,CAAc;AAAElB,QAAAA,OAAO,EAAE;AAAX,OAAd;AACH,KAJD,CAIEkC,IAJF,CAIO,IAJP,CADJ,EAMI,UAAUlB,IAAV,EAAgB;AACZmB,MAAAA,OAAO,CAACC,GAAR,CAAYpB,IAAZ;AACA,WAAKE,QAAL,CAAc;AAAElB,QAAAA,OAAO,EAAE;AAAX,OAAd;AACH,KAHD,CAGEkC,IAHF,CAGO,IAHP,CANJ;AAUH;;AAEDO,EAAAA,aAAa,CAAC1C,OAAD,EAAU;AACnB,WAAOA,OAAO,CAAC4C,GAAR,CAAY7B,GAAG,IAAI;AACtB,UAAI8B,GAAG,GAAG;AACN7B,QAAAA,GAAG,EAAED,GAAG,CAAC+B,MADH;AAENC,QAAAA,IAAI,EAAEhC,GAAG,CAAC+B,MAFJ;AAGNE,QAAAA,SAAS,EAAE;AAHL,OAAV;;AAKA,UAAIjC,GAAG,CAACkC,QAAR,EAAkB;AACdJ,QAAAA,GAAG,CAACK,MAAJ,GAAa1D,UAAb;AACH;;AACD,aAAOqD,GAAP;AACH,KAVM,CAAP;AAWH;;AAGDM,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKtD,KAAL,CAAWI,OAAf,EAAwB;AACpB,0BAAQ,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,cAAR;AACH;;AAED,wBACI;AAAK,MAAA,aAAa,EAAE,KAAKG,WAAzB;AAAA,6BACI,QAAC,QAAD;AACI,QAAA,OAAO,EAAE,KAAKP,KAAL,CAAWG,OADxB;AAEI,QAAA,IAAI,EAAE,KAAKH,KAAL,CAAWC,IAFrB;AAGI,QAAA,SAAS,EAAEsD,CAAC,IAAI,KAAKvD,KAAL,CAAWC,IAAX,CAAgBsD,CAAhB,CAHpB;AAII,QAAA,YAAY,EAAE,KAAK/B,WAJvB;AAKI,QAAA,gBAAgB,EAAE,IALtB;AAMI,QAAA,KAAK,EAAE;AAAEgC,UAAAA,MAAM,EAAE,MAAV;AAAkB,oBAAU,MAA5B;AAAoCC,UAAAA,QAAQ,EAAE;AAA9C,SANX;AAOI,QAAA,SAAS,EAAC,WAPd;AAQI,QAAA,SAAS,EAAC,MARd;AASI,QAAA,oBAAoB,EAAE,KAAK7C,gBAT/B;AAUI,QAAA,EAAE;AAVN;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAgBH;;AA/DiC;;AA0ItC,eAAed,OAAf","sourcesContent":["import React from \"react\";\r\nimport DataGrid, { TextEditor } from \"react-data-grid\";\r\nimport \"./styles.css\";\r\nimport TableDataService from '../../Service/TableDataServices';\r\nimport { CircularProgress } from \"@material-ui/core\";\r\n\r\n\r\nclass Example extends React.Component {\r\n    state = {\r\n        rows: [],\r\n        newRows: [],\r\n        columns: [],\r\n        loading: true,\r\n        selectedRow: 0,\r\n        tableDataService: new TableDataService(),\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.loadTableData()\r\n    }\r\n\r\n    loadTableData() {\r\n        this.state.tableDataService.getTableData(this.props.table,\r\n            function (data) {\r\n                this.setState({ columns: this.createColumns(data.data.tableSchema.columns) })\r\n                this.setState({ rows: data.data.data })\r\n                this.setState({ loading: false })\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n                this.setState({ loading: false })\r\n            }.bind(this));\r\n    }\r\n\r\n    createColumns(columns) {\r\n        return columns.map(col => {\r\n            var def = {\r\n                key: col.column,\r\n                name: col.column,\r\n                resizable: true\r\n            }\r\n            if (col.editable) {\r\n                def.editor = TextEditor\r\n            }\r\n            return def;\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.state.loading) {\r\n            return (<CircularProgress />)\r\n        }\r\n\r\n        return (\r\n            <div onContextMenu={this.handleClick}>\r\n                <DataGrid\r\n                    columns={this.state.columns}\r\n                    rows={this.state.rows}\r\n                    rowGetter={i => this.state.rows[i]}\r\n                    onRowsChange={this.rowsChanged}\r\n                    enableCellSelect={true}\r\n                    style={{ resize: 'both', 'height': \"70vh\", maxWidth: \"100%\" }}\r\n                    className=\"fill-grid\"\r\n                    minHeight=\"1000\"\r\n                    onSelectedCellChange={this.handleCellChange}\r\n                    on\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        if (e.type === 'contextmenu') {\r\n            e.preventDefault()\r\n            this.insertEmptyRow(this.state.selectedRow)\r\n        }\r\n    }\r\n\r\n\r\n    handleCellChange = (c) => {\r\n        this.state.selectedRow = c.rowIdx\r\n    }\r\n\r\n    insertEmptyRow = (idx) => {\r\n        var emptyRow = {}\r\n        this.state.columns.forEach(col => {emptyRow[col.key] = \"\"})\r\n        var data = this.state.rows\r\n        data.splice(idx, 0, emptyRow)\r\n        this.setState({rows: data})\r\n\r\n        this.state.newRows.push(idx)\r\n    }\r\n\r\n\r\n    rowsChanged = (rows, index) => {\r\n        var rowIdx = index.indexes[0];\r\n        var oldRow = this.state.rows[rowIdx];\r\n        var changedRow = rows[rowIdx];\r\n        \r\n        var newRowIdx = this.state.newRows.indexOf(rowIdx) // Check if changed row is a new row\r\n        if (newRowIndex != -1) {\r\n            this.addRow(changedRow, rowIdx)\r\n            this.state.newRows.splice(newRowIdx, 1); // Unmark row as new\r\n        } else {\r\n            this.updateRow(oldRow, changedRow, rowIdx)\r\n        }\r\n    }\r\n\r\n    addRow = (newRow, index) => {\r\n        var data = { newRow }\r\n        this.state.tableDataService.addTableData(this.props.table, data,\r\n            function (data) {\r\n                var rows = this.state.rows;\r\n                rows.push(newRow)\r\n                this.setState({ rows: rows })\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n            }.bind(this));\r\n\r\n    }\r\n\r\n    updateRow = (oldRow, newRow, index) => {\r\n        var data = [\r\n            {\r\n                oldRow: oldRow,\r\n                newRow: newRow\r\n            },\r\n        ]\r\n\r\n        this.state.tableDataService.updateTableData(this.props.table, data,\r\n            function (data) {\r\n                var rows = this.state.rows;\r\n                rows[index] = newRow;\r\n                this.setState({ rows: rows })\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n            }.bind(this));\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Example;"]},"metadata":{},"sourceType":"module"}