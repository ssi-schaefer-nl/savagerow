{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\playground\\\\src\\\\Components\\\\Tables\\\\SavageTable.js\";\nimport React from \"react\";\nimport ReactDataGrid, { TextEditor } from \"react-data-grid\";\nimport \"./styles.css\";\nimport TableDataService from '../../Service/TableDataServices';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Example extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rows: this.props.rows,\n      tableDataService: new TableDataService(),\n      columns: this.createColumns(this.props.columns)\n    };\n\n    this.onGridRowsUpdated = ({\n      fromRow,\n      toRow,\n      updated\n    }) => {\n      this.setState(state => {\n        const rows = state.rows.slice();\n\n        for (let i = fromRow; i <= toRow; i++) {\n          rows[i] = { ...rows[i],\n            ...updated\n          };\n        }\n\n        return {\n          rows\n        };\n      });\n    };\n\n    this.rowsChanged = (rows, index) => {\n      var rowIdx = index.indexes[0];\n      var changedRow = this.getChanges(this.state.rows, rows);\n      this.state.rows[rowIdx] = changedRow[0];\n    };\n\n    this.getChanges = (originalArray, newArray) => newArray.filter((newRow, index) => originalArray[index] !== newRow);\n  }\n\n  createColumns(columns) {\n    return columns.map(column => {\n      column.editor = TextEditor;\n      column.resizable = true;\n      return column;\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(ReactDataGrid, {\n      columns: this.state.columns,\n      rows: this.state.rows,\n      rowGetter: i => this.state.rows[i],\n      onGridRowsUpdated: this.onGridRowsUpdated,\n      onRowsChange: this.rowsChanged,\n      enableCellSelect: false,\n      style: {\n        resize: 'both',\n        'height': \"70vh\",\n        maxWidth: \"100%\"\n      },\n      className: \"fill-grid\",\n      minHeight: \"1000\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Example;","map":{"version":3,"sources":["C:/Users/vincent/git/playground/src/Components/Tables/SavageTable.js"],"names":["React","ReactDataGrid","TextEditor","TableDataService","Example","Component","state","rows","props","tableDataService","columns","createColumns","onGridRowsUpdated","fromRow","toRow","updated","setState","slice","i","rowsChanged","index","rowIdx","indexes","changedRow","getChanges","originalArray","newArray","filter","newRow","map","column","editor","resizable","render","resize","maxWidth"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,IAAwBC,UAAxB,QAA0C,iBAA1C;AACA,OAAO,cAAP;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;;;AAGA,MAAMC,OAAN,SAAsBJ,KAAK,CAACK,SAA5B,CAAsC;AAAA;AAAA;AAAA,SAClCC,KADkC,GAC1B;AACJC,MAAAA,IAAI,EAAE,KAAKC,KAAL,CAAWD,IADb;AAEJE,MAAAA,gBAAgB,EAAE,IAAIN,gBAAJ,EAFd;AAGJO,MAAAA,OAAO,EAAE,KAAKC,aAAL,CAAmB,KAAKH,KAAL,CAAWE,OAA9B;AAHL,KAD0B;;AAAA,SAclCE,iBAdkC,GAcd,CAAC;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,KAAX;AAAkBC,MAAAA;AAAlB,KAAD,KAAiC;AACjD,WAAKC,QAAL,CAAcV,KAAK,IAAI;AACnB,cAAMC,IAAI,GAAGD,KAAK,CAACC,IAAN,CAAWU,KAAX,EAAb;;AACA,aAAK,IAAIC,CAAC,GAAGL,OAAb,EAAsBK,CAAC,IAAIJ,KAA3B,EAAkCI,CAAC,EAAnC,EAAuC;AACnCX,UAAAA,IAAI,CAACW,CAAD,CAAJ,GAAU,EAAE,GAAGX,IAAI,CAACW,CAAD,CAAT;AAAc,eAAGH;AAAjB,WAAV;AACH;;AACD,eAAO;AAAER,UAAAA;AAAF,SAAP;AACH,OAND;AAOH,KAtBiC;;AAAA,SAwBlCY,WAxBkC,GAwBpB,CAACZ,IAAD,EAAOa,KAAP,KAAiB;AAC3B,UAAIC,MAAM,GAAGD,KAAK,CAACE,OAAN,CAAc,CAAd,CAAb;AACA,UAAIC,UAAU,GAAG,KAAKC,UAAL,CAAgB,KAAKlB,KAAL,CAAWC,IAA3B,EAAiCA,IAAjC,CAAjB;AACA,WAAKD,KAAL,CAAWC,IAAX,CAAgBc,MAAhB,IAA0BE,UAAU,CAAC,CAAD,CAApC;AAEH,KA7BiC;;AAAA,SA+BlCC,UA/BkC,GA+BrB,CAACC,aAAD,EAAgBC,QAAhB,KAA6BA,QAAQ,CAACC,MAAT,CAAgB,CAACC,MAAD,EAASR,KAAT,KAAmBK,aAAa,CAACL,KAAD,CAAb,KAAyBQ,MAA5D,CA/BR;AAAA;;AAOlCjB,EAAAA,aAAa,CAACD,OAAD,EAAU;AACnB,WAAOA,OAAO,CAACmB,GAAR,CAAaC,MAAD,IAAY;AAC3BA,MAAAA,MAAM,CAACC,MAAP,GAAgB7B,UAAhB;AACA4B,MAAAA,MAAM,CAACE,SAAP,GAAmB,IAAnB;AACA,aAAOF,MAAP;AACH,KAJM,CAAP;AAIG;;AAqBPG,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,aAAD;AACI,MAAA,OAAO,EAAE,KAAK3B,KAAL,CAAWI,OADxB;AAEI,MAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWC,IAFrB;AAGI,MAAA,SAAS,EAAEW,CAAC,IAAI,KAAKZ,KAAL,CAAWC,IAAX,CAAgBW,CAAhB,CAHpB;AAII,MAAA,iBAAiB,EAAE,KAAKN,iBAJ5B;AAKI,MAAA,YAAY,EAAE,KAAKO,WALvB;AAMI,MAAA,gBAAgB,EAAE,KANtB;AAOI,MAAA,KAAK,EAAE;AAAEe,QAAAA,MAAM,EAAE,MAAV;AAAkB,kBAAU,MAA5B;AAAoCC,QAAAA,QAAQ,EAAE;AAA9C,OAPX;AAQI,MAAA,SAAS,EAAC,WARd;AASI,MAAA,SAAS,EAAE;AATf;AAAA;AAAA;AAAA;AAAA,YADJ;AAcH;;AAhDiC;;AAmDtC,eAAe/B,OAAf","sourcesContent":["import React from \"react\";\r\nimport ReactDataGrid, { TextEditor } from \"react-data-grid\";\r\nimport \"./styles.css\";\r\nimport TableDataService from '../../Service/TableDataServices';\r\n\r\n\r\nclass Example extends React.Component {\r\n    state = { \r\n        rows: this.props.rows,\r\n        tableDataService: new TableDataService(),\r\n        columns: this.createColumns(this.props.columns)\r\n     };\r\n\r\n    createColumns(columns) {\r\n        return columns.map((column) => {\r\n            column.editor = TextEditor;\r\n            column.resizable = true;\r\n            return column;\r\n        })}\r\n\r\n    onGridRowsUpdated = ({ fromRow, toRow, updated }) => {\r\n        this.setState(state => {\r\n            const rows = state.rows.slice();\r\n            for (let i = fromRow; i <= toRow; i++) {\r\n                rows[i] = { ...rows[i], ...updated };\r\n            }\r\n            return { rows };\r\n        });\r\n    };\r\n    \r\n    rowsChanged = (rows, index) => {\r\n        var rowIdx = index.indexes[0];\r\n        var changedRow = this.getChanges(this.state.rows, rows);\r\n        this.state.rows[rowIdx] = changedRow[0];\r\n    \r\n    }\r\n\r\n    getChanges = (originalArray, newArray) => newArray.filter((newRow, index) => originalArray[index] !== newRow);\r\n\r\n    render() {\r\n        return (\r\n            <ReactDataGrid\r\n                columns={this.state.columns}\r\n                rows={this.state.rows}\r\n                rowGetter={i => this.state.rows[i]}\r\n                onGridRowsUpdated={this.onGridRowsUpdated}\r\n                onRowsChange={this.rowsChanged}\r\n                enableCellSelect={false}\r\n                style={{ resize: 'both', 'height': \"70vh\", maxWidth: \"100%\"}}\r\n                className=\"fill-grid\"\r\n                minHeight= \"1000\"\r\n\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example;"]},"metadata":{},"sourceType":"module"}