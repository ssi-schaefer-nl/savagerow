{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\savagerow\\\\front-end\\\\src\\\\Components\\\\Table\\\\Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport DataGridControlBar from './DataGridControlBar';\nimport DataGridTable from './DataGridTable';\nimport NotificationArea from '../NotificationArea/NotificationArea';\nimport TableService from './TableService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SavageTable = props => {\n  _s();\n\n  const tableService = new TableService(props.table);\n  const [rows, setRows] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n  const [insertedRows, setInsertedRows] = useState([]);\n  const [errorRows, setErrorRows] = useState([]);\n\n  const addNotification = (content, severity) => {\n    const notification = {\n      content: content,\n      severity: severity\n    };\n    setNotifications(notifications => [...notifications, notification]);\n  };\n\n  const removeErrorsForRow = id => {\n    setErrorRows(er => er.filter(r => r.id != id));\n  };\n\n  const addErrorRow = (id, message) => {\n    const error = {\n      id: id,\n      message: message\n    };\n    removeErrorsForRow(id);\n    setErrorRows(er => [...er, error]);\n  };\n\n  const loadTableRows = () => {\n    tableService.getRowSet(data => setRows(data.data.rows), () => addNotification(\"Unable to fetch table rows\", \"error\"));\n    setInsertedRows([]);\n    setNotifications([]);\n    setErrorRows([]);\n  };\n\n  const insertAction = (rId, before) => {\n    if (!before) rId = rId + 1;\n    setInsertedRows(irs => [...irs.map(ir => ir >= rId ? ir + 1 : ir), rId]);\n    setRows(tableService.addRow(rows, rId));\n  };\n\n  const deleteAction = rId => {\n    tableService.delete(rows, rId, resultingRows => {\n      setInsertedRows(irs => irs.filter(r => r != rId).map(ir => ir > rId ? ir - 1 : ir));\n      setRows(resultingRows);\n    }, e => addErrorRow(rId, e));\n  };\n\n  const saveAction = rId => {\n    if (insertedRows.indexOf(rId) == -1) return;\n    tableService.save(rows, rId, resultingRows => {\n      setRows(resultingRows);\n      setInsertedRows(irs => irs.filter(r => r != rId));\n      removeErrorsForRow(rId);\n    }, e => addErrorRow(rId, \" Error saving the row: \" + e));\n  };\n\n  const handleRowChange = (newRow, index) => {\n    if (insertedRows.indexOf(index) == -1) tableService.update(rows, newRow, index, rows => {\n      setRows(rows);\n      removeErrorsForRow(index);\n    }, e => {\n      var message = e.message.length == 0 ? \" Undefined error during row update\" : \" Error updating row: \" + e.message;\n      addErrorRow(index, message);\n      console.log(e);\n    });else setRows(tableService.updateLocal(rows, newRow, index));\n  };\n\n  useEffect(() => {\n    loadTableRows();\n    tableService.getSchema(data => setColumns(data.data.columns), () => addNotification(\"Unable to fetch table schema\", \"error\"));\n  }, []);\n  var highlightedRowsFinal = [];\n\n  if (errorRows.length > 0) {\n    // addNotificationUnique(\"One or more rows have errors. Hover over the highlighted rows to see the errors.\", \"error\")\n    highlightedRowsFinal = highlightedRowsFinal.concat(errorRows.slice(0).reverse().map(er => {\n      return {\n        id: er.id,\n        message: er.message,\n        type: \"error\"\n      };\n    }));\n  }\n\n  if (insertedRows.length > 0) {\n    // addNotificationUnique(\"The highlighted rows are not saved. Save them to prevent loss of new data.\", \"warning\")\n    highlightedRowsFinal = highlightedRowsFinal.concat(insertedRows.map(i => {\n      return {\n        id: i,\n        message: \"This row is not saved\",\n        type: \"warning\"\n      };\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NotificationArea, {\n      notifications: notifications,\n      handleClose: index => setNotifications(curr => curr.filter((notifications, i) => i !== index))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataGridTable, {\n      rows: rows,\n      columns: columns,\n      highlightRows: highlightedRowsFinal,\n      onRowChange: handleRowChange,\n      onDelete: deleteAction,\n      onInsertAbove: idx => insertAction(idx, true),\n      onInsertBelow: idx => insertAction(idx, false),\n      onSave: saveAction,\n      onRefresh: loadTableRows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataGridControlBar, {\n      rowCount: rows.length,\n      columnCount: columns.length,\n      unsavedRows: insertedRows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SavageTable, \"NyeHijrM91goZzA09Agy4MydpsQ=\");\n\n_c = SavageTable;\nexport default SavageTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"SavageTable\");","map":{"version":3,"sources":["C:/Users/vincent/git/savagerow/front-end/src/Components/Table/Table.js"],"names":["React","Component","useEffect","useState","DataGridControlBar","DataGridTable","NotificationArea","TableService","SavageTable","props","tableService","table","rows","setRows","columns","setColumns","notifications","setNotifications","insertedRows","setInsertedRows","errorRows","setErrorRows","addNotification","content","severity","notification","removeErrorsForRow","id","er","filter","r","addErrorRow","message","error","loadTableRows","getRowSet","data","insertAction","rId","before","irs","map","ir","addRow","deleteAction","delete","resultingRows","e","saveAction","indexOf","save","handleRowChange","newRow","index","update","length","console","log","updateLocal","getSchema","highlightedRowsFinal","concat","slice","reverse","type","i","curr","idx"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\nimport DataGridControlBar from './DataGridControlBar';\r\nimport DataGridTable from './DataGridTable';\r\nimport NotificationArea from '../NotificationArea/NotificationArea';\r\nimport TableService from './TableService';\r\n\r\nconst SavageTable = (props) => {\r\n  const tableService = new TableService(props.table)\r\n  const [rows, setRows] = useState([])\r\n  const [columns, setColumns] = useState([])\r\n  const [notifications, setNotifications] = useState([])\r\n  const [insertedRows, setInsertedRows] = useState([])\r\n  const [errorRows, setErrorRows] = useState([])\r\n\r\n\r\n  const addNotification = (content, severity) => {\r\n    const notification = { content: content, severity: severity }\r\n    setNotifications(notifications => [...notifications, notification])\r\n  }\r\n\r\n  const removeErrorsForRow = id => {\r\n    setErrorRows(er => er.filter(r => r.id != id))\r\n  }\r\n\r\n  const addErrorRow = (id, message) => {\r\n    const error = { id: id, message: message }\r\n    removeErrorsForRow(id)\r\n    setErrorRows(er => [...er, error])\r\n  }\r\n\r\n  const loadTableRows = () => {\r\n    tableService.getRowSet(data => setRows(data.data.rows), () => addNotification(\"Unable to fetch table rows\", \"error\"))\r\n    setInsertedRows([])\r\n    setNotifications([])\r\n    setErrorRows([])\r\n  }\r\n\r\n  const insertAction = (rId, before) => {\r\n    if (!before)\r\n      rId = rId + 1\r\n\r\n    setInsertedRows(irs => [...irs.map(ir => ir >= rId ? ir + 1 : ir), rId])\r\n    setRows(tableService.addRow(rows, rId))\r\n  }\r\n\r\n  const deleteAction = (rId) => {\r\n    tableService.delete(rows, rId, (resultingRows) => {\r\n      setInsertedRows(irs => irs.filter(r => r != rId).map(ir => ir > rId ? ir - 1 : ir))\r\n      setRows(resultingRows)\r\n    }, (e) => addErrorRow(rId, e))\r\n  }\r\n\r\n  const saveAction = (rId) => {\r\n    if (insertedRows.indexOf(rId) == -1) return\r\n\r\n    tableService.save(rows, rId, (resultingRows) => {\r\n      setRows(resultingRows)\r\n      setInsertedRows(irs => irs.filter(r => r != rId))\r\n      removeErrorsForRow(rId)\r\n    }, (e) => addErrorRow(rId, \" Error saving the row: \" + e))\r\n  }\r\n\r\n  const handleRowChange = (newRow, index) => {\r\n    if (insertedRows.indexOf(index) == -1)\r\n      tableService.update(rows, newRow, index, (rows) => {\r\n        setRows(rows)\r\n        removeErrorsForRow(index)\r\n      }, (e) => {\r\n        var message = e.message.length == 0 ? \" Undefined error during row update\" : \" Error updating row: \" + e.message\r\n        addErrorRow(index, message)\r\n        console.log(e)\r\n      })\r\n    else\r\n      setRows(tableService.updateLocal(rows, newRow, index))\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadTableRows()\r\n    tableService.getSchema(data => setColumns(data.data.columns), () => addNotification(\"Unable to fetch table schema\", \"error\"))\r\n  }, [])\r\n\r\n  var highlightedRowsFinal = []\r\n  if (errorRows.length > 0) {\r\n    // addNotificationUnique(\"One or more rows have errors. Hover over the highlighted rows to see the errors.\", \"error\")\r\n    highlightedRowsFinal = highlightedRowsFinal.concat(errorRows.slice(0).reverse().map(er => { return { id: er.id, message: er.message, type: \"error\" } }))\r\n  }\r\n\r\n  if (insertedRows.length > 0) {\r\n    // addNotificationUnique(\"The highlighted rows are not saved. Save them to prevent loss of new data.\", \"warning\")\r\n    highlightedRowsFinal = highlightedRowsFinal.concat(insertedRows.map(i => { return { id: i, message: \"This row is not saved\", type: \"warning\" } }))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <NotificationArea\r\n        notifications={notifications}\r\n        handleClose={(index) => setNotifications(curr => curr.filter((notifications, i) => i !== index))}\r\n      />\r\n      <DataGridTable\r\n        rows={rows}\r\n        columns={columns}\r\n        highlightRows={highlightedRowsFinal}\r\n        onRowChange={handleRowChange}\r\n        onDelete={deleteAction}\r\n        onInsertAbove={(idx) => insertAction(idx, true)}\r\n        onInsertBelow={(idx) => insertAction(idx, false)}\r\n        onSave={saveAction}\r\n        onRefresh={loadTableRows}\r\n      />\r\n      <DataGridControlBar rowCount={rows.length} columnCount={columns.length} unsavedRows={insertedRows} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SavageTable"]},"metadata":{},"sourceType":"module"}