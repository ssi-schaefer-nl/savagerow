{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DragItemTypes } from 'react-data-grid';\nimport { DropTarget } from 'react-dnd';\nimport GroupedColumnButton from './GroupedColumnButton';\n\nvar GroupedColumnsPanel =\n/** @class */\nfunction (_super) {\n  __extends(GroupedColumnsPanel, _super);\n\n  function GroupedColumnsPanel() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  GroupedColumnsPanel.prototype.getPanelInstructionMessage = function () {\n    var groupBy = this.props.groupBy;\n    return groupBy && groupBy.length > 0 ? this.props.panelDescription : this.props.noColumnsSelectedMessage;\n  };\n\n  GroupedColumnsPanel.prototype.renderGroupedColumns = function () {\n    var _this = this;\n\n    return this.props.groupBy.map(function (c) {\n      var groupedColumnButtonProps = {\n        columnKey: typeof c === 'string' ? c : c.key,\n        name: typeof c === 'string' ? c : c.name,\n        onColumnGroupDeleted: _this.props.onColumnGroupDeleted,\n        key: typeof c === 'string' ? c : c.key\n      };\n      return React.createElement(GroupedColumnButton, __assign({}, groupedColumnButtonProps));\n    });\n  };\n\n  GroupedColumnsPanel.prototype.renderOverlay = function (color) {\n    return React.createElement(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        height: '100%',\n        width: '100%',\n        zIndex: 1,\n        opacity: 0.5,\n        backgroundColor: color\n      }\n    });\n  };\n\n  GroupedColumnsPanel.prototype.render = function () {\n    var _a = this.props,\n        connectDropTarget = _a.connectDropTarget,\n        isOver = _a.isOver,\n        canDrop = _a.canDrop;\n    return connectDropTarget(React.createElement(\"div\", {\n      style: {\n        padding: '2px',\n        position: 'relative',\n        margin: '-10px',\n        display: 'inline-block',\n        border: '1px solid #eee'\n      }\n    }, this.renderGroupedColumns(), \" \", React.createElement(\"span\", null, this.getPanelInstructionMessage()), isOver && canDrop && this.renderOverlay('yellow'), !isOver && canDrop && this.renderOverlay('#DBECFA')));\n  };\n\n  GroupedColumnsPanel.propTypes = {\n    isOver: PropTypes.bool.isRequired,\n    connectDropTarget: PropTypes.func,\n    canDrop: PropTypes.bool.isRequired,\n    groupBy: PropTypes.array,\n    noColumnsSelectedMessage: PropTypes.string,\n    panelDescription: PropTypes.string,\n    onColumnGroupDeleted: PropTypes.func\n  };\n  GroupedColumnsPanel.defaultProps = {\n    noColumnsSelectedMessage: 'Drag a column header here to group by that column',\n    panelDescription: 'Drag a column header here to group by that column'\n  };\n  return GroupedColumnsPanel;\n}(Component);\n\nvar columnTarget = {\n  drop: function (props, monitor) {\n    // Obtain the dragged item\n    var item = monitor.getItem();\n\n    if (typeof props.onColumnGroupAdded === 'function') {\n      props.onColumnGroupAdded(item.key);\n    }\n  }\n};\n\nfunction collect(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n    canDrop: monitor.canDrop(),\n    draggedolumn: monitor.getItem()\n  };\n}\n\nexport default DropTarget(DragItemTypes.Column, columnTarget, collect)(GroupedColumnsPanel);","map":{"version":3,"sources":["../../src/toolbars/GroupedColumnsPanel.js"],"names":[],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DragItemTypes } from 'react-data-grid';\nimport { DropTarget } from 'react-dnd';\n\nimport GroupedColumnButton from './GroupedColumnButton';\n\nclass GroupedColumnsPanel extends Component {\n  static propTypes = {\n    isOver: PropTypes.bool.isRequired,\n    connectDropTarget: PropTypes.func,\n    canDrop: PropTypes.bool.isRequired,\n    groupBy: PropTypes.array,\n    noColumnsSelectedMessage: PropTypes.string,\n    panelDescription: PropTypes.string,\n    onColumnGroupDeleted: PropTypes.func\n  };\n\n  static defaultProps = {\n    noColumnsSelectedMessage: 'Drag a column header here to group by that column',\n    panelDescription: 'Drag a column header here to group by that column'\n  };\n\n  getPanelInstructionMessage() {\n    const { groupBy } = this.props;\n    return groupBy && groupBy.length > 0 ? this.props.panelDescription : this.props.noColumnsSelectedMessage;\n  }\n\n  renderGroupedColumns() {\n    return this.props.groupBy.map(c => {\n      const groupedColumnButtonProps = {\n        columnKey: typeof c === 'string' ? c : c.key,\n        name: typeof c === 'string' ? c : c.name,\n        onColumnGroupDeleted: this.props.onColumnGroupDeleted,\n        key: typeof c === 'string' ? c : c.key\n      };\n      return <GroupedColumnButton {...groupedColumnButtonProps} />;\n    });\n  }\n\n  renderOverlay(color) {\n    return (\n      <div style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        height: '100%',\n        width: '100%',\n        zIndex: 1,\n        opacity: 0.5,\n        backgroundColor: color\n      }}\n      />\n    );\n  }\n\n  render() {\n    const { connectDropTarget, isOver, canDrop } = this.props;\n    return connectDropTarget(\n      <div style={{ padding: '2px', position: 'relative', margin: '-10px', display: 'inline-block', border: '1px solid #eee' }}>\n        {this.renderGroupedColumns()} <span>{this.getPanelInstructionMessage()}</span>\n        {isOver && canDrop && this.renderOverlay('yellow')}\n        {!isOver && canDrop && this.renderOverlay('#DBECFA')}\n      </div>);\n  }\n}\n\nconst columnTarget = {\n  drop(props, monitor) {\n    // Obtain the dragged item\n    const item = monitor.getItem();\n    if (typeof props.onColumnGroupAdded === 'function') {\n      props.onColumnGroupAdded(item.key);\n    }\n  }\n};\n\nfunction collect(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n    canDrop: monitor.canDrop(),\n    draggedolumn: monitor.getItem()\n  };\n}\n\nexport default DropTarget(DragItemTypes.Column, columnTarget, collect)(GroupedColumnsPanel);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}