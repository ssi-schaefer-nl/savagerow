{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\savagerow\\\\front-end\\\\src\\\\Components\\\\MultiSelect\\\\MultiSelect.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PropTypes from \"prop-types\";\nimport Select, { components } from \"react-select\"; // class MultiSelect extends Component {\n//   customStyles = {\n//     valueContainer: (provided, state) => ({\n//       ...provided,\n//       textOverflow: \"ellipsis\",\n//       maxWidth: \"90%\",\n//       whiteSpace: \"nowrap\",\n//       overflow: \"hidden\",\n//       display: \"initial\"\n//     })\n//   };\n//   multiValueContainer = ({ selectProps, data }) => {\n//     const label = data.label;\n//     const allSelected = selectProps.value;\n//     const index = allSelected.findIndex(selected => selected.label === label);\n//     const isLastSelected = index === allSelected.length - 1;\n//     const labelSuffix = isLastSelected ? ` (${allSelected.length})` : \", \";\n//     const val = `${label}${labelSuffix}`;\n//     return val;\n//   };\n//   render() {\n//     const { options, placeholder } = this.props;\n//     const {\n//       CustomOption,\n//       multiValueContainer,\n//       customStyles,\n//       ValueContainer\n//     } = this;\n//     return (\n//       <Select\n//         options={options}\n//         isMulti\n//         components={{\n//           MultiValueContainer: multiValueContainer\n//         }}\n//         closeMenuOnSelect={false}\n//         hideSelectedOptions={false}\n//         styles={customStyles}\n//         isSearchable={true}\n//         placeholder={placeholder}\n//       />\n//     );\n//   }\n// }\n// MultiSelect.propTypes = {\n//   optionGroups: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       label: PropTypes.string, //for group\n//       options: PropTypes.arrayOf(\n//         // group options\n//         PropTypes.arrayOf(\n//           PropTypes.shape({\n//             //\n//             value: PropTypes.oneOf([\n//               PropTypes.string,\n//               PropTypes.number,\n//               PropTypes.object\n//             ]).isRequired,\n//             label: PropTypes.string.isRequired\n//           })\n//         ).isRequired\n//       )\n//     })\n//   )\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ValueContainer = ({\n  children,\n  getValue,\n  ...props\n}) => {\n  var values = getValue();\n  var valueLabel = \"\";\n  if (values.length > 0) valueLabel += props.selectProps.getOptionLabel(values[0]);\n  if (values.length > 1) valueLabel += ` & ${values.length - 1} more`; // Keep standard placeholder and input from react-select\n\n  var childsToRender = React.Children.toArray(children).filter(child => ['Input', 'DummyInput', 'Placeholder'].indexOf(child.type.name) >= 0);\n  return /*#__PURE__*/_jsxDEV(components.ValueContainer, { ...props,\n    children: [!props.selectProps.inputValue && valueLabel, childsToRender]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 7\n  }, this);\n};\n\n_c = ValueContainer;\n\nconst MultiSelect = props => {\n  const {\n    options,\n    placeholder\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Select, {\n    options: options,\n    placeholder: placeholder,\n    isMulti: true,\n    components: {\n      ValueContainer\n    },\n    hideSelectedOptions: false\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = MultiSelect;\nexport default MultiSelect;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ValueContainer\");\n$RefreshReg$(_c2, \"MultiSelect\");","map":{"version":3,"sources":["C:/Users/vincent/git/savagerow/front-end/src/Components/MultiSelect/MultiSelect.js"],"names":["React","Component","ReactDOM","PropTypes","Select","components","ValueContainer","children","getValue","props","values","valueLabel","length","selectProps","getOptionLabel","childsToRender","Children","toArray","filter","child","indexOf","type","name","inputValue","MultiSelect","options","placeholder"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,IAAiBC,UAAjB,QAAmC,cAAnC,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,QAAZ;AAAsB,KAAGC;AAAzB,CAAD,KAAsC;AACzD,MAAIC,MAAM,GAAGF,QAAQ,EAArB;AACA,MAAIG,UAAU,GAAG,EAAjB;AAEA,MAAID,MAAM,CAACE,MAAP,GAAgB,CAApB,EAAuBD,UAAU,IAAIF,KAAK,CAACI,WAAN,CAAkBC,cAAlB,CAAiCJ,MAAM,CAAC,CAAD,CAAvC,CAAd;AACvB,MAAIA,MAAM,CAACE,MAAP,GAAgB,CAApB,EAAuBD,UAAU,IAAK,MAAKD,MAAM,CAACE,MAAP,GAAgB,CAAE,OAAtC,CALkC,CAOzD;;AACA,MAAIG,cAAc,GAAGf,KAAK,CAACgB,QAAN,CAAeC,OAAf,CAAuBV,QAAvB,EAAiCW,MAAjC,CAAyCC,KAAD,IAAW,CAAC,OAAD,EAAU,YAAV,EAAwB,aAAxB,EAAuCC,OAAvC,CAA+CD,KAAK,CAACE,IAAN,CAAWC,IAA1D,KAAmE,CAAtH,CAArB;AAEA,sBACE,QAAC,UAAD,CAAY,cAAZ,OAA+Bb,KAA/B;AAAA,eACG,CAACA,KAAK,CAACI,WAAN,CAAkBU,UAAnB,IAAiCZ,UADpC,EAEII,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAhBH;;KAAMT,c;;AAkBJ,MAAMkB,WAAW,GAAIf,KAAD,IAAW;AAC3B,QAAM;AAACgB,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAyBjB,KAA/B;AACA,sBACE,QAAC,MAAD;AACA,IAAA,OAAO,EAAEgB,OADT;AAEA,IAAA,WAAW,EAAEC,WAFb;AAGA,IAAA,OAAO,MAHP;AAIA,IAAA,UAAU,EAAE;AACVpB,MAAAA;AADU,KAJZ;AAOA,IAAA,mBAAmB,EAAE;AAPrB;AAAA;AAAA;AAAA;AAAA,UADF;AAWH,CAbD;;MAAMkB,W;AAeR,eAAeA,WAAf","sourcesContent":["\r\nimport React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport Select, { components } from \"react-select\";\r\n\r\n\r\n\r\n// class MultiSelect extends Component {\r\n//   customStyles = {\r\n//     valueContainer: (provided, state) => ({\r\n//       ...provided,\r\n//       textOverflow: \"ellipsis\",\r\n//       maxWidth: \"90%\",\r\n//       whiteSpace: \"nowrap\",\r\n//       overflow: \"hidden\",\r\n//       display: \"initial\"\r\n//     })\r\n//   };\r\n\r\n//   multiValueContainer = ({ selectProps, data }) => {\r\n//     const label = data.label;\r\n//     const allSelected = selectProps.value;\r\n//     const index = allSelected.findIndex(selected => selected.label === label);\r\n//     const isLastSelected = index === allSelected.length - 1;\r\n//     const labelSuffix = isLastSelected ? ` (${allSelected.length})` : \", \";\r\n//     const val = `${label}${labelSuffix}`;\r\n//     return val;\r\n//   };\r\n\r\n//   render() {\r\n//     const { options, placeholder } = this.props;\r\n//     const {\r\n//       CustomOption,\r\n//       multiValueContainer,\r\n//       customStyles,\r\n//       ValueContainer\r\n//     } = this;\r\n//     return (\r\n//       <Select\r\n//         options={options}\r\n//         isMulti\r\n//         components={{\r\n//           MultiValueContainer: multiValueContainer\r\n//         }}\r\n//         closeMenuOnSelect={false}\r\n//         hideSelectedOptions={false}\r\n//         styles={customStyles}\r\n//         isSearchable={true}\r\n//         placeholder={placeholder}\r\n//       />\r\n//     );\r\n//   }\r\n// }\r\n// MultiSelect.propTypes = {\r\n//   optionGroups: PropTypes.arrayOf(\r\n//     PropTypes.shape({\r\n//       label: PropTypes.string, //for group\r\n//       options: PropTypes.arrayOf(\r\n//         // group options\r\n//         PropTypes.arrayOf(\r\n//           PropTypes.shape({\r\n//             //\r\n//             value: PropTypes.oneOf([\r\n//               PropTypes.string,\r\n//               PropTypes.number,\r\n//               PropTypes.object\r\n//             ]).isRequired,\r\n//             label: PropTypes.string.isRequired\r\n//           })\r\n//         ).isRequired\r\n//       )\r\n//     })\r\n//   )\r\n// };\r\n\r\nconst ValueContainer = ({ children, getValue, ...props }) => {\r\n    var values = getValue();\r\n    var valueLabel = \"\";\r\n  \r\n    if (values.length > 0) valueLabel += props.selectProps.getOptionLabel(values[0]);\r\n    if (values.length > 1) valueLabel += ` & ${values.length - 1} more`;\r\n  \r\n    // Keep standard placeholder and input from react-select\r\n    var childsToRender = React.Children.toArray(children).filter((child) => ['Input', 'DummyInput', 'Placeholder'].indexOf(child.type.name) >= 0);\r\n  \r\n    return (\r\n      <components.ValueContainer {...props}>\r\n        {!props.selectProps.inputValue && valueLabel }\r\n        { childsToRender }\r\n      </components.ValueContainer>\r\n    );\r\n  };\r\n  \r\n  const MultiSelect = (props) => {\r\n      const {options, placeholder} = props\r\n      return (\r\n        <Select\r\n        options={options}\r\n        placeholder={placeholder}\r\n        isMulti\r\n        components={{\r\n          ValueContainer\r\n        }}\r\n        hideSelectedOptions={false}\r\n      />\r\n      )\r\n  }\r\n\r\nexport default MultiSelect"]},"metadata":{},"sourceType":"module"}