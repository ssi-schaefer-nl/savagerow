{"ast":null,"code":"class ManipulationService {\n  constructor(table) {\n    this.prefix = `/api/manipulate/${localStorage.getItem('database')}/${table}`;\n    this.httpHelper = new HttpHelper();\n  }\n\n  addRow(rows, index) {\n    var copyOfRows = [...rows];\n    var newRow = {};\n    Object.keys(rows[0]).forEach(col => {\n      newRow[col] = \"\";\n    });\n    copyOfRows.splice(index, 0, newRow);\n    return copyOfRows;\n  }\n\n  update(rows, newRow, index, onSuccess, onFailure) {\n    this.httpHelper.post(`${this.prefix}/update`, {\n      oldRow: rows[index],\n      newRow: newRow\n    }).then(() => onSuccess(this.updateLocal(rows, newRow, index))).catch(data => onFailure(data.response.data));\n  }\n\n  updateLocal(rows, newRow, index) {\n    var copyOfRows = [...rows];\n    copyOfRows[index] = newRow;\n    return copyOfRows;\n  }\n\n  delete(rows, index, onSuccess, onFailure) {\n    this.httpHelper.post(`${this.prefix}/delete`, {\n      row: rows[index]\n    }).then(() => {\n      var copyOfRows = [...rows];\n      copyOfRows.splice(index, 1);\n      onSuccess(copyOfRows);\n    }).catch(res => onFailure(res.response.data));\n  }\n\n  save(rows, index, onSuccess, onFailure) {\n    this.httpHelper.post(`${this.prefix}/add`, {\n      row: rows[index]\n    }).then(res => {\n      var copyOfRows = [...rows];\n      copyOfRows[index] = res.data.row;\n      onSuccess(copyOfRows);\n    }).catch(res => onFailure(res.response.data));\n  }\n\n}\n\nexport default ManipulationService;","map":{"version":3,"sources":["C:/Users/vincent/git/savagerow/front-end/src/Service/ManipulationService/ManipulationService.js"],"names":["ManipulationService","constructor","table","prefix","localStorage","getItem","httpHelper","HttpHelper","addRow","rows","index","copyOfRows","newRow","Object","keys","forEach","col","splice","update","onSuccess","onFailure","post","oldRow","then","updateLocal","catch","data","response","delete","row","res","save"],"mappings":"AAAA,MAAMA,mBAAN,CAA0B;AACtBC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKC,MAAL,GAAe,mBAAkBC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAiC,IAAGH,KAAM,EAA3E;AACA,SAAKI,UAAL,GAAkB,IAAIC,UAAJ,EAAlB;AACH;;AAEDC,EAAAA,MAAM,CAACC,IAAD,EAAOC,KAAP,EAAc;AAChB,QAAIC,UAAU,GAAG,CAAC,GAAGF,IAAJ,CAAjB;AACA,QAAIG,MAAM,GAAG,EAAb;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYL,IAAI,CAAC,CAAD,CAAhB,EAAqBM,OAArB,CAA6BC,GAAG,IAAI;AAAEJ,MAAAA,MAAM,CAACI,GAAD,CAAN,GAAc,EAAd;AAAkB,KAAxD;AACAL,IAAAA,UAAU,CAACM,MAAX,CAAkBP,KAAlB,EAAyB,CAAzB,EAA4BE,MAA5B;AACA,WAAOD,UAAP;AACH;;AAGDO,EAAAA,MAAM,CAACT,IAAD,EAAOG,MAAP,EAAeF,KAAf,EAAsBS,SAAtB,EAAiCC,SAAjC,EAA4C;AAC9C,SAAKd,UAAL,CAAgBe,IAAhB,CAAsB,GAAE,KAAKlB,MAAO,SAApC,EAA8C;AAAEmB,MAAAA,MAAM,EAAEb,IAAI,CAACC,KAAD,CAAd;AAAuBE,MAAAA,MAAM,EAAEA;AAA/B,KAA9C,EACKW,IADL,CACU,MAAMJ,SAAS,CAAC,KAAKK,WAAL,CAAiBf,IAAjB,EAAuBG,MAAvB,EAA+BF,KAA/B,CAAD,CADzB,EAEKe,KAFL,CAEYC,IAAD,IAAUN,SAAS,CAACM,IAAI,CAACC,QAAL,CAAcD,IAAf,CAF9B;AAGH;;AAEDF,EAAAA,WAAW,CAACf,IAAD,EAAOG,MAAP,EAAeF,KAAf,EAAsB;AAC7B,QAAIC,UAAU,GAAG,CAAC,GAAGF,IAAJ,CAAjB;AACAE,IAAAA,UAAU,CAACD,KAAD,CAAV,GAAoBE,MAApB;AACA,WAAOD,UAAP;AACH;;AAEDiB,EAAAA,MAAM,CAACnB,IAAD,EAAOC,KAAP,EAAcS,SAAd,EAAyBC,SAAzB,EAAoC;AACtC,SAAKd,UAAL,CAAgBe,IAAhB,CAAsB,GAAE,KAAKlB,MAAO,SAApC,EAA8C;AAAE0B,MAAAA,GAAG,EAAEpB,IAAI,CAACC,KAAD;AAAX,KAA9C,EACKa,IADL,CACU,MAAM;AACR,UAAIZ,UAAU,GAAG,CAAC,GAAGF,IAAJ,CAAjB;AACAE,MAAAA,UAAU,CAACM,MAAX,CAAkBP,KAAlB,EAAyB,CAAzB;AACAS,MAAAA,SAAS,CAACR,UAAD,CAAT;AACH,KALL,EAMKc,KANL,CAMWK,GAAG,IAAIV,SAAS,CAACU,GAAG,CAACH,QAAJ,CAAaD,IAAd,CAN3B;AAOH;;AAEDK,EAAAA,IAAI,CAACtB,IAAD,EAAOC,KAAP,EAAcS,SAAd,EAAyBC,SAAzB,EAAoC;AACpC,SAAKd,UAAL,CAAgBe,IAAhB,CAAsB,GAAE,KAAKlB,MAAO,MAApC,EAA2C;AAAE0B,MAAAA,GAAG,EAAEpB,IAAI,CAACC,KAAD;AAAX,KAA3C,EACKa,IADL,CACUO,GAAG,IAAI;AACT,UAAInB,UAAU,GAAG,CAAC,GAAGF,IAAJ,CAAjB;AACAE,MAAAA,UAAU,CAACD,KAAD,CAAV,GAAoBoB,GAAG,CAACJ,IAAJ,CAASG,GAA7B;AACAV,MAAAA,SAAS,CAACR,UAAD,CAAT;AACH,KALL,EAMKc,KANL,CAMWK,GAAG,IAAIV,SAAS,CAACU,GAAG,CAACH,QAAJ,CAAaD,IAAd,CAN3B;AAOH;;AA7CqB;;AA+C1B,eAAe1B,mBAAf","sourcesContent":["class ManipulationService {\r\n    constructor(table) {\r\n        this.prefix = `/api/manipulate/${localStorage.getItem('database')}/${table}`\r\n        this.httpHelper = new HttpHelper();\r\n    }\r\n\r\n    addRow(rows, index) {\r\n        var copyOfRows = [...rows]\r\n        var newRow = {}\r\n        Object.keys(rows[0]).forEach(col => { newRow[col] = \"\" })\r\n        copyOfRows.splice(index, 0, newRow)\r\n        return copyOfRows\r\n    }\r\n\r\n\r\n    update(rows, newRow, index, onSuccess, onFailure) {\r\n        this.httpHelper.post(`${this.prefix}/update`, { oldRow: rows[index], newRow: newRow })\r\n            .then(() => onSuccess(this.updateLocal(rows, newRow, index)))\r\n            .catch((data) => onFailure(data.response.data));\r\n    }\r\n\r\n    updateLocal(rows, newRow, index) {\r\n        var copyOfRows = [...rows]\r\n        copyOfRows[index] = newRow\r\n        return copyOfRows\r\n    }\r\n\r\n    delete(rows, index, onSuccess, onFailure) {\r\n        this.httpHelper.post(`${this.prefix}/delete`, { row: rows[index] })\r\n            .then(() => {\r\n                var copyOfRows = [...rows]\r\n                copyOfRows.splice(index, 1)\r\n                onSuccess(copyOfRows)\r\n            })\r\n            .catch(res => onFailure(res.response.data));\r\n    }\r\n\r\n    save(rows, index, onSuccess, onFailure) {\r\n        this.httpHelper.post(`${this.prefix}/add`, { row: rows[index] })\r\n            .then(res => {\r\n                var copyOfRows = [...rows]\r\n                copyOfRows[index] = res.data.row\r\n                onSuccess(copyOfRows)\r\n            })\r\n            .catch(res => onFailure(res.response.data));\r\n    }\r\n}\r\nexport default ManipulationService"]},"metadata":{},"sourceType":"module"}