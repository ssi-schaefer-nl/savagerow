{"ast":null,"code":"import TableService from '../../Service/TableService';\n\nclass TableManager {\n  constructor(table) {\n    this.table = table;\n    this.tableService = new TableService();\n  }\n\n  getRowSet(onSuccess, onFailure) {\n    this.tableService.getRowsOfTable(this.table, onSuccess, onFailure);\n  }\n\n  getSchema(onSuccess, onFailure) {\n    this.tableService.getSchemaOfTable(this.table, onSuccess, onFailure);\n  }\n\n  addRow(rows, index) {\n    var copyOfRows = [...rows];\n    var newRow = {};\n    Object.keys(rows[0]).forEach(col => {\n      newRow[col] = \"\";\n    });\n    copyOfRows.splice(index, 0, newRow);\n    return copyOfRows;\n  } // update(updatedRow, index) {\n  //     var oldRow = this.rows[index]\n  //     var newRowSet = [...this.rows]\n  //     var rowUpdateData = { oldRow: oldRow, newRow: updatedRow }\n  //     this.tableService.addRowToTable(\n  //         this.table,\n  //         rowUpdateData,\n  //         function () {\n  //             newRowSet[index] = updatedRow;\n  //             console.debug(\"Added row to database for table \" + this.table)\n  //         }.bind(this),\n  //         function (data) {\n  //             console.debug(\"Error occured during adding row to database for table \" + this.table + \"(\" + data.data + \")\")\n  //         }.bind(this)\n  //     );\n  //     this.rows = newRowSet\n  // }\n\n\n  delete(rows, index, onSuccess, onFailure) {\n    this.tableService.deleteRowOfTable(this.table, {\n      row: rows[index]\n    }, () => {\n      var copyOfRows = [...rows];\n      copyOfRows.splice(index, 1);\n      onSuccess(copyOfRows);\n    }, data => onFailure(data.data));\n  }\n\n  save(rows, index, onSuccess, onFailure) {\n    this.tableService.addRowToTable(this.table, {\n      row: rows[index]\n    }, data => {\n      var copyOfRows = Object.assign([], rows, {\n        index: data.data.row\n      });\n      onSuccess(copyOfRows);\n    }, data => onFailure(data.data));\n  } // deleteRowFromLocalTable(index) {\n  //     var newRowSet = [...this.rows]\n  //     newRowSet.splice(index, 1)\n  //     this.rows = newRowSet;\n  //     this.updateUnsynchronizedRowsAfterDeletion(index);\n  // }\n\n\n}\n\nexport default TableManager;","map":{"version":3,"sources":["C:/Users/vincent/git/savagerow/front-end/src/Components/Table/TableManager.js"],"names":["TableService","TableManager","constructor","table","tableService","getRowSet","onSuccess","onFailure","getRowsOfTable","getSchema","getSchemaOfTable","addRow","rows","index","copyOfRows","newRow","Object","keys","forEach","col","splice","delete","deleteRowOfTable","row","data","save","addRowToTable","assign"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,4BAAzB;;AAGA,MAAMC,YAAN,CAAmB;AACfC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,YAAL,GAAoB,IAAIJ,YAAJ,EAApB;AACH;;AAEDK,EAAAA,SAAS,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC5B,SAAKH,YAAL,CAAkBI,cAAlB,CAAiC,KAAKL,KAAtC,EAA6CG,SAA7C,EAAwDC,SAAxD;AACH;;AAEDE,EAAAA,SAAS,CAACH,SAAD,EAAYC,SAAZ,EAAuB;AAC5B,SAAKH,YAAL,CAAkBM,gBAAlB,CAAmC,KAAKP,KAAxC,EAA+CG,SAA/C,EAA0DC,SAA1D;AACH;;AAEDI,EAAAA,MAAM,CAACC,IAAD,EAAOC,KAAP,EAAc;AAChB,QAAIC,UAAU,GAAG,CAAC,GAAGF,IAAJ,CAAjB;AACA,QAAIG,MAAM,GAAG,EAAb;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYL,IAAI,CAAC,CAAD,CAAhB,EAAqBM,OAArB,CAA6BC,GAAG,IAAI;AAAEJ,MAAAA,MAAM,CAACI,GAAD,CAAN,GAAc,EAAd;AAAkB,KAAxD;AACAL,IAAAA,UAAU,CAACM,MAAX,CAAkBP,KAAlB,EAAyB,CAAzB,EAA4BE,MAA5B;AACA,WAAOD,UAAP;AACH,GApBc,CAuBf;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEAO,EAAAA,MAAM,CAACT,IAAD,EAAOC,KAAP,EAAcP,SAAd,EAAyBC,SAAzB,EAAoC;AACtC,SAAKH,YAAL,CAAkBkB,gBAAlB,CACI,KAAKnB,KADT,EAEI;AAAEoB,MAAAA,GAAG,EAAEX,IAAI,CAACC,KAAD;AAAX,KAFJ,EAGI,MAAM;AACF,UAAIC,UAAU,GAAG,CAAC,GAAGF,IAAJ,CAAjB;AACAE,MAAAA,UAAU,CAACM,MAAX,CAAkBP,KAAlB,EAAyB,CAAzB;AACAP,MAAAA,SAAS,CAACQ,UAAD,CAAT;AACH,KAPL,EAQKU,IAAD,IAAUjB,SAAS,CAACiB,IAAI,CAACA,IAAN,CARvB;AAUH;;AAEDC,EAAAA,IAAI,CAACb,IAAD,EAAOC,KAAP,EAAcP,SAAd,EAAyBC,SAAzB,EAAoC;AACpC,SAAKH,YAAL,CAAkBsB,aAAlB,CACI,KAAKvB,KADT,EAEI;AAAEoB,MAAAA,GAAG,EAAEX,IAAI,CAACC,KAAD;AAAX,KAFJ,EAGKW,IAAD,IAAU;AACN,UAAIV,UAAU,GAAGE,MAAM,CAACW,MAAP,CAAc,EAAd,EAAkBf,IAAlB,EAAwB;AAAEC,QAAAA,KAAK,EAAEW,IAAI,CAACA,IAAL,CAAUD;AAAnB,OAAxB,CAAjB;AACAjB,MAAAA,SAAS,CAACQ,UAAD,CAAT;AACH,KANL,EAOKU,IAAD,IAAUjB,SAAS,CAACiB,IAAI,CAACA,IAAN,CAPvB;AASH,GAlEc,CAoEf;AACA;AACA;AACA;AACA;AACA;;;AAzEe;;AA4EnB,eAAevB,YAAf","sourcesContent":["import TableService from '../../Service/TableService';\r\n\r\n\r\nclass TableManager {\r\n    constructor(table) {\r\n        this.table = table\r\n        this.tableService = new TableService()\r\n    }\r\n\r\n    getRowSet(onSuccess, onFailure) {\r\n        this.tableService.getRowsOfTable(this.table, onSuccess, onFailure)\r\n    }\r\n\r\n    getSchema(onSuccess, onFailure) {\r\n        this.tableService.getSchemaOfTable(this.table, onSuccess, onFailure)\r\n    }\r\n\r\n    addRow(rows, index) {\r\n        var copyOfRows = [...rows]\r\n        var newRow = {}\r\n        Object.keys(rows[0]).forEach(col => { newRow[col] = \"\" })\r\n        copyOfRows.splice(index, 0, newRow)\r\n        return copyOfRows\r\n    }\r\n\r\n\r\n    // update(updatedRow, index) {\r\n    //     var oldRow = this.rows[index]\r\n    //     var newRowSet = [...this.rows]\r\n    //     var rowUpdateData = { oldRow: oldRow, newRow: updatedRow }\r\n\r\n    //     this.tableService.addRowToTable(\r\n    //         this.table,\r\n    //         rowUpdateData,\r\n    //         function () {\r\n    //             newRowSet[index] = updatedRow;\r\n    //             console.debug(\"Added row to database for table \" + this.table)\r\n    //         }.bind(this),\r\n    //         function (data) {\r\n    //             console.debug(\"Error occured during adding row to database for table \" + this.table + \"(\" + data.data + \")\")\r\n    //         }.bind(this)\r\n    //     );\r\n\r\n    //     this.rows = newRowSet\r\n    // }\r\n\r\n    delete(rows, index, onSuccess, onFailure) {\r\n        this.tableService.deleteRowOfTable(\r\n            this.table,\r\n            { row: rows[index] },\r\n            () => {\r\n                var copyOfRows = [...rows]\r\n                copyOfRows.splice(index, 1)\r\n                onSuccess(copyOfRows)\r\n            },\r\n            (data) => onFailure(data.data)\r\n        )\r\n    }\r\n\r\n    save(rows, index, onSuccess, onFailure) {\r\n        this.tableService.addRowToTable(\r\n            this.table,\r\n            { row: rows[index] },\r\n            (data) => {\r\n                var copyOfRows = Object.assign([], rows, { index: data.data.row })\r\n                onSuccess(copyOfRows)\r\n            },\r\n            (data) => onFailure(data.data)\r\n        )\r\n    }\r\n\r\n    // deleteRowFromLocalTable(index) {\r\n    //     var newRowSet = [...this.rows]\r\n    //     newRowSet.splice(index, 1)\r\n    //     this.rows = newRowSet;\r\n    //     this.updateUnsynchronizedRowsAfterDeletion(index);\r\n    // }\r\n\r\n}\r\nexport default TableManager"]},"metadata":{},"sourceType":"module"}