{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { DragSource } from 'react-dnd';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DragItemTypes } from 'react-data-grid';\n\nvar DraggableHeaderCell =\n/** @class */\nfunction (_super) {\n  __extends(DraggableHeaderCell, _super);\n\n  function DraggableHeaderCell() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DraggableHeaderCell.prototype.componentDidMount = function () {\n    var connectDragPreview = this.props.connectDragPreview;\n    var img = new Image();\n    img.src = './assets/images/drag_column_full.png';\n\n    img.onload = function () {\n      return connectDragPreview(img);\n    };\n  };\n\n  DraggableHeaderCell.prototype.render = function () {\n    var _a = this.props,\n        connectDragSource = _a.connectDragSource,\n        isDragging = _a.isDragging;\n\n    if (isDragging) {\n      return null;\n    }\n\n    return connectDragSource(React.createElement(\"div\", {\n      className: \"rdg-draggable-header-cell\"\n    }, this.props.children));\n  };\n\n  DraggableHeaderCell.propTypes = {\n    connectDragSource: PropTypes.func.isRequired,\n    connectDragPreview: PropTypes.func.isRequired,\n    isDragging: PropTypes.bool.isRequired,\n    children: PropTypes.element.isRequired\n  };\n  return DraggableHeaderCell;\n}(Component);\n\nfunction collect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n    connectDragPreview: connect.dragPreview()\n  };\n}\n\nvar headerCellSource = {\n  beginDrag: function (props) {\n    return props.column;\n  },\n  endDrag: function (props) {\n    return props.column;\n  }\n};\nexport default DragSource(DragItemTypes.Column, headerCellSource, collect)(DraggableHeaderCell);","map":{"version":3,"sources":["../../src/draggable/DraggableHeaderCell.js"],"names":[],"mappings":";AAAA,SAAS,UAAT,QAA2B,WAA3B;AACA,OAAO,KAAP,IAAgB,SAAhB,QAAiC,OAAjC;AACA,OAAO,SAAP,MAAsB,YAAtB;AACA,SAAS,aAAT,QAA8B,iBAA9B;;AAEA,IAAA,mBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkC,EAAA,SAAA,CAAA,mBAAA,EAAA,MAAA,CAAA;;AAAlC,WAAA,mBAAA,GAAA;;AAsBC;;AAdC,EAAA,mBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,YAAA;AACU,QAAA,kBAAA,GAAA,KAAA,KAAA,CAAA,kBAAA;AACR,QAAM,GAAG,GAAG,IAAI,KAAJ,EAAZ;AACA,IAAA,GAAG,CAAC,GAAJ,GAAU,sCAAV;;AACA,IAAA,GAAG,CAAC,MAAJ,GAAa,YAAA;AAAM,aAAA,kBAAkB,CAAlB,GAAkB,CAAlB;AAAuB,KAA1C;AACD,GALD;;AAOA,EAAA,mBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACQ,QAAA,EAAA,GAAA,KAAA,KAAA;AAAA,QAAE,iBAAA,GAAA,EAAA,CAAA,iBAAF;AAAA,QAAqB,UAAA,GAAA,EAAA,CAAA,UAArB;;AACN,QAAI,UAAJ,EAAgB;AACd,aAAO,IAAP;AACD;;AACD,WAAO,iBAAiB,CAAC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAC;AAAf,KAAA,EAA4C,KAAK,KAAL,CAAW,QAAvD,CAAD,CAAxB;AACD,GAND;;AAdO,EAAA,mBAAA,CAAA,SAAA,GAAY;AACjB,IAAA,iBAAiB,EAAE,SAAS,CAAC,IAAV,CAAe,UADjB;AAEjB,IAAA,kBAAkB,EAAE,SAAS,CAAC,IAAV,CAAe,UAFlB;AAGjB,IAAA,UAAU,EAAE,SAAS,CAAC,IAAV,CAAe,UAHV;AAIjB,IAAA,QAAQ,EAAE,SAAS,CAAC,OAAV,CAAkB;AAJX,GAAZ;AAqBT,SAAA,mBAAA;AAAC,CAtBD,CAAkC,SAAlC,CAAA;;AAwBA,SAAS,OAAT,CAAiB,OAAjB,EAA0B,OAA1B,EAAiC;AAC/B,SAAO;AACL,IAAA,iBAAiB,EAAE,OAAO,CAAC,UAAR,EADd;AAEL,IAAA,UAAU,EAAE,OAAO,CAAC,UAAR,EAFP;AAGL,IAAA,kBAAkB,EAAE,OAAO,CAAC,WAAR;AAHf,GAAP;AAKD;;AAED,IAAM,gBAAgB,GAAG;AACvB,EAAA,SAAS,EAAA,UAAC,KAAD,EAAM;AACb,WAAO,KAAK,CAAC,MAAb;AACD,GAHsB;AAIvB,EAAA,OAAO,EAAA,UAAC,KAAD,EAAM;AACX,WAAO,KAAK,CAAC,MAAb;AACD;AANsB,CAAzB;AASA,eAAe,UAAU,CAAC,aAAa,CAAC,MAAf,EAAuB,gBAAvB,EAAyC,OAAzC,CAAV,CAA4D,mBAA5D,CAAf","sourcesContent":["import { DragSource } from 'react-dnd';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DragItemTypes } from 'react-data-grid';\n\nclass DraggableHeaderCell extends Component {\n  static propTypes = {\n    connectDragSource: PropTypes.func.isRequired,\n    connectDragPreview: PropTypes.func.isRequired,\n    isDragging: PropTypes.bool.isRequired,\n    children: PropTypes.element.isRequired\n  };\n\n  componentDidMount() {\n    const { connectDragPreview } = this.props;\n    const img = new Image();\n    img.src = './assets/images/drag_column_full.png';\n    img.onload = () => connectDragPreview(img);\n  }\n\n  render() {\n    const { connectDragSource, isDragging } = this.props;\n    if (isDragging) {\n      return null;\n    }\n    return connectDragSource(<div className=\"rdg-draggable-header-cell\">{this.props.children}</div>);\n  }\n}\n\nfunction collect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n    connectDragPreview: connect.dragPreview()\n  };\n}\n\nconst headerCellSource = {\n  beginDrag(props) {\n    return props.column;\n  },\n  endDrag(props) {\n    return props.column;\n  }\n};\n\nexport default DragSource(DragItemTypes.Column, headerCellSource, collect)(DraggableHeaderCell);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}