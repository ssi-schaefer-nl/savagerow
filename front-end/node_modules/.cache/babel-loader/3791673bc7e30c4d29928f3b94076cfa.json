{"ast":null,"code":"import { __extends } from \"tslib\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport html5DragDropContext from '../shared/html5DragDropContext';\nimport DraggableHeaderCell from './DraggableHeaderCell';\nimport RowDragLayer from './RowDragLayer';\n\nvar DraggableContainer =\n/** @class */\nfunction (_super) {\n  __extends(DraggableContainer, _super);\n\n  function DraggableContainer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DraggableContainer.prototype.getRows = function (rowsCount, rowGetter) {\n    var rows = [];\n\n    for (var j = 0; j < rowsCount; j++) {\n      rows.push(rowGetter(j));\n    }\n\n    return rows;\n  };\n\n  DraggableContainer.prototype.renderGrid = function () {\n    return React.cloneElement(React.Children.only(this.props.children), {\n      draggableHeaderCell: DraggableHeaderCell\n    });\n  };\n\n  DraggableContainer.prototype.render = function () {\n    var grid = this.renderGrid();\n    var rowGetter = this.props.getDragPreviewRow || grid.props.rowGetter;\n    var _a = grid.props,\n        rowsCount = _a.rowsCount,\n        columns = _a.columns;\n    var rows = this.getRows(rowsCount, rowGetter);\n    return React.createElement(\"div\", null, grid, React.createElement(RowDragLayer, {\n      selectedRows: grid.props.selectedRows,\n      rows: rows,\n      columns: columns\n    }));\n  };\n\n  DraggableContainer.propTypes = {\n    children: PropTypes.element.isRequired,\n    getDragPreviewRow: PropTypes.func\n  };\n  return DraggableContainer;\n}(Component);\n\nexport default html5DragDropContext(DraggableContainer);","map":{"version":3,"sources":["../../src/draggable/DragDropContainer.js"],"names":[],"mappings":";AAAA,OAAO,KAAP,IAAgB,SAAhB,QAAiC,OAAjC;AACA,OAAO,SAAP,MAAsB,YAAtB;AAEA,OAAO,oBAAP,MAAiC,gCAAjC;AACA,OAAO,mBAAP,MAAgC,uBAAhC;AACA,OAAO,YAAP,MAAyB,gBAAzB;;AAEA,IAAA,kBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAiC,EAAA,SAAA,CAAA,kBAAA,EAAA,MAAA,CAAA;;AAAjC,WAAA,kBAAA,GAAA;;AAsCC;;AAhCC,EAAA,kBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,SAAR,EAAmB,SAAnB,EAA4B;AAC1B,QAAM,IAAI,GAAG,EAAb;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,CAAC,EAAhC,EAAoC;AAClC,MAAA,IAAI,CAAC,IAAL,CAAU,SAAS,CAAC,CAAD,CAAnB;AACD;;AACD,WAAO,IAAP;AACD,GAND;;AAQA,EAAA,kBAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;AACE,WAAO,KAAK,CAAC,YAAN,CACL,KAAK,CAAC,QAAN,CAAe,IAAf,CAAoB,KAAK,KAAL,CAAW,QAA/B,CADK,EACqC;AACxC,MAAA,mBAAmB,EAAE;AADmB,KADrC,CAAP;AAKD,GAND;;AAQA,EAAA,kBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,QAAM,IAAI,GAAG,KAAK,UAAL,EAAb;AACA,QAAM,SAAS,GAAG,KAAK,KAAL,CAAW,iBAAX,IAAgC,IAAI,CAAC,KAAL,CAAW,SAA7D;AACM,QAAA,EAAA,GAAA,IAAA,CAAA,KAAA;AAAA,QAAE,SAAA,GAAA,EAAA,CAAA,SAAF;AAAA,QAAa,OAAA,GAAA,EAAA,CAAA,OAAb;AACN,QAAM,IAAI,GAAG,KAAK,OAAL,CAAa,SAAb,EAAwB,SAAxB,CAAb;AACA,WACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EACG,IADH,EAEE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AACX,MAAA,YAAY,EAAE,IAAI,CAAC,KAAL,CAAW,YADd;AAEX,MAAA,IAAI,EAAE,IAFK;AAGX,MAAA,OAAO,EAAE;AAHE,KAAb,CAFF,CADF;AAUD,GAfD;;AArBO,EAAA,kBAAA,CAAA,SAAA,GAAY;AACjB,IAAA,QAAQ,EAAE,SAAS,CAAC,OAAV,CAAkB,UADX;AAEjB,IAAA,iBAAiB,EAAE,SAAS,CAAC;AAFZ,GAAZ;AAqCT,SAAA,kBAAA;AAAC,CAtCD,CAAiC,SAAjC,CAAA;;AAwCA,eAAe,oBAAoB,CAAC,kBAAD,CAAnC","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport html5DragDropContext from '../shared/html5DragDropContext';\nimport DraggableHeaderCell from './DraggableHeaderCell';\nimport RowDragLayer from './RowDragLayer';\n\nclass DraggableContainer extends Component {\n  static propTypes = {\n    children: PropTypes.element.isRequired,\n    getDragPreviewRow: PropTypes.func\n  };\n\n  getRows(rowsCount, rowGetter) {\n    const rows = [];\n    for (let j = 0; j < rowsCount; j++) {\n      rows.push(rowGetter(j));\n    }\n    return rows;\n  }\n\n  renderGrid() {\n    return React.cloneElement(\n      React.Children.only(this.props.children), {\n        draggableHeaderCell: DraggableHeaderCell\n      }\n    );\n  }\n\n  render() {\n    const grid = this.renderGrid();\n    const rowGetter = this.props.getDragPreviewRow || grid.props.rowGetter;\n    const { rowsCount, columns } = grid.props;\n    const rows = this.getRows(rowsCount, rowGetter);\n    return (\n      <div>\n        {grid}\n        <RowDragLayer\n          selectedRows={grid.props.selectedRows}\n          rows={rows}\n          columns={columns}\n        />\n      </div>\n    );\n  }\n}\n\nexport default html5DragDropContext(DraggableContainer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}