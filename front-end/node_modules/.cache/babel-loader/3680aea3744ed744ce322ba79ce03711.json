{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\playground\\\\src\\\\Components\\\\Tables\\\\SavageTable.js\";\nimport React from \"react\";\nimport ReactDataGrid, { TextEditor } from \"react-data-grid\";\nimport \"./styles.css\";\nimport TableDataService from '../../Service/TableDataServices';\nimport { CircularProgress } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Example extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rows: [],\n      loading: true,\n      tableDataService: new TableDataService(),\n      columns: []\n    };\n\n    this.onGridRowsUpdated = ({\n      fromRow,\n      toRow,\n      updated\n    }) => {\n      this.setState(state => {\n        const rows = state.rows.slice();\n\n        for (let i = fromRow; i <= toRow; i++) {\n          rows[i] = { ...rows[i],\n            ...updated\n          };\n        }\n\n        return {\n          rows\n        };\n      });\n    };\n\n    this.rowsChanged = (rows, index) => {\n      var rowIdx = index.indexes[0];\n      var oldRow = this.state.rows[rowIdx];\n      var changedRow = this.getChanges(this.state.rows, rows)[0];\n      var data = [{\n        old: oldRow,\n        new: changedRow\n      }];\n      this.state.tableDataService.updateTableData(this.props.table, data, function (data) {\n        var rows = this.state.rows;\n        rows[rowId] = changedRow;\n        this.setState({\n          rows: rows\n        }); // this.state.rows[rowIdx] = changedRow;\n        // this.forceUpdate();\n      }.bind(this), function (data) {\n        console.log(data);\n      }.bind(this));\n    };\n\n    this.getChanges = (originalArray, newArray) => newArray.filter((newRow, index) => originalArray[index] !== newRow);\n  }\n\n  componentDidMount() {\n    this.state.tableDataService.getTableData(this.props.table, function (data) {\n      this.setState({\n        columns: this.createColumns(data.data[0])\n      });\n      this.setState({\n        rows: this.createData(data.data)\n      });\n      this.setState({\n        loading: false\n      });\n    }.bind(this), function (data) {\n      console.log(data);\n      this.setState({\n        loading: false\n      });\n    }.bind(this));\n  }\n\n  createColumns(row) {\n    return Object.keys(row).map(header => ({\n      key: header,\n      name: header,\n      editor: TextEditor,\n      resizable: true\n    }));\n  }\n\n  createData(rows) {\n    return rows.map((row, index) => {\n      // row.key = index;\n      return row;\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(ReactDataGrid, {\n      columns: this.state.columns,\n      rows: this.state.rows,\n      rowGetter: i => this.state.rows[i],\n      onGridRowsUpdated: this.onGridRowsUpdated,\n      onRowsChange: this.rowsChanged,\n      enableCellSelect: false,\n      style: {\n        resize: 'both',\n        'height': \"70vh\",\n        maxWidth: \"100%\"\n      },\n      className: \"fill-grid\",\n      minHeight: \"1000\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Example;","map":{"version":3,"sources":["C:/Users/vincent/git/playground/src/Components/Tables/SavageTable.js"],"names":["React","ReactDataGrid","TextEditor","TableDataService","CircularProgress","Example","Component","state","rows","loading","tableDataService","columns","onGridRowsUpdated","fromRow","toRow","updated","setState","slice","i","rowsChanged","index","rowIdx","indexes","oldRow","changedRow","getChanges","data","old","new","updateTableData","props","table","rowId","bind","console","log","originalArray","newArray","filter","newRow","componentDidMount","getTableData","createColumns","createData","row","Object","keys","map","header","key","name","editor","resizable","render","resize","maxWidth"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport ReactDataGrid, { TextEditor } from \"react-data-grid\";\r\nimport \"./styles.css\";\r\nimport TableDataService from '../../Service/TableDataServices';\r\nimport { CircularProgress } from \"@material-ui/core\";\r\n\r\n\r\nclass Example extends React.Component {\r\n    componentDidMount() {\r\n        this.state.tableDataService.getTableData(this.props.table,\r\n            function (data) {\r\n                this.setState({ columns: this.createColumns(data.data[0]) })\r\n                this.setState({ rows: this.createData(data.data) })\r\n                this.setState({ loading: false })\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n                this.setState({ loading: false })\r\n            }.bind(this));\r\n\r\n    }\r\n\r\n    createColumns(row) {\r\n        return Object.keys(row).map(header => (\r\n            {\r\n                key: header,\r\n                name: header,\r\n                editor: TextEditor,\r\n                resizable: true\r\n            }));\r\n    }\r\n\r\n    createData(rows) {\r\n        return rows.map((row, index) => {\r\n            // row.key = index;\r\n            return row;\r\n        });\r\n    }\r\n\r\n    state = {\r\n        rows: [],\r\n        loading: true,\r\n        tableDataService: new TableDataService(),\r\n        columns: []\r\n    };\r\n\r\n\r\n    onGridRowsUpdated = ({ fromRow, toRow, updated }) => {\r\n        this.setState(state => {\r\n            const rows = state.rows.slice();\r\n            for (let i = fromRow; i <= toRow; i++) {\r\n                rows[i] = { ...rows[i], ...updated };\r\n            }\r\n            return { rows };\r\n        });\r\n    };\r\n\r\n    rowsChanged = (rows, index) => {\r\n        var rowIdx = index.indexes[0];\r\n        var oldRow = this.state.rows[rowIdx];\r\n        var changedRow = this.getChanges(this.state.rows, rows)[0];\r\n        \r\n        var data = [\r\n            {\r\n                old: oldRow,\r\n                new: changedRow\r\n            }\r\n        ]\r\n        this.state.tableDataService.updateTableData(this.props.table, data,\r\n            function(data) {\r\n                var rows = this.state.rows;\r\n                rows[rowId] = changedRow;\r\n                this.setState({rows: rows})\r\n                // this.state.rows[rowIdx] = changedRow;\r\n                // this.forceUpdate();\r\n            }.bind(this),\r\n            function(data) {\r\n                console.log(data)\r\n            }.bind(this));\r\n    }\r\n\r\n    getChanges = (originalArray, newArray) => newArray.filter((newRow, index) => originalArray[index] !== newRow);\r\n\r\n    render() {\r\n        if (this.state.loading) {\r\n            return (<CircularProgress />)\r\n        }\r\n\r\n        return (\r\n            <ReactDataGrid\r\n                columns={this.state.columns}\r\n                rows={this.state.rows}\r\n                rowGetter={i => this.state.rows[i]}\r\n                onGridRowsUpdated={this.onGridRowsUpdated}\r\n                onRowsChange={this.rowsChanged}\r\n                enableCellSelect={false}\r\n                style={{ resize: 'both', 'height': \"70vh\", maxWidth: \"100%\" }}\r\n                className=\"fill-grid\"\r\n                minHeight=\"1000\"\r\n\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example;"]},"metadata":{},"sourceType":"module"}