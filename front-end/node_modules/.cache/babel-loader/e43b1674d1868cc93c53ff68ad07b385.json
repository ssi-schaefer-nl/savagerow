{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\playground\\\\src\\\\Components\\\\Tables\\\\SavageTable.js\";\nimport React from \"react\";\nimport DataGrid, { TextEditor } from \"react-data-grid\";\nimport \"./styles.css\";\nimport TableDataService from '../../Service/TableDataServices';\nimport { CircularProgress } from \"@material-ui/core\";\nimport { Colorize } from \"@material-ui/icons\";\nimport Alert from '@material-ui/lab/Alert';\nimport IconButton from '@material-ui/core/IconButton';\nimport Collapse from '@material-ui/core/Collapse';\nimport Button from '@material-ui/core/Button';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Example extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rows: [],\n      rowStagedForInsertion: -1,\n      newRows: [],\n      columns: [],\n      loading: true,\n      selectedRow: -1,\n      tableDataService: new TableDataService()\n    };\n\n    this.handleClick = e => {\n      if (e.type === 'contextmenu') {\n        e.preventDefault();\n        this.insertEmptyRow(this.state.selectedRow);\n      }\n    };\n\n    this.handleCellChange = c => {\n      if (this.shouldProcessStagedRowInsert(c.rowIdx)) {\n        console.log(\"Changed row selection and a row is staged for insertion\");\n        this.addRow(this.state.rowStagedForInsertion);\n      }\n\n      this.state.selectedRow = c.rowIdx;\n    };\n\n    this.insertEmptyRow = idx => {\n      var emptyRow = {};\n      this.state.columns.forEach(col => {\n        emptyRow[col.key] = \"\";\n      });\n      var data = this.state.rows;\n\n      if (idx == -1) {\n        data.push(emptyRow);\n      } else {\n        data.splice(idx, 0, emptyRow); //Insert empty row at index idx\n      }\n\n      this.setState({\n        rows: data\n      });\n      this.state.newRows.push(idx);\n    };\n\n    this.rowsChanged = (rows, index) => {\n      var indexOfChangedRow = index.indexes[0];\n      var oldInstanceOfChangedRow = this.state.rows[indexOfChangedRow];\n      var newInstanceOfChangedRow = rows[indexOfChangedRow];\n\n      if (!this.state.newRows.includes(indexOfChangedRow)) {\n        //Changed row is not new, so we can update right away\n        this.updateRow(oldInstanceOfChangedRow, newInstanceOfChangedRow, indexOfChangedRow);\n      } else {\n        // Row is new, so we store locally and wait for a change in row before pushing the new row\n        this.setState({\n          rowStagedForInsertion: indexOfChangedRow\n        });\n        var rows = this.state.rows;\n        rows[indexOfChangedRow] = newInstanceOfChangedRow;\n        this.setState({\n          rows: rows\n        });\n      }\n    };\n\n    this.addRow = indexOfChangedRow => {\n      var data = {\n        newRow: this.state.rows[indexOfChangedRow]\n      };\n      console.log(data);\n      var newRowsEntryIndex = this.state.newRows.indexOf(indexOfChangedRow);\n      this.state.tableDataService.addTableData(this.props.table, data, function (data) {\n        this.state.newRows.splice(newRowsEntryIndex, 1); // Unmark row as new\n      }.bind(this), function (data) {\n        console.log(data);\n      }.bind(this));\n      this.setState({\n        rowStagedForInsertion: -1\n      }); // unset the row as staged for insertion \n    };\n\n    this.updateRow = (oldRow, newRow, index) => {\n      var data = [{\n        oldRow: oldRow,\n        newRow: newRow\n      }];\n      this.state.tableDataService.updateTableData(this.props.table, data, function (data) {\n        var rows = this.state.rows;\n        rows[index] = newRow;\n        this.setState({\n          rows: rows\n        });\n      }.bind(this), function (data) {\n        console.log(data);\n      }.bind(this));\n    };\n  }\n\n  componentDidMount() {\n    this.loadTableData();\n  }\n\n  loadTableData() {\n    this.state.tableDataService.getTableData(this.props.table, function (data) {\n      this.setState({\n        columns: this.createColumns(data.data.tableSchema.columns)\n      });\n      this.setState({\n        rows: data.data.data\n      });\n      this.setState({\n        loading: false\n      });\n    }.bind(this), function (data) {\n      console.log(data);\n      this.setState({\n        loading: false\n      });\n    }.bind(this));\n  }\n\n  createColumns(columns) {\n    return columns.map(col => {\n      var def = {\n        key: col.column,\n        name: col.column,\n        resizable: true,\n        nullable: col.nullable\n      };\n\n      if (col.editable) {\n        def.editor = TextEditor;\n      }\n\n      return def;\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      onContextMenu: this.handleClick,\n      children: [this.state.alert && /*#__PURE__*/_jsxDEV(Collapse, {\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          severity: this.state.alert.severity,\n          action: /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"close\",\n            color: \"inherit\",\n            size: \"small\",\n            onClick: () => {\n              this.setState({\n                alert: null\n              });\n            },\n            children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n              fontSize: \"inherit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 33\n          }, this),\n          children: this.state.alert.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(DataGrid, {\n        columns: this.state.columns,\n        rows: this.state.rows,\n        rowGetter: i => this.state.rows[i],\n        onRowsChange: this.rowsChanged,\n        enableCellSelect: true,\n        style: {\n          resize: 'both',\n          'height': \"70vh\",\n          maxWidth: \"100%\"\n        },\n        className: \"fill-grid\",\n        minHeight: \"1000\",\n        onSelectedCellChange: this.handleCellChange,\n        on: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this);\n  }\n\n  shouldProcessStagedRowInsert(rowIdx) {\n    if (rowIdx != this.state.selectedRow && this.state.rowStagedForInsertion != -1) {\n      // Changed row selection and a row is staged for insertion\n      var row = this.state.rows[this.state.rowStagedForInsertion];\n      var colsRequiringValue = this.state.columns.filter(col => {\n        if (!col.nullable && col.editor && !row[col.key]) {\n          return col.key;\n        }\n      });\n\n      if (colsRequiringValue.length == 0) {\n        return true;\n      }\n\n      alert = {\n        severity: \"warning\",\n        message: \"The following columns require a value!\" + colsRequiringValue.map(col => col.name)\n      };\n      this.setState({\n        alert: alert\n      });\n      console.log(alert);\n    }\n\n    return false;\n  }\n\n}\n\nexport default Example;","map":{"version":3,"sources":["C:/Users/vincent/git/playground/src/Components/Tables/SavageTable.js"],"names":["React","DataGrid","TextEditor","TableDataService","CircularProgress","Colorize","Alert","IconButton","Collapse","Button","CloseIcon","Example","Component","state","rows","rowStagedForInsertion","newRows","columns","loading","selectedRow","tableDataService","handleClick","e","type","preventDefault","insertEmptyRow","handleCellChange","c","shouldProcessStagedRowInsert","rowIdx","console","log","addRow","idx","emptyRow","forEach","col","key","data","push","splice","setState","rowsChanged","index","indexOfChangedRow","indexes","oldInstanceOfChangedRow","newInstanceOfChangedRow","includes","updateRow","newRow","newRowsEntryIndex","indexOf","addTableData","props","table","bind","oldRow","updateTableData","componentDidMount","loadTableData","getTableData","createColumns","tableSchema","map","def","column","name","resizable","nullable","editable","editor","render","alert","severity","message","i","resize","maxWidth","row","colsRequiringValue","filter","length"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport DataGrid, { TextEditor } from \"react-data-grid\";\r\nimport \"./styles.css\";\r\nimport TableDataService from '../../Service/TableDataServices';\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport { Colorize } from \"@material-ui/icons\";\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Button from '@material-ui/core/Button';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nclass Example extends React.Component {\r\n\r\n    state = {\r\n        rows: [],\r\n        rowStagedForInsertion: -1,\r\n        newRows: [],\r\n        columns: [],\r\n        loading: true,\r\n        selectedRow: -1,\r\n        tableDataService: new TableDataService(),\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.loadTableData()\r\n    }\r\n\r\n    loadTableData() {\r\n        this.state.tableDataService.getTableData(this.props.table,\r\n            function (data) {\r\n                this.setState({ columns: this.createColumns(data.data.tableSchema.columns) })\r\n                this.setState({ rows: data.data.data })\r\n                this.setState({ loading: false })\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n                this.setState({ loading: false })\r\n            }.bind(this));\r\n    }\r\n\r\n    createColumns(columns) {\r\n        return columns.map(col => {\r\n            var def = {\r\n                key: col.column,\r\n                name: col.column,\r\n                resizable: true,\r\n                nullable: col.nullable\r\n            }\r\n            if (col.editable) {\r\n                def.editor = TextEditor\r\n            }\r\n            return def;\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.state.loading) {\r\n            return (<CircularProgress />)\r\n        }\r\n\r\n        return (\r\n            <div onContextMenu={this.handleClick}>\r\n                {this.state.alert &&\r\n                    <Collapse >\r\n                        <Alert\r\n                            severity={this.state.alert.severity}\r\n                            action={\r\n                                <IconButton\r\n                                    aria-label=\"close\"\r\n                                    color=\"inherit\"\r\n                                    size=\"small\"\r\n                                    onClick={() => {\r\n                                        this.setState({alert: null})\r\n                                    }}\r\n                                >\r\n                                    <CloseIcon fontSize=\"inherit\" />\r\n                                </IconButton>\r\n                            }\r\n                        >\r\n                            {this.state.alert.message}\r\n                        </Alert>\r\n                    </Collapse>}\r\n\r\n                <DataGrid\r\n                    columns={this.state.columns}\r\n                    rows={this.state.rows}\r\n                    rowGetter={i => this.state.rows[i]}\r\n                    onRowsChange={this.rowsChanged}\r\n                    enableCellSelect={true}\r\n                    style={{ resize: 'both', 'height': \"70vh\", maxWidth: \"100%\" }}\r\n                    className=\"fill-grid\"\r\n                    minHeight=\"1000\"\r\n                    onSelectedCellChange={this.handleCellChange}\r\n                    on\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        if (e.type === 'contextmenu') {\r\n            e.preventDefault()\r\n            this.insertEmptyRow(this.state.selectedRow)\r\n        }\r\n    }\r\n\r\n\r\n    handleCellChange = (c) => {\r\n        if (this.shouldProcessStagedRowInsert(c.rowIdx)) {\r\n            console.log(\"Changed row selection and a row is staged for insertion\")\r\n            this.addRow(this.state.rowStagedForInsertion)\r\n        }\r\n        this.state.selectedRow = c.rowIdx\r\n    }\r\n\r\n    shouldProcessStagedRowInsert(rowIdx) {\r\n        if (rowIdx != this.state.selectedRow && this.state.rowStagedForInsertion != -1) { // Changed row selection and a row is staged for insertion\r\n\r\n            var row = this.state.rows[this.state.rowStagedForInsertion]\r\n            var colsRequiringValue = this.state.columns.filter(col => {\r\n                if (!col.nullable && col.editor && !row[col.key]) {\r\n                    return col.key\r\n                }\r\n            })\r\n\r\n            if (colsRequiringValue.length == 0) {\r\n                return true\r\n            }\r\n            alert = {\r\n                severity: \"warning\",\r\n                message: \"The following columns require a value!\" + colsRequiringValue.map(col => col.name)\r\n            }\r\n            this.setState({alert: alert})\r\n            console.log(alert)\r\n        }\r\n        return false;\r\n    }\r\n\r\n    insertEmptyRow = (idx) => {\r\n        var emptyRow = {}\r\n        this.state.columns.forEach(col => { emptyRow[col.key] = \"\" })\r\n        var data = this.state.rows\r\n        if (idx == -1) {\r\n            data.push(emptyRow)\r\n        } else {\r\n            data.splice(idx, 0, emptyRow) //Insert empty row at index idx\r\n        }\r\n\r\n        this.setState({ rows: data })\r\n        this.state.newRows.push(idx)\r\n    }\r\n\r\n\r\n    rowsChanged = (rows, index) => {\r\n        var indexOfChangedRow = index.indexes[0];\r\n        var oldInstanceOfChangedRow = this.state.rows[indexOfChangedRow];\r\n        var newInstanceOfChangedRow = rows[indexOfChangedRow];\r\n\r\n        if (!this.state.newRows.includes(indexOfChangedRow)) { //Changed row is not new, so we can update right away\r\n            this.updateRow(oldInstanceOfChangedRow, newInstanceOfChangedRow, indexOfChangedRow)\r\n        }\r\n        else { // Row is new, so we store locally and wait for a change in row before pushing the new row\r\n            this.setState({ rowStagedForInsertion: indexOfChangedRow })\r\n            var rows = this.state.rows;\r\n            rows[indexOfChangedRow] = newInstanceOfChangedRow;\r\n            this.setState({ rows: rows })\r\n        }\r\n\r\n    }\r\n\r\n    addRow = (indexOfChangedRow) => {\r\n\r\n        var data = { newRow: this.state.rows[indexOfChangedRow] }\r\n        console.log(data)\r\n        var newRowsEntryIndex = this.state.newRows.indexOf(indexOfChangedRow)\r\n\r\n        this.state.tableDataService.addTableData(this.props.table, data,\r\n            function (data) {\r\n                this.state.newRows.splice(newRowsEntryIndex, 1); // Unmark row as new\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n            }.bind(this));\r\n\r\n        this.setState({ rowStagedForInsertion: -1 }) // unset the row as staged for insertion \r\n\r\n    }\r\n\r\n    updateRow = (oldRow, newRow, index) => {\r\n        var data = [\r\n            {\r\n                oldRow: oldRow,\r\n                newRow: newRow\r\n            },\r\n        ]\r\n\r\n        this.state.tableDataService.updateTableData(this.props.table, data,\r\n            function (data) {\r\n                var rows = this.state.rows;\r\n                rows[index] = newRow;\r\n                this.setState({ rows: rows })\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n            }.bind(this));\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Example;"]},"metadata":{},"sourceType":"module"}