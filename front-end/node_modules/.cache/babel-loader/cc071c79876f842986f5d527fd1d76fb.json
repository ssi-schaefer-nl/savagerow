{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\savagerow\\\\front-end\\\\src\\\\Components\\\\MultiSelect\\\\MultiSelect.js\";\nimport React from \"react\";\nimport Select, { components } from \"react-select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  ValueContainer,\n  Placeholder\n} = components;\n\nconst MultiSelect = props => {\n  const customStyles = {\n    placeholder: (provided, state) => ({ ...provided,\n      position: \"absolute\",\n      top: state.hasValue || state.selectProps.inputValue ? -15 : \"50%\",\n      transition: \"top 0.1s, font-size 0.1s\",\n      fontSize: (state.hasValue || state.selectProps.inputValue) && 13\n    }),\n    valueContainer: (provided, state) => ({ ...provided,\n      textOverflow: \"ellipsis\",\n      maxWidth: \"90%\",\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      display: \"initial\"\n    })\n  };\n\n  const multiValueContainer = ({\n    selectProps,\n    data\n  }) => {\n    const label = data.label;\n    const allSelected = selectProps.value;\n    const index = allSelected.findIndex(selected => selected.label === label);\n    const isLastSelected = index === allSelected.length - 1;\n    const labelSuffix = isLastSelected ? \"\" : \", \";\n    const val = `${label}${labelSuffix}`; // return val;\n\n    return /*#__PURE__*/_jsxDEV(ValueContainer, { ...props,\n      children: [/*#__PURE__*/_jsxDEV(Placeholder, { ...props,\n        isFocused: selectProps.isFocused,\n        children: selectProps.selectProps.placeholder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), val]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this);\n  };\n\n  const {\n    options,\n    placeholder,\n    onChange\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Select, {\n    options: options,\n    isMulti: true,\n    components: {\n      MultiValueContainer: multiValueContainer\n    },\n    onChange: onChange,\n    closeMenuOnSelect: false,\n    hideSelectedOptions: false,\n    styles: customStyles,\n    isSearchable: false,\n    placeholder: placeholder\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}; // MultiSelect.propTypes = {\n//   optionGroups: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       label: PropTypes.string, //for group\n//       options: PropTypes.arrayOf(\n//         // group options\n//         PropTypes.arrayOf(\n//           PropTypes.shape({\n//             //\n//             value: PropTypes.oneOf([\n//               PropTypes.string,\n//               PropTypes.number,\n//               PropTypes.object\n//             ]).isRequired,\n//             label: PropTypes.string.isRequired\n//           })\n//         ).isRequired\n//       )\n//     })\n//   )\n// };\n\n\n_c = MultiSelect;\nexport default MultiSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiSelect\");","map":{"version":3,"sources":["C:/Users/vincent/git/savagerow/front-end/src/Components/MultiSelect/MultiSelect.js"],"names":["React","Select","components","ValueContainer","Placeholder","MultiSelect","props","customStyles","placeholder","provided","state","position","top","hasValue","selectProps","inputValue","transition","fontSize","valueContainer","textOverflow","maxWidth","whiteSpace","overflow","display","multiValueContainer","data","label","allSelected","value","index","findIndex","selected","isLastSelected","length","labelSuffix","val","isFocused","options","onChange","MultiValueContainer"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,IAAiBC,UAAjB,QAAmC,cAAnC;;AAEA,MAAM;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA;AAAlB,IAAkCF,UAAxC;;AAGA,MAAMG,WAAW,GAAIC,KAAD,IAAW;AAE3B,QAAMC,YAAY,GAAG;AACjBC,IAAAA,WAAW,EAAE,CAACC,QAAD,EAAWC,KAAX,MAAsB,EAC/B,GAAGD,QAD4B;AAE/BE,MAAAA,QAAQ,EAAE,UAFqB;AAG/BC,MAAAA,GAAG,EAAEF,KAAK,CAACG,QAAN,IAAkBH,KAAK,CAACI,WAAN,CAAkBC,UAApC,GAAiD,CAAC,EAAlD,GAAuD,KAH7B;AAI/BC,MAAAA,UAAU,EAAE,0BAJmB;AAK/BC,MAAAA,QAAQ,EAAE,CAACP,KAAK,CAACG,QAAN,IAAkBH,KAAK,CAACI,WAAN,CAAkBC,UAArC,KAAoD;AAL/B,KAAtB,CADI;AAQjBG,IAAAA,cAAc,EAAE,CAACT,QAAD,EAAWC,KAAX,MAAsB,EAClC,GAAGD,QAD+B;AAElCU,MAAAA,YAAY,EAAE,UAFoB;AAGlCC,MAAAA,QAAQ,EAAE,KAHwB;AAIlCC,MAAAA,UAAU,EAAE,QAJsB;AAKlCC,MAAAA,QAAQ,EAAE,QALwB;AAMlCC,MAAAA,OAAO,EAAE;AANyB,KAAtB;AARC,GAArB;;AAmBA,QAAMC,mBAAmB,GAAG,CAAC;AAAEV,IAAAA,WAAF;AAAeW,IAAAA;AAAf,GAAD,KAA2B;AACnD,UAAMC,KAAK,GAAGD,IAAI,CAACC,KAAnB;AACA,UAAMC,WAAW,GAAGb,WAAW,CAACc,KAAhC;AACA,UAAMC,KAAK,GAAGF,WAAW,CAACG,SAAZ,CAAsBC,QAAQ,IAAIA,QAAQ,CAACL,KAAT,KAAmBA,KAArD,CAAd;AACA,UAAMM,cAAc,GAAGH,KAAK,KAAKF,WAAW,CAACM,MAAZ,GAAqB,CAAtD;AACA,UAAMC,WAAW,GAAGF,cAAc,GAAG,EAAH,GAAQ,IAA1C;AACA,UAAMG,GAAG,GAAI,GAAET,KAAM,GAAEQ,WAAY,EAAnC,CANmD,CAOnD;;AACA,wBACI,QAAC,cAAD,OAAoB5B,KAApB;AAAA,8BACI,QAAC,WAAD,OAAiBA,KAAjB;AAAwB,QAAA,SAAS,EAAEQ,WAAW,CAACsB,SAA/C;AAAA,kBACKtB,WAAW,CAACA,WAAZ,CAAwBN;AAD7B;AAAA;AAAA;AAAA;AAAA,cADJ,EAIK2B,GAJL;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH,GAhBD;;AAmBA,QAAM;AAAEE,IAAAA,OAAF;AAAW7B,IAAAA,WAAX;AAAwB8B,IAAAA;AAAxB,MAAqChC,KAA3C;AAGA,sBACI,QAAC,MAAD;AACI,IAAA,OAAO,EAAE+B,OADb;AAEI,IAAA,OAAO,MAFX;AAGI,IAAA,UAAU,EAAE;AACRE,MAAAA,mBAAmB,EAAEf;AADb,KAHhB;AAMI,IAAA,QAAQ,EAAEc,QANd;AAOI,IAAA,iBAAiB,EAAE,KAPvB;AAQI,IAAA,mBAAmB,EAAE,KARzB;AASI,IAAA,MAAM,EAAE/B,YATZ;AAUI,IAAA,YAAY,EAAE,KAVlB;AAWI,IAAA,WAAW,EAAEC;AAXjB;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CA5DD,C,CA6DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KAjFMH,W;AAoFN,eAAeA,WAAf","sourcesContent":["import React from \"react\";\r\n\r\nimport Select, { components } from \"react-select\";\r\n\r\nconst { ValueContainer, Placeholder } = components;\r\n\r\n\r\nconst MultiSelect = (props) => {\r\n\r\n    const customStyles = {\r\n        placeholder: (provided, state) => ({\r\n            ...provided,\r\n            position: \"absolute\",\r\n            top: state.hasValue || state.selectProps.inputValue ? -15 : \"50%\",\r\n            transition: \"top 0.1s, font-size 0.1s\",\r\n            fontSize: (state.hasValue || state.selectProps.inputValue) && 13\r\n        }),\r\n        valueContainer: (provided, state) => ({\r\n            ...provided,\r\n            textOverflow: \"ellipsis\",\r\n            maxWidth: \"90%\",\r\n            whiteSpace: \"nowrap\",\r\n            overflow: \"hidden\",\r\n            display: \"initial\"\r\n        }),\r\n\r\n    };\r\n\r\n    const multiValueContainer = ({ selectProps, data }) => {\r\n        const label = data.label;\r\n        const allSelected = selectProps.value;\r\n        const index = allSelected.findIndex(selected => selected.label === label);\r\n        const isLastSelected = index === allSelected.length - 1;\r\n        const labelSuffix = isLastSelected ? \"\" : \", \";\r\n        const val = `${label}${labelSuffix}`;\r\n        // return val;\r\n        return (\r\n            <ValueContainer {...props}>\r\n                <Placeholder {...props} isFocused={selectProps.isFocused}>\r\n                    {selectProps.selectProps.placeholder}\r\n                </Placeholder>\r\n                {val}\r\n            </ValueContainer>\r\n        )\r\n    };\r\n\r\n\r\n    const { options, placeholder, onChange } = props;\r\n\r\n\r\n    return (\r\n        <Select\r\n            options={options}\r\n            isMulti\r\n            components={{\r\n                MultiValueContainer: multiValueContainer\r\n            }}\r\n            onChange={onChange}\r\n            closeMenuOnSelect={false}\r\n            hideSelectedOptions={false}\r\n            styles={customStyles}\r\n            isSearchable={false}\r\n            placeholder={placeholder}\r\n        />\r\n\r\n    );\r\n\r\n}\r\n// MultiSelect.propTypes = {\r\n//   optionGroups: PropTypes.arrayOf(\r\n//     PropTypes.shape({\r\n//       label: PropTypes.string, //for group\r\n//       options: PropTypes.arrayOf(\r\n//         // group options\r\n//         PropTypes.arrayOf(\r\n//           PropTypes.shape({\r\n//             //\r\n//             value: PropTypes.oneOf([\r\n//               PropTypes.string,\r\n//               PropTypes.number,\r\n//               PropTypes.object\r\n//             ]).isRequired,\r\n//             label: PropTypes.string.isRequired\r\n//           })\r\n//         ).isRequired\r\n//       )\r\n//     })\r\n//   )\r\n// };\r\n\r\n\r\nexport default MultiSelect"]},"metadata":{},"sourceType":"module"}