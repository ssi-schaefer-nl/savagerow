{"ast":null,"code":"import TableService from '../../Service/TableService';\n\nclass TableManager {\n  constructor(table) {\n    this.table = table;\n    this.tableService = new TableService();\n  }\n\n  getRowSet(onSuccess, onFailure) {\n    this.tableService.getRowsOfTable(this.table, onSuccess, onFailure);\n  }\n\n  getSchema(onSuccess, onFailure) {\n    this.tableService.getSchemaOfTable(this.table, onSuccess, onFailure);\n  } // addRow(columns, index) {\n  //     var copyOfRows = [...this.rows]\n  //     var newRow = {}\n  //     columns.forEach(col => { newRow[col] = \"\" })\n  //     copyOfRows.splice(index, 0, newRow)\n  //     this.rows = copyOfRows;\n  //     this.updateUnsynchronizedRowsAfterInsertion(index);\n  //     console.debug(\"Inserted a new row at index \" + index)\n  // }\n  // update(updatedRow, index) {\n  //     var oldRow = this.rows[index]\n  //     var newRowSet = [...this.rows]\n  //     var rowUpdateData = { oldRow: oldRow, newRow: updatedRow }\n  //     this.tableService.addRowToTable(\n  //         this.table,\n  //         rowUpdateData,\n  //         function () {\n  //             newRowSet[index] = updatedRow;\n  //             console.debug(\"Added row to database for table \" + this.table)\n  //         }.bind(this),\n  //         function (data) {\n  //             console.debug(\"Error occured during adding row to database for table \" + this.table + \"(\" + data.data + \")\")\n  //         }.bind(this)\n  //     );\n  //     this.rows = newRowSet\n  // }\n\n\n  delete(rows, index) {\n    var copyOfRows = null;\n    var exception = null;\n    this.tableService.deleteRowOfTable(this.table, {\n      row: rows[index]\n    }, () => copyOfRows = rows.filter(function (el, i) {\n      return index !== i;\n    }), data => exception = data.data);\n    return {\n      rows: copyOfRows,\n      exception: exception\n    };\n  }\n\n  save(rows, index) {\n    var copyOfRows = null;\n    var exception = null;\n    this.tableService.addRowToTable(this.table, {\n      row: rows[index]\n    }, data => copyOfRows = Object.assign([], rows, {\n      index: data.data.row\n    }), data => exception = data.data);\n    return {\n      rows: copyOfRows,\n      exception: exception\n    };\n  } // deleteRowFromLocalTable(index) {\n  //     var newRowSet = [...this.rows]\n  //     newRowSet.splice(index, 1)\n  //     this.rows = newRowSet;\n  //     this.updateUnsynchronizedRowsAfterDeletion(index);\n  // }\n\n\n}\n\nexport default TableManager;","map":{"version":3,"sources":["C:/Users/vincent/git/savagerow/front-end/src/Components/Table/TableManager.js"],"names":["TableService","TableManager","constructor","table","tableService","getRowSet","onSuccess","onFailure","getRowsOfTable","getSchema","getSchemaOfTable","delete","rows","index","copyOfRows","exception","deleteRowOfTable","row","filter","el","i","data","save","addRowToTable","Object","assign"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,4BAAzB;;AAGA,MAAMC,YAAN,CAAmB;AACfC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,YAAL,GAAoB,IAAIJ,YAAJ,EAApB;AACH;;AAEDK,EAAAA,SAAS,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC5B,SAAKH,YAAL,CAAkBI,cAAlB,CAAiC,KAAKL,KAAtC,EAA6CG,SAA7C,EAAwDC,SAAxD;AACH;;AAEDE,EAAAA,SAAS,CAACH,SAAD,EAAYC,SAAZ,EAAuB;AAC5B,SAAKH,YAAL,CAAkBM,gBAAlB,CAAmC,KAAKP,KAAxC,EAA+CG,SAA/C,EAA0DC,SAA1D;AACH,GAZc,CAcf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEAI,EAAAA,MAAM,CAACC,IAAD,EAAOC,KAAP,EAAc;AAChB,QAAIC,UAAU,GAAG,IAAjB;AACA,QAAIC,SAAS,GAAG,IAAhB;AAEA,SAAKX,YAAL,CAAkBY,gBAAlB,CACI,KAAKb,KADT,EAEI;AAAEc,MAAAA,GAAG,EAAEL,IAAI,CAACC,KAAD;AAAX,KAFJ,EAGI,MAAMC,UAAU,GAAGF,IAAI,CAACM,MAAL,CAAY,UAAUC,EAAV,EAAcC,CAAd,EAAiB;AAAC,aAAOP,KAAK,KAAKO,CAAjB;AAAoB,KAAlD,CAHvB,EAIKC,IAAD,IAAUN,SAAS,GAAGM,IAAI,CAACA,IAJ/B;AAOA,WAAO;AAAET,MAAAA,IAAI,EAAEE,UAAR;AAAoBC,MAAAA,SAAS,EAAEA;AAA/B,KAAP;AACH;;AAEDO,EAAAA,IAAI,CAACV,IAAD,EAAOC,KAAP,EAAc;AACd,QAAIC,UAAU,GAAG,IAAjB;AACA,QAAIC,SAAS,GAAG,IAAhB;AAEA,SAAKX,YAAL,CAAkBmB,aAAlB,CACI,KAAKpB,KADT,EAEI;AAAEc,MAAAA,GAAG,EAAEL,IAAI,CAACC,KAAD;AAAX,KAFJ,EAGKQ,IAAD,IAAUP,UAAU,GAAGU,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBb,IAAlB,EAAwB;AAAEC,MAAAA,KAAK,EAAEQ,IAAI,CAACA,IAAL,CAAUJ;AAAnB,KAAxB,CAH3B,EAIKI,IAAD,IAAUN,SAAS,GAAGM,IAAI,CAACA,IAJ/B;AAOA,WAAO;AAAET,MAAAA,IAAI,EAAEE,UAAR;AAAoBC,MAAAA,SAAS,EAAEA;AAA/B,KAAP;AACH,GAvEc,CAyEf;AACA;AACA;AACA;AACA;AACA;;;AA9Ee;;AAiFnB,eAAed,YAAf","sourcesContent":["import TableService from '../../Service/TableService';\r\n\r\n\r\nclass TableManager {\r\n    constructor(table) {\r\n        this.table = table\r\n        this.tableService = new TableService()\r\n    }\r\n\r\n    getRowSet(onSuccess, onFailure) {\r\n        this.tableService.getRowsOfTable(this.table, onSuccess, onFailure)\r\n    }\r\n\r\n    getSchema(onSuccess, onFailure) {\r\n        this.tableService.getSchemaOfTable(this.table, onSuccess, onFailure)\r\n    }\r\n\r\n    // addRow(columns, index) {\r\n    //     var copyOfRows = [...this.rows]\r\n    //     var newRow = {}\r\n    //     columns.forEach(col => { newRow[col] = \"\" })\r\n    //     copyOfRows.splice(index, 0, newRow)\r\n    //     this.rows = copyOfRows;\r\n    //     this.updateUnsynchronizedRowsAfterInsertion(index);\r\n    //     console.debug(\"Inserted a new row at index \" + index)\r\n    // }\r\n\r\n\r\n    // update(updatedRow, index) {\r\n    //     var oldRow = this.rows[index]\r\n    //     var newRowSet = [...this.rows]\r\n    //     var rowUpdateData = { oldRow: oldRow, newRow: updatedRow }\r\n\r\n    //     this.tableService.addRowToTable(\r\n    //         this.table,\r\n    //         rowUpdateData,\r\n    //         function () {\r\n    //             newRowSet[index] = updatedRow;\r\n    //             console.debug(\"Added row to database for table \" + this.table)\r\n    //         }.bind(this),\r\n    //         function (data) {\r\n    //             console.debug(\"Error occured during adding row to database for table \" + this.table + \"(\" + data.data + \")\")\r\n    //         }.bind(this)\r\n    //     );\r\n\r\n    //     this.rows = newRowSet\r\n    // }\r\n\r\n    delete(rows, index) {\r\n        var copyOfRows = null\r\n        var exception = null\r\n\r\n        this.tableService.deleteRowOfTable(\r\n            this.table,\r\n            { row: rows[index] },\r\n            () => copyOfRows = rows.filter(function (el, i) {return index !== i;}),\r\n            (data) => exception = data.data\r\n        )\r\n\r\n        return { rows: copyOfRows, exception: exception }\r\n    }\r\n\r\n    save(rows, index) {\r\n        var copyOfRows = null\r\n        var exception = null\r\n\r\n        this.tableService.addRowToTable(\r\n            this.table,\r\n            { row: rows[index] },\r\n            (data) => copyOfRows = Object.assign([], rows, { index: data.data.row }),\r\n            (data) => exception = data.data\r\n        )\r\n\r\n        return { rows: copyOfRows, exception: exception }\r\n    }\r\n\r\n    // deleteRowFromLocalTable(index) {\r\n    //     var newRowSet = [...this.rows]\r\n    //     newRowSet.splice(index, 1)\r\n    //     this.rows = newRowSet;\r\n    //     this.updateUnsynchronizedRowsAfterDeletion(index);\r\n    // }\r\n\r\n}\r\nexport default TableManager"]},"metadata":{},"sourceType":"module"}