{"ast":null,"code":"import TableServiceHelper from './TableServiceHelper';\n\nclass TableService {\n  constructor(table) {\n    this.table = table;\n    this.tableServiceHelper = new TableServiceHelper();\n  }\n\n  getRowSet(onSuccess, onFailure) {\n    this.tableServiceHelper.getRowsOfTable(this.table, onSuccess, onFailure);\n  }\n\n  getSchema(onSuccess, onFailure) {\n    this.tableServiceHelper.getSchemaOfTable(this.table, onSuccess, onFailure);\n  }\n\n  addRow(rows, index) {\n    var copyOfRows = [...rows];\n    var newRow = {};\n    Object.keys(rows[0]).forEach(col => {\n      newRow[col] = \"\";\n    });\n    copyOfRows.splice(index, 0, newRow);\n    return copyOfRows;\n  }\n\n  update(rows, newRow, index, onSuccess, onFailure) {\n    this.tableServiceHelper.updateRowOfTable(this.table, {\n      oldRow: rows[index],\n      newRow: newRow\n    }, () => onSuccess(this.updateLocal(rows, newRow, index)), data => onFailure(data.response.data));\n  }\n\n  updateLocal(rows, newRow, index) {\n    var copyOfRows = [...rows];\n    copyOfRows[index] = newRow;\n    return copyOfRows;\n  }\n\n  delete(rows, index, onSuccess, onFailure) {\n    this.tableServiceHelper.deleteRowOfTable(this.table, {\n      row: rows[index]\n    }, () => {\n      var copyOfRows = [...rows];\n      copyOfRows.splice(index, 1);\n      onSuccess(copyOfRows);\n    }, data => onFailure(data.response.data));\n  }\n\n  save(rows, index, onSuccess, onFailure) {\n    this.tableServiceHelper.addRowToTable(this.table, {\n      row: rows[index]\n    }, data => {\n      var copyOfRows = [...rows];\n      copyOfRows[index] = data.data.row;\n      onSuccess(copyOfRows);\n    }, data => onFailure(data.response.data));\n  }\n\n  addColumn(data, onSuccess, onFailure) {\n    this.tableServiceHelper.addColumnToTable(this.table, data, onSuccess, data => onFailure(data.response.data));\n  }\n\n  dropColumn(column, onSuccess, onFailure) {\n    this.tableServiceHelper.dropColumnFromTable(this.table, column, onSuccess, data => onFailure(data.response.data));\n  }\n\n}\n\nexport default TableService;","map":{"version":3,"sources":["C:/Users/vincent/git/savagerow/front-end/src/Service/TableService.js"],"names":["TableServiceHelper","TableService","constructor","table","tableServiceHelper","getRowSet","onSuccess","onFailure","getRowsOfTable","getSchema","getSchemaOfTable","addRow","rows","index","copyOfRows","newRow","Object","keys","forEach","col","splice","update","updateRowOfTable","oldRow","updateLocal","data","response","delete","deleteRowOfTable","row","save","addRowToTable","addColumn","addColumnToTable","dropColumn","column","dropColumnFromTable"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,sBAA/B;;AAGA,MAAMC,YAAN,CAAmB;AACfC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,kBAAL,GAA0B,IAAIJ,kBAAJ,EAA1B;AACH;;AAEDK,EAAAA,SAAS,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC5B,SAAKH,kBAAL,CAAwBI,cAAxB,CAAuC,KAAKL,KAA5C,EAAmDG,SAAnD,EAA8DC,SAA9D;AACH;;AAEDE,EAAAA,SAAS,CAACH,SAAD,EAAYC,SAAZ,EAAuB;AAC5B,SAAKH,kBAAL,CAAwBM,gBAAxB,CAAyC,KAAKP,KAA9C,EAAqDG,SAArD,EAAgEC,SAAhE;AACH;;AAEDI,EAAAA,MAAM,CAACC,IAAD,EAAOC,KAAP,EAAc;AAChB,QAAIC,UAAU,GAAG,CAAC,GAAGF,IAAJ,CAAjB;AACA,QAAIG,MAAM,GAAG,EAAb;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYL,IAAI,CAAC,CAAD,CAAhB,EAAqBM,OAArB,CAA6BC,GAAG,IAAI;AAAEJ,MAAAA,MAAM,CAACI,GAAD,CAAN,GAAc,EAAd;AAAkB,KAAxD;AACAL,IAAAA,UAAU,CAACM,MAAX,CAAkBP,KAAlB,EAAyB,CAAzB,EAA4BE,MAA5B;AACA,WAAOD,UAAP;AACH;;AAGDO,EAAAA,MAAM,CAACT,IAAD,EAAOG,MAAP,EAAeF,KAAf,EAAsBP,SAAtB,EAAiCC,SAAjC,EAA4C;AAC9C,SAAKH,kBAAL,CAAwBkB,gBAAxB,CACI,KAAKnB,KADT,EAEI;AAAEoB,MAAAA,MAAM,EAAEX,IAAI,CAACC,KAAD,CAAd;AAAuBE,MAAAA,MAAM,EAAEA;AAA/B,KAFJ,EAGI,MAAMT,SAAS,CAAC,KAAKkB,WAAL,CAAiBZ,IAAjB,EAAuBG,MAAvB,EAA+BF,KAA/B,CAAD,CAHnB,EAIKY,IAAD,IAAUlB,SAAS,CAACkB,IAAI,CAACC,QAAL,CAAcD,IAAf,CAJvB;AAMH;;AAEDD,EAAAA,WAAW,CAACZ,IAAD,EAAOG,MAAP,EAAeF,KAAf,EAAsB;AAC7B,QAAIC,UAAU,GAAG,CAAC,GAAGF,IAAJ,CAAjB;AACAE,IAAAA,UAAU,CAACD,KAAD,CAAV,GAAoBE,MAApB;AACA,WAAOD,UAAP;AACH;;AAEDa,EAAAA,MAAM,CAACf,IAAD,EAAOC,KAAP,EAAcP,SAAd,EAAyBC,SAAzB,EAAoC;AACtC,SAAKH,kBAAL,CAAwBwB,gBAAxB,CACI,KAAKzB,KADT,EAEI;AAAE0B,MAAAA,GAAG,EAAEjB,IAAI,CAACC,KAAD;AAAX,KAFJ,EAGI,MAAM;AACF,UAAIC,UAAU,GAAG,CAAC,GAAGF,IAAJ,CAAjB;AACAE,MAAAA,UAAU,CAACM,MAAX,CAAkBP,KAAlB,EAAyB,CAAzB;AACAP,MAAAA,SAAS,CAACQ,UAAD,CAAT;AACH,KAPL,EAQKW,IAAD,IAAUlB,SAAS,CAACkB,IAAI,CAACC,QAAL,CAAcD,IAAf,CARvB;AAUH;;AAEDK,EAAAA,IAAI,CAAClB,IAAD,EAAOC,KAAP,EAAcP,SAAd,EAAyBC,SAAzB,EAAoC;AACpC,SAAKH,kBAAL,CAAwB2B,aAAxB,CACI,KAAK5B,KADT,EAEI;AAAE0B,MAAAA,GAAG,EAAEjB,IAAI,CAACC,KAAD;AAAX,KAFJ,EAGKY,IAAD,IAAU;AACN,UAAIX,UAAU,GAAG,CAAC,GAAGF,IAAJ,CAAjB;AACAE,MAAAA,UAAU,CAACD,KAAD,CAAV,GAAoBY,IAAI,CAACA,IAAL,CAAUI,GAA9B;AACAvB,MAAAA,SAAS,CAACQ,UAAD,CAAT;AACH,KAPL,EAQKW,IAAD,IAAUlB,SAAS,CAACkB,IAAI,CAACC,QAAL,CAAcD,IAAf,CARvB;AAUH;;AAEDO,EAAAA,SAAS,CAACP,IAAD,EAAOnB,SAAP,EAAkBC,SAAlB,EAA6B;AAClC,SAAKH,kBAAL,CAAwB6B,gBAAxB,CAAyC,KAAK9B,KAA9C,EAAqDsB,IAArD,EAA2DnB,SAA3D,EAAuEmB,IAAD,IAAUlB,SAAS,CAACkB,IAAI,CAACC,QAAL,CAAcD,IAAf,CAAzF;AACH;;AAEDS,EAAAA,UAAU,CAACC,MAAD,EAAS7B,SAAT,EAAoBC,SAApB,EAA+B;AACrC,SAAKH,kBAAL,CAAwBgC,mBAAxB,CAA4C,KAAKjC,KAAjD,EAAwDgC,MAAxD,EAAgE7B,SAAhE,EAA4EmB,IAAD,IAAUlB,SAAS,CAACkB,IAAI,CAACC,QAAL,CAAcD,IAAf,CAA9F;AACH;;AAtEc;;AAyEnB,eAAexB,YAAf","sourcesContent":["import TableServiceHelper from './TableServiceHelper';\r\n\r\n\r\nclass TableService {\r\n    constructor(table) {\r\n        this.table = table\r\n        this.tableServiceHelper = new TableServiceHelper()\r\n    }\r\n\r\n    getRowSet(onSuccess, onFailure) {\r\n        this.tableServiceHelper.getRowsOfTable(this.table, onSuccess, onFailure)\r\n    }\r\n\r\n    getSchema(onSuccess, onFailure) {\r\n        this.tableServiceHelper.getSchemaOfTable(this.table, onSuccess, onFailure)\r\n    }\r\n\r\n    addRow(rows, index) {\r\n        var copyOfRows = [...rows]\r\n        var newRow = {}\r\n        Object.keys(rows[0]).forEach(col => { newRow[col] = \"\" })\r\n        copyOfRows.splice(index, 0, newRow) \r\n        return copyOfRows\r\n    }\r\n\r\n\r\n    update(rows, newRow, index, onSuccess, onFailure) {\r\n        this.tableServiceHelper.updateRowOfTable(\r\n            this.table,\r\n            { oldRow: rows[index], newRow: newRow },\r\n            () => onSuccess(this.updateLocal(rows, newRow, index)),\r\n            (data) => onFailure(data.response.data)\r\n        );\r\n    }\r\n\r\n    updateLocal(rows, newRow, index) {\r\n        var copyOfRows = [...rows]\r\n        copyOfRows[index] = newRow\r\n        return copyOfRows\r\n    }\r\n\r\n    delete(rows, index, onSuccess, onFailure) {\r\n        this.tableServiceHelper.deleteRowOfTable(\r\n            this.table,\r\n            { row: rows[index] },\r\n            () => {\r\n                var copyOfRows = [...rows]\r\n                copyOfRows.splice(index, 1)\r\n                onSuccess(copyOfRows)\r\n            },\r\n            (data) => onFailure(data.response.data)\r\n        )\r\n    }\r\n\r\n    save(rows, index, onSuccess, onFailure) {\r\n        this.tableServiceHelper.addRowToTable(\r\n            this.table,\r\n            { row: rows[index] },\r\n            (data) => {\r\n                var copyOfRows = [...rows]\r\n                copyOfRows[index] = data.data.row\r\n                onSuccess(copyOfRows)\r\n            },\r\n            (data) => onFailure(data.response.data)\r\n        )\r\n    }\r\n\r\n    addColumn(data, onSuccess, onFailure) {\r\n        this.tableServiceHelper.addColumnToTable(this.table, data, onSuccess, (data) => onFailure(data.response.data))\r\n    }\r\n\r\n    dropColumn(column, onSuccess, onFailure) {\r\n        this.tableServiceHelper.dropColumnFromTable(this.table, column, onSuccess, (data) => onFailure(data.response.data))\r\n    }\r\n\r\n}\r\nexport default TableService"]},"metadata":{},"sourceType":"module"}