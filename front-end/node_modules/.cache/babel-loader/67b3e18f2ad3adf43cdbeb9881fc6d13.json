{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\playground\\\\src\\\\Components\\\\Table\\\\Table.js\";\nimport React, { Component } from 'react';\nimport DataGrid, { TextEditor } from \"react-data-grid\";\nimport TableDataService from '../../Service/TableDataServices';\nimport { CircularProgress } from '@material-ui/core';\nimport CollapsableAlert from '../CollapsableAlert/CollapsableAlert';\nimport ContentWithContextMenu from '../ContentWithContextMenu/ContentWithContextMenu';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SavageTable extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tableDataService: new TableDataService(),\n      alert: null,\n      columns: [],\n      rows: [],\n      unsavedRowsIndices: [],\n      // Rows that are inserted to the table but not yet saved to the database\n      indexOfSelectedRow: null\n    };\n\n    this.loadTableData = () => {\n      this.state.tableDataService.getTableData(this.props.table, function (data) {\n        var rows = data.data.data;\n        var columns = data.data.tableSchema.columns.map(col => ({\n          key: col.column,\n          name: col.column,\n          resizable: true,\n          nullable: col.nullable,\n          editor: col.editable ? TextEditor : undefined\n        })); // var emptyRow = {}\n        // this.state.columns.forEach(col => { emptyRow[col.key] = \"\" })\n        // var emptyRowIndex = rows.push(emptyRow) - 1\n\n        this.setState({\n          columns: columns,\n          rows: data.data.data,\n          loading: false,\n          unsavedRowsIndices: []\n        });\n      }.bind(this), function (data) {\n        console.log(data);\n        this.setState({\n          loading: false\n        });\n      }.bind(this));\n    };\n\n    this.contextMenuItems = {\n      \"Insert\": () => {\n        this.insertRow();\n      },\n      \"Delete\": () => {\n        this.deleteRow();\n      },\n      \"Save\": () => {\n        this.save(true);\n      },\n      \"Reload\": () => {\n        this.loadTableData();\n      }\n    };\n\n    this.handleCellChange = c => {\n      this.state.indexOfSelectedRow = c.rowIdx;\n      console.log(\"Selected row \" + c.rowIdx);\n      console.log(this.state.unsavedRowsIndices);\n      this.save(false);\n    };\n\n    this.insertRow = () => {\n      var insertRowBeforeIndex = this.state.indexOfSelectedRow;\n      var newRow = {};\n      this.state.columns.forEach(col => {\n        newRow[col.key] = \"\";\n      });\n      var rows = this.state.rows;\n      rows.splice(insertRowBeforeIndex, 0, newRow); //Insert empty row at index idx\n\n      this.setState({\n        rows: rows\n      });\n      this.state.unsavedRowsIndices = this.state.unsavedRowsIndices.map(i => insertRowBeforeIndex <= i ? i + 1 : i); // .push(insertRowBeforeIndex)\n    };\n\n    this.deleteRow = () => {\n      var rowSelectedForDeletion = this.state.indexOfSelectedRow;\n\n      if (this.state.unsavedRowsIndices.includes(rowSelectedForDeletion)) {\n        this.removeRowFromTable(rowSelectedForDeletion);\n      } else {\n        var data = {\n          row: this.state.rows[rowSelectedForDeletion]\n        };\n        this.state.tableDataService.deleteTableData(this.props.table, data, function () {\n          this.removeRowFromTable(rowSelectedForDeletion);\n        }.bind(this), function (data) {\n          console.log(data);\n        }.bind(this));\n      }\n    };\n\n    this.removeRowFromTable = rowIndex => {\n      var data = this.state.rows;\n      data.splice(rowIndex, 1);\n      this.setState({\n        rows: data\n      });\n    };\n\n    this.save = explicitSave => {\n      var columnsWithMissingData = [];\n      var alert = null;\n      this.state.unsavedRowsIndices.forEach(unsavedRowIndex => {\n        var unsavedRow = this.state.rows[unsavedRowIndex];\n        console.log(unsavedRow);\n        var colsRequiringValue = this.state.columns.filter(col => {\n          if (!col.nullable && col.editor && !unsavedRow[col.key]) {\n            if (columnsWithMissingData.indexOf(col.key) === -1) {\n              columnsWithMissingData.push(col.key);\n            }\n\n            return col.key;\n          }\n        });\n\n        if (colsRequiringValue.length == 0) {\n          this.saveRow(unsavedRowIndex);\n        }\n      });\n\n      if (explicitSave) {\n        if (columnsWithMissingData.length > 0) {\n          alert = {\n            severity: \"warning\",\n            message: \"One or more rows have incomplete data and cannot be stored (missing column:\" + columnsWithMissingData.map(col => \" \" + col) + \")\"\n          };\n        }\n\n        this.setState({\n          alert: alert\n        });\n      }\n    };\n\n    this.saveRow = rowIndex => {\n      var data = {\n        row: this.state.rows[rowIndex]\n      };\n      this.state.tableDataService.addTableData(this.props.table, data, function (data) {\n        // todo We should get the inserte row as a response, so that we receive automatically set values\n        var idx = this.state.unsavedRow.indexOf(rowIndex);\n        this.state.newRows.splice(idx, 1); // Unmark row as new\n      }.bind(this), function (data) {\n        console.log(data);\n      }.bind(this));\n    };\n\n    this.update = (updatedRows, index) => {\n      var indexOfUpdatedRow = index.indexes[0];\n\n      if (this.state.unsavedRowsIndices.includes(indexOfUpdatedRow)) {\n        return;\n      }\n\n      var oldInstanceOfUpdatedRow = this.state.rows[indexOfUpdatedRow];\n      var newInstanceOfUpdatedRow = updatedRows[indexOfUpdatedRow];\n      var data = [{\n        oldRow: oldInstanceOfUpdatedRow,\n        newRow: newInstanceOfUpdatedRow\n      }];\n      this.state.tableDataService.updateTableData(this.props.table, data, function (data) {\n        // todo We should get the updated row as a response, so that we receive automatically set values\n        var rows = this.state.rows;\n        rows[index] = newInstanceOfUpdatedRow;\n        this.setState({\n          rows: rows\n        });\n      }.bind(this), function (data) {\n        console.log(data);\n      }.bind(this));\n    };\n  }\n\n  componentDidMount() {\n    this.loadTableData();\n  }\n\n  render() {\n    if (this.state.loading) {\n      return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 15\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.alert && /*#__PURE__*/_jsxDEV(CollapsableAlert, {\n        severity: this.state.alert.severity,\n        message: this.state.alert.message,\n        onClose: () => this.setState({\n          alert: null\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ContentWithContextMenu, {\n        content: /*#__PURE__*/_jsxDEV(DataGrid, {\n          columns: this.state.columns,\n          rows: this.state.rows,\n          rowGetter: i => this.state.rows[i],\n          onRowsChange: this.update,\n          enableCellSelect: true,\n          style: {\n            resize: 'both',\n            'height': \"70vh\",\n            maxWidth: \"100%\"\n          },\n          className: \"fill-grid\",\n          minHeight: \"1000\",\n          onSelectedCellChange: this.handleCellChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this),\n        menuItems: Object.keys(this.contextMenuItems),\n        action: a => this.contextMenuItems[a]()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default SavageTable;","map":{"version":3,"sources":["C:/Users/vincent/git/playground/src/Components/Table/Table.js"],"names":["React","Component","DataGrid","TextEditor","TableDataService","CircularProgress","CollapsableAlert","ContentWithContextMenu","SavageTable","state","tableDataService","alert","columns","rows","unsavedRowsIndices","indexOfSelectedRow","loadTableData","getTableData","props","table","data","tableSchema","map","col","key","column","name","resizable","nullable","editor","editable","undefined","setState","loading","bind","console","log","contextMenuItems","insertRow","deleteRow","save","handleCellChange","c","rowIdx","insertRowBeforeIndex","newRow","forEach","splice","i","rowSelectedForDeletion","includes","removeRowFromTable","row","deleteTableData","rowIndex","explicitSave","columnsWithMissingData","unsavedRowIndex","unsavedRow","colsRequiringValue","filter","indexOf","push","length","saveRow","severity","message","addTableData","idx","newRows","update","updatedRows","index","indexOfUpdatedRow","indexes","oldInstanceOfUpdatedRow","newInstanceOfUpdatedRow","oldRow","updateTableData","componentDidMount","render","resize","maxWidth","Object","keys","a"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport DataGrid, { TextEditor } from \"react-data-grid\";\r\n\r\nimport TableDataService from '../../Service/TableDataServices';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport CollapsableAlert from '../CollapsableAlert/CollapsableAlert';\r\nimport ContentWithContextMenu from '../ContentWithContextMenu/ContentWithContextMenu';\r\n\r\nclass SavageTable extends Component {\r\n  state = {\r\n    tableDataService: new TableDataService(),\r\n    alert: null,\r\n    columns: [],\r\n    rows: [],\r\n    unsavedRowsIndices: [], // Rows that are inserted to the table but not yet saved to the database\r\n    indexOfSelectedRow: null,\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadTableData()\r\n  }\r\n\r\n  loadTableData = () => {\r\n    this.state.tableDataService.getTableData(this.props.table,\r\n      function (data) {\r\n        var rows = data.data.data\r\n        var columns = data.data.tableSchema.columns.map(col => ({\r\n          key: col.column,\r\n          name: col.column,\r\n          resizable: true,\r\n          nullable: col.nullable,\r\n          editor: col.editable ? TextEditor : undefined\r\n        }));\r\n\r\n        // var emptyRow = {}\r\n        // this.state.columns.forEach(col => { emptyRow[col.key] = \"\" })\r\n        // var emptyRowIndex = rows.push(emptyRow) - 1\r\n\r\n        this.setState({\r\n          columns: columns,\r\n          rows: data.data.data,\r\n          loading: false,\r\n          unsavedRowsIndices: []\r\n        })\r\n\r\n      }.bind(this),\r\n      function (data) {\r\n        console.log(data)\r\n        this.setState({ loading: false })\r\n      }.bind(this));\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loading) {\r\n      return (<CircularProgress />)\r\n    }\r\n    return (\r\n\r\n      <div>\r\n        {this.state.alert &&\r\n          <CollapsableAlert\r\n            severity={this.state.alert.severity}\r\n            message={this.state.alert.message}\r\n            onClose={() => this.setState({ alert: null })}\r\n          />}\r\n        <ContentWithContextMenu\r\n          content={\r\n            <DataGrid\r\n              columns={this.state.columns}\r\n              rows={this.state.rows}\r\n              rowGetter={i => this.state.rows[i]}\r\n              onRowsChange={this.update}\r\n              enableCellSelect={true}\r\n              style={{ resize: 'both', 'height': \"70vh\", maxWidth: \"100%\" }}\r\n              className=\"fill-grid\"\r\n              minHeight=\"1000\"\r\n              onSelectedCellChange={this.handleCellChange}\r\n            />\r\n          }\r\n          menuItems={Object.keys(this.contextMenuItems)}\r\n          action={(a) => this.contextMenuItems[a]()}\r\n        />\r\n      </div >\r\n    );\r\n  }\r\n\r\n  contextMenuItems = {\r\n    \"Insert\": () => { this.insertRow() },\r\n    \"Delete\": () => { this.deleteRow() },\r\n    \"Save\": () => { this.save(true) },\r\n    \"Reload\": () => { this.loadTableData() }\r\n  }\r\n\r\n  handleCellChange = (c) => {\r\n    this.state.indexOfSelectedRow = c.rowIdx\r\n    console.log(\"Selected row \" + c.rowIdx)\r\n    console.log(this.state.unsavedRowsIndices)\r\n\r\n    this.save(false)\r\n  }\r\n\r\n  insertRow = () => {\r\n    var insertRowBeforeIndex = this.state.indexOfSelectedRow;\r\n    var newRow = {}\r\n    this.state.columns.forEach(col => { newRow[col.key] = \"\" })\r\n    var rows = this.state.rows\r\n\r\n    rows.splice(insertRowBeforeIndex, 0, newRow) //Insert empty row at index idx\r\n\r\n    this.setState({ rows: rows })\r\n    this.state.unsavedRowsIndices = this.state.unsavedRowsIndices.map(i => (\r\n      insertRowBeforeIndex <= i ? i + 1 : i\r\n    ))\r\n    \r\n    // .push(insertRowBeforeIndex)\r\n  }\r\n\r\n  deleteRow = () => {\r\n    var rowSelectedForDeletion = this.state.indexOfSelectedRow\r\n\r\n    if (this.state.unsavedRowsIndices.includes(rowSelectedForDeletion)) {\r\n      this.removeRowFromTable(rowSelectedForDeletion)\r\n    }\r\n    else {\r\n      var data = { row: this.state.rows[rowSelectedForDeletion] }\r\n\r\n      this.state.tableDataService.deleteTableData(\r\n        this.props.table,\r\n        data,\r\n        function () {\r\n          this.removeRowFromTable(rowSelectedForDeletion)\r\n        }.bind(this),\r\n        function (data) {\r\n          console.log(data)\r\n        }.bind(this));\r\n    }\r\n  }\r\n\r\n  removeRowFromTable = (rowIndex) => {\r\n    var data = this.state.rows\r\n    data.splice(rowIndex, 1)\r\n    this.setState({ rows: data })\r\n  }\r\n\r\n  save = (explicitSave) => {\r\n    var columnsWithMissingData = []\r\n    var alert = null\r\n\r\n    this.state.unsavedRowsIndices.forEach(unsavedRowIndex => {\r\n      var unsavedRow = this.state.rows[unsavedRowIndex]\r\n      console.log(unsavedRow)\r\n      var colsRequiringValue = this.state.columns.filter(col => {\r\n        if (!col.nullable && col.editor && !unsavedRow[col.key]) {\r\n          if (columnsWithMissingData.indexOf(col.key) === -1) {\r\n            columnsWithMissingData.push(col.key);\r\n          }\r\n          return col.key\r\n        }\r\n      })\r\n      if (colsRequiringValue.length == 0) {\r\n        this.saveRow(unsavedRowIndex)\r\n      }\r\n    })\r\n\r\n    if (explicitSave) {\r\n      if (columnsWithMissingData.length > 0) {\r\n        alert = {\r\n          severity: \"warning\",\r\n          message: \"One or more rows have incomplete data and cannot be stored (missing column:\" + columnsWithMissingData.map(col => \" \" + col) + \")\",\r\n        }\r\n      }\r\n      this.setState({ alert: alert })\r\n    }\r\n  }\r\n\r\n  saveRow = (rowIndex) => {\r\n    var data = { row: this.state.rows[rowIndex] }\r\n\r\n    this.state.tableDataService.addTableData(this.props.table, data,\r\n      function (data) {\r\n        // todo We should get the inserte row as a response, so that we receive automatically set values\r\n        var idx = this.state.unsavedRow.indexOf(rowIndex)\r\n        this.state.newRows.splice(idx, 1); // Unmark row as new\r\n      }.bind(this),\r\n      function (data) {\r\n        console.log(data)\r\n      }.bind(this));\r\n  }\r\n\r\n  update = (updatedRows, index) => {\r\n    var indexOfUpdatedRow = index.indexes[0];\r\n    if (this.state.unsavedRowsIndices.includes(indexOfUpdatedRow)) {\r\n      return\r\n    }\r\n\r\n    var oldInstanceOfUpdatedRow = this.state.rows[indexOfUpdatedRow];\r\n    var newInstanceOfUpdatedRow = updatedRows[indexOfUpdatedRow];\r\n    var data = [{ oldRow: oldInstanceOfUpdatedRow, newRow: newInstanceOfUpdatedRow }]\r\n\r\n    this.state.tableDataService.updateTableData(this.props.table, data,\r\n      function (data) {\r\n        // todo We should get the updated row as a response, so that we receive automatically set values\r\n        var rows = this.state.rows;\r\n        rows[index] = newInstanceOfUpdatedRow;\r\n        this.setState({ rows: rows })\r\n      }.bind(this),\r\n      function (data) {\r\n        console.log(data)\r\n      }.bind(this));\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default SavageTable;"]},"metadata":{},"sourceType":"module"}