{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\playground\\\\src\\\\Components\\\\Tables\\\\SavageTable.js\";\nimport React from \"react\";\nimport DataGrid, { TextEditor } from \"react-data-grid\";\nimport \"./styles.css\";\nimport TableDataService from '../../Service/TableDataServices';\nimport { CircularProgress } from \"@material-ui/core\";\nimport { Colorize } from \"@material-ui/icons\";\nimport Alert from '@material-ui/lab/Alert';\nimport IconButton from '@material-ui/core/IconButton';\nimport Collapse from '@material-ui/core/Collapse';\nimport Button from '@material-ui/core/Button';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from 'react-contextmenu';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Example extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rows: [],\n      rowStagedForInsertion: -1,\n      newRows: [],\n      columns: [],\n      loading: true,\n      selectedRow: -1,\n      alert: null,\n      tableDataService: new TableDataService()\n    };\n\n    this.handleClick = e => {\n      if (e.type === 'contextmenu') {\n        e.preventDefault();\n        this.insertEmptyRow(this.state.selectedRow);\n      }\n    };\n\n    this.handleCellChange = c => {\n      if (this.shouldProcessStagedRowInsert(c.rowIdx)) {\n        console.log(\"Changed row selection and a row is staged for insertion\");\n        this.addRow(this.state.rowStagedForInsertion);\n      }\n\n      this.state.selectedRow = c.rowIdx;\n    };\n\n    this.insertEmptyRow = idx => {\n      var emptyRow = {};\n      this.state.columns.forEach(col => {\n        emptyRow[col.key] = \"\";\n      });\n      var data = this.state.rows;\n\n      if (idx == -1) {\n        data.push(emptyRow);\n      } else {\n        data.splice(idx, 0, emptyRow); //Insert empty row at index idx\n      }\n\n      this.setState({\n        rows: data\n      });\n      this.state.newRows.push(idx);\n    };\n\n    this.rowsChanged = (rows, index) => {\n      var indexOfChangedRow = index.indexes[0];\n      var oldInstanceOfChangedRow = this.state.rows[indexOfChangedRow];\n      var newInstanceOfChangedRow = rows[indexOfChangedRow];\n\n      if (!this.state.newRows.includes(indexOfChangedRow)) {\n        //Changed row is not new, so we can update right away\n        this.updateRow(oldInstanceOfChangedRow, newInstanceOfChangedRow, indexOfChangedRow);\n      } else {\n        // Row is new, so we store locally and wait for a change in row before pushing the new row\n        this.setState({\n          rowStagedForInsertion: indexOfChangedRow\n        });\n        var rows = this.state.rows;\n        rows[indexOfChangedRow] = newInstanceOfChangedRow;\n        this.setState({\n          rows: rows\n        });\n      }\n    };\n\n    this.addRow = indexOfChangedRow => {\n      var data = {\n        newRow: this.state.rows[indexOfChangedRow]\n      };\n      console.log(data);\n      var newRowsEntryIndex = this.state.newRows.indexOf(indexOfChangedRow);\n      this.state.tableDataService.addTableData(this.props.table, data, function (data) {\n        this.state.newRows.splice(newRowsEntryIndex, 1); // Unmark row as new\n      }.bind(this), function (data) {\n        console.log(data);\n      }.bind(this));\n      this.setState({\n        rowStagedForInsertion: -1\n      }); // unset the row as staged for insertion \n    };\n\n    this.updateRow = (oldRow, newRow, index) => {\n      var data = [{\n        oldRow: oldRow,\n        newRow: newRow\n      }];\n      this.state.tableDataService.updateTableData(this.props.table, data, function (data) {\n        var rows = this.state.rows;\n        rows[index] = newRow;\n        this.setState({\n          rows: rows\n        });\n      }.bind(this), function (data) {\n        console.log(data);\n      }.bind(this));\n    };\n  }\n\n  componentDidMount() {\n    this.loadTableData();\n  }\n\n  loadTableData() {\n    this.state.tableDataService.getTableData(this.props.table, function (data) {\n      this.setState({\n        columns: this.createColumns(data.data.tableSchema.columns)\n      });\n      this.setState({\n        rows: data.data.data\n      });\n      this.setState({\n        loading: false\n      });\n    }.bind(this), function (data) {\n      console.log(data);\n      this.setState({\n        loading: false\n      });\n    }.bind(this));\n  }\n\n  createColumns(columns) {\n    return columns.map(col => {\n      var def = {\n        key: col.column,\n        name: col.column,\n        resizable: true,\n        nullable: col.nullable\n      };\n\n      if (col.editable) {\n        def.editor = TextEditor;\n      }\n\n      return def;\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ContextMenuTrigger, {\n        id: ID,\n        children: [this.state.alert && /*#__PURE__*/_jsxDEV(Collapse, {\n          in: this.state.alert != null,\n          style: {\n            marginBottom: \"2em\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Alert, {\n            severity: this.state.alert.severity,\n            action: /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"close\",\n              color: \"inherit\",\n              size: \"small\",\n              onClick: () => {\n                this.setState({\n                  alert: null\n                });\n              },\n              children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n                fontSize: \"inherit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 37\n            }, this),\n            children: this.state.alert.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(DataGrid, {\n          columns: this.state.columns,\n          rows: this.state.rows,\n          rowGetter: i => this.state.rows[i],\n          onRowsChange: this.rowsChanged,\n          enableCellSelect: true,\n          style: {\n            resize: 'both',\n            'height': \"70vh\",\n            maxWidth: \"100%\"\n          },\n          className: \"fill-grid\",\n          minHeight: \"1000\",\n          onSelectedCellChange: this.handleCellChange,\n          rowClass: row => this.state.alert && this.state.rows.indexOf(row) == this.state.alert.row ? `!background-color: #9370db` : undefined\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ContextMenu, {\n        id: ID,\n        children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n          data: {\n            action: 'copy'\n          },\n          onClick: handleClick,\n          attributes: attributes,\n          children: \"Copy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          data: {\n            action: 'paste'\n          },\n          onClick: handleClick,\n          attributes: attributes,\n          children: \"Paste\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          divider: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          data: {\n            action: 'delete'\n          },\n          onClick: handleClick,\n          attributes: attributes,\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this);\n  }\n\n  shouldProcessStagedRowInsert(rowIdx) {\n    if (rowIdx != this.state.selectedRow && this.state.rowStagedForInsertion != -1) {\n      // Changed row selection and a row is staged for insertion\n      var row = this.state.rows[this.state.rowStagedForInsertion];\n      var colsRequiringValue = this.state.columns.filter(col => {\n        if (!col.nullable && col.editor && !row[col.key]) {\n          return col.key;\n        }\n      });\n\n      if (colsRequiringValue.length == 0) {\n        this.setState({\n          alert: null\n        });\n        return true;\n      }\n\n      alert = {\n        severity: \"warning\",\n        message: \"The following columns require a value before entry is stored:\" + colsRequiringValue.map(col => \" \" + col.name),\n        row: rowIdx\n      };\n      this.setState({\n        alert: alert\n      });\n      console.log(alert);\n    }\n\n    return false;\n  }\n\n}\n\nexport default Example;","map":{"version":3,"sources":["C:/Users/vincent/git/playground/src/Components/Tables/SavageTable.js"],"names":["React","DataGrid","TextEditor","TableDataService","CircularProgress","Colorize","Alert","IconButton","Collapse","Button","CloseIcon","ContextMenu","MenuItem","ContextMenuTrigger","Example","Component","state","rows","rowStagedForInsertion","newRows","columns","loading","selectedRow","alert","tableDataService","handleClick","e","type","preventDefault","insertEmptyRow","handleCellChange","c","shouldProcessStagedRowInsert","rowIdx","console","log","addRow","idx","emptyRow","forEach","col","key","data","push","splice","setState","rowsChanged","index","indexOfChangedRow","indexes","oldInstanceOfChangedRow","newInstanceOfChangedRow","includes","updateRow","newRow","newRowsEntryIndex","indexOf","addTableData","props","table","bind","oldRow","updateTableData","componentDidMount","loadTableData","getTableData","createColumns","tableSchema","map","def","column","name","resizable","nullable","editable","editor","render","ID","marginBottom","severity","message","i","resize","maxWidth","row","undefined","action","attributes","colsRequiringValue","filter","length"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport DataGrid, { TextEditor } from \"react-data-grid\";\r\nimport \"./styles.css\";\r\nimport TableDataService from '../../Service/TableDataServices';\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport { Colorize } from \"@material-ui/icons\";\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Button from '@material-ui/core/Button';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from 'react-contextmenu'\r\n\r\n\r\nclass Example extends React.Component {\r\n\r\n\r\n    state = {\r\n        rows: [],\r\n        rowStagedForInsertion: -1,\r\n        newRows: [],\r\n        columns: [],\r\n        loading: true,\r\n        selectedRow: -1,\r\n        alert: null,\r\n        tableDataService: new TableDataService(),\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.loadTableData()\r\n    }\r\n\r\n    loadTableData() {\r\n        this.state.tableDataService.getTableData(this.props.table,\r\n            function (data) {\r\n                this.setState({ columns: this.createColumns(data.data.tableSchema.columns) })\r\n                this.setState({ rows: data.data.data })\r\n                this.setState({ loading: false })\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n                this.setState({ loading: false })\r\n            }.bind(this));\r\n    }\r\n\r\n    createColumns(columns) {\r\n        return columns.map(col => {\r\n            var def = {\r\n                key: col.column,\r\n                name: col.column,\r\n                resizable: true,\r\n                nullable: col.nullable\r\n            }\r\n            if (col.editable) {\r\n                def.editor = TextEditor\r\n            }\r\n            return def;\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.state.loading) {\r\n            return (<CircularProgress />)\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <ContextMenuTrigger id={ID}>\r\n                    {this.state.alert &&\r\n                        <Collapse in={this.state.alert != null} style={{ marginBottom: \"2em\" }}>\r\n                            <Alert\r\n                                severity={this.state.alert.severity}\r\n                                action={\r\n                                    <IconButton\r\n                                        aria-label=\"close\"\r\n                                        color=\"inherit\"\r\n                                        size=\"small\"\r\n                                        onClick={() => {\r\n                                            this.setState({ alert: null })\r\n                                        }}\r\n                                    >\r\n                                        <CloseIcon fontSize=\"inherit\" />\r\n                                    </IconButton>\r\n                                }\r\n                            >\r\n                                {this.state.alert.message}\r\n                            </Alert>\r\n                        </Collapse>\r\n                    }\r\n\r\n                    <DataGrid\r\n                        columns={this.state.columns}\r\n                        rows={this.state.rows}\r\n                        rowGetter={i => this.state.rows[i]}\r\n                        onRowsChange={this.rowsChanged}\r\n                        enableCellSelect={true}\r\n                        style={{ resize: 'both', 'height': \"70vh\", maxWidth: \"100%\" }}\r\n                        className=\"fill-grid\"\r\n                        minHeight=\"1000\"\r\n                        onSelectedCellChange={this.handleCellChange}\r\n\r\n                        rowClass={row => this.state.alert && this.state.rows.indexOf(row) == this.state.alert.row ? `!background-color: #9370db` : undefined}\r\n                    />\r\n                </ContextMenuTrigger>\r\n                <ContextMenu id={ID}>\r\n                    <MenuItem\r\n                        data={{ action: 'copy' }}\r\n                        onClick={handleClick}\r\n                        attributes={attributes}\r\n                    >\r\n                        Copy\r\n      </MenuItem>\r\n                    <MenuItem\r\n                        data={{ action: 'paste' }}\r\n                        onClick={handleClick}\r\n                        attributes={attributes}\r\n                    >\r\n                        Paste\r\n      </MenuItem>\r\n                    <MenuItem divider />\r\n                    <MenuItem\r\n                        data={{ action: 'delete' }}\r\n                        onClick={handleClick}\r\n                        attributes={attributes}\r\n                    >\r\n                        Delete\r\n      </MenuItem>\r\n                </ContextMenu>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        if (e.type === 'contextmenu') {\r\n            e.preventDefault()\r\n            this.insertEmptyRow(this.state.selectedRow)\r\n        }\r\n    }\r\n\r\n\r\n    handleCellChange = (c) => {\r\n        if (this.shouldProcessStagedRowInsert(c.rowIdx)) {\r\n            console.log(\"Changed row selection and a row is staged for insertion\")\r\n            this.addRow(this.state.rowStagedForInsertion)\r\n        }\r\n        this.state.selectedRow = c.rowIdx\r\n    }\r\n\r\n    shouldProcessStagedRowInsert(rowIdx) {\r\n        if (rowIdx != this.state.selectedRow && this.state.rowStagedForInsertion != -1) { // Changed row selection and a row is staged for insertion\r\n\r\n            var row = this.state.rows[this.state.rowStagedForInsertion]\r\n            var colsRequiringValue = this.state.columns.filter(col => {\r\n                if (!col.nullable && col.editor && !row[col.key]) {\r\n                    return col.key\r\n                }\r\n            })\r\n\r\n            if (colsRequiringValue.length == 0) {\r\n                this.setState({ alert: null })\r\n                return true\r\n\r\n            }\r\n\r\n            alert = {\r\n                severity: \"warning\",\r\n                message: \"The following columns require a value before entry is stored:\" + colsRequiringValue.map(col => \" \" + col.name),\r\n                row: rowIdx\r\n            }\r\n\r\n            this.setState({ alert: alert })\r\n            console.log(alert)\r\n        }\r\n        return false;\r\n    }\r\n\r\n    insertEmptyRow = (idx) => {\r\n        var emptyRow = {}\r\n        this.state.columns.forEach(col => { emptyRow[col.key] = \"\" })\r\n        var data = this.state.rows\r\n        if (idx == -1) {\r\n            data.push(emptyRow)\r\n        } else {\r\n            data.splice(idx, 0, emptyRow) //Insert empty row at index idx\r\n        }\r\n\r\n        this.setState({ rows: data })\r\n        this.state.newRows.push(idx)\r\n    }\r\n\r\n\r\n    rowsChanged = (rows, index) => {\r\n        var indexOfChangedRow = index.indexes[0];\r\n        var oldInstanceOfChangedRow = this.state.rows[indexOfChangedRow];\r\n        var newInstanceOfChangedRow = rows[indexOfChangedRow];\r\n\r\n        if (!this.state.newRows.includes(indexOfChangedRow)) { //Changed row is not new, so we can update right away\r\n            this.updateRow(oldInstanceOfChangedRow, newInstanceOfChangedRow, indexOfChangedRow)\r\n        }\r\n        else { // Row is new, so we store locally and wait for a change in row before pushing the new row\r\n            this.setState({ rowStagedForInsertion: indexOfChangedRow })\r\n            var rows = this.state.rows;\r\n            rows[indexOfChangedRow] = newInstanceOfChangedRow;\r\n            this.setState({ rows: rows })\r\n        }\r\n\r\n    }\r\n\r\n    addRow = (indexOfChangedRow) => {\r\n\r\n        var data = { newRow: this.state.rows[indexOfChangedRow] }\r\n        console.log(data)\r\n        var newRowsEntryIndex = this.state.newRows.indexOf(indexOfChangedRow)\r\n\r\n        this.state.tableDataService.addTableData(this.props.table, data,\r\n            function (data) {\r\n                this.state.newRows.splice(newRowsEntryIndex, 1); // Unmark row as new\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n            }.bind(this));\r\n\r\n        this.setState({ rowStagedForInsertion: -1 }) // unset the row as staged for insertion \r\n\r\n    }\r\n\r\n    updateRow = (oldRow, newRow, index) => {\r\n        var data = [\r\n            {\r\n                oldRow: oldRow,\r\n                newRow: newRow\r\n            },\r\n        ]\r\n\r\n        this.state.tableDataService.updateTableData(this.props.table, data,\r\n            function (data) {\r\n                var rows = this.state.rows;\r\n                rows[index] = newRow;\r\n                this.setState({ rows: rows })\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n            }.bind(this));\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Example;"]},"metadata":{},"sourceType":"module"}