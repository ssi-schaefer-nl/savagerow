{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\playground\\\\src\\\\Components\\\\Tables\\\\SavageTable.js\";\nimport React from \"react\";\nimport ReactDataGrid, { TextEditor } from \"react-data-grid\";\nimport \"./styles.css\";\nimport TableDataService from '../../Service/TableDataServices';\nimport { CircularProgress } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Example extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.insertEmptyRow = () => {\n      var emptyRow = {};\n      this.state.columns.forEach(col => {\n        emptyRow[col.key] = \"\";\n      });\n      var dataCopy = [];\n      dataCopy.concat(this.state.data);\n      dataCopy.unshift(emptyRow);\n      console.log(\"New data: \" + dataCopy);\n      this.setState({\n        data: dataCopy\n      });\n      console.log(\"actual data: \" + this.state.data);\n    };\n\n    this.state = {\n      rows: [],\n      loading: true,\n      tableDataService: new TableDataService(),\n      columns: [],\n      selectedRows: 1\n    };\n\n    this.onGridRowsUpdated = ({\n      fromRow,\n      toRow,\n      updated\n    }) => {\n      this.setState(state => {\n        const rows = state.rows.slice();\n\n        for (let i = fromRow; i <= toRow; i++) {\n          rows[i] = { ...rows[i],\n            ...updated\n          };\n        }\n\n        return {\n          rows\n        };\n      });\n    };\n\n    this.rowsChanged = (rows, index) => {\n      var rowIdx = index.indexes[0];\n      var oldRow = this.state.rows[rowIdx];\n      var changedRow = rows[rowIdx];\n\n      if (rowIdx == 0) {\n        this.addRow(changedRow, rowIdx);\n      } else {\n        this.updateRow(oldRow, changedRow, rowIdx);\n      }\n    };\n\n    this.addRow = (newRow, index) => {\n      var data = {\n        newRow\n      };\n      this.state.tableDataService.addTableData(this.props.table, data, function (data) {\n        var rows = this.state.rows;\n        rows.push(newRow);\n        this.setState({\n          rows: rows\n        });\n      }.bind(this), function (data) {\n        console.log(data);\n      }.bind(this));\n    };\n\n    this.updateRow = (oldRow, newRow, index) => {\n      var data = [{\n        oldRow: oldRow,\n        newRow: newRow\n      }];\n      this.state.tableDataService.updateTableData(this.props.table, data, function (data) {\n        var rows = this.state.rows;\n        rows[index] = newRow;\n        this.setState({\n          rows: rows\n        });\n      }.bind(this), function (data) {\n        console.log(data);\n      }.bind(this));\n    };\n\n    this.handleClick = e => {\n      if (e.type === 'click') {\n        console.log('Left click');\n      } else if (e.type === 'contextmenu') {\n        e.preventDefault();\n        this.insertEmptyRow();\n        console.log('Right click');\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.state.tableDataService.getTableData(this.props.table, function (data) {\n      this.setState({\n        columns: this.createColumns(data.data.tableSchema.columns)\n      });\n      this.setState({\n        rows: this.createRows(data.data.data)\n      });\n      this.setState({\n        loading: false\n      });\n    }.bind(this), function (data) {\n      console.log(data);\n      this.setState({\n        loading: false\n      });\n    }.bind(this));\n  }\n\n  createColumns(columns) {\n    return columns.map(col => {\n      var def = {\n        key: col.column,\n        name: col.column,\n        resizable: true\n      };\n\n      if (col.editable) {\n        def.editor = TextEditor;\n      }\n\n      return def;\n    });\n  }\n\n  createRows(data) {\n    if (data.data === undefined) {\n      console.log(\"AAAAAAAAAAAAAAAAAAAA\");\n      return [];\n    }\n\n    return data;\n  }\n\n  render() {\n    if (this.state.loading) {\n      return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: this.handleClick,\n      onContextMenu: this.handleClick,\n      children: /*#__PURE__*/_jsxDEV(ReactDataGrid, {\n        columns: this.state.columns,\n        rows: this.state.rows,\n        rowGetter: i => this.state.rows[i],\n        onGridRowsUpdated: this.onGridRowsUpdated,\n        onRowsChange: this.rowsChanged,\n        enableCellSelect: true,\n        style: {\n          resize: 'both',\n          'height': \"70vh\",\n          maxWidth: \"100%\"\n        },\n        className: \"fill-grid\",\n        minHeight: \"1000\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Example;","map":{"version":3,"sources":["C:/Users/vincent/git/playground/src/Components/Tables/SavageTable.js"],"names":["React","ReactDataGrid","TextEditor","TableDataService","CircularProgress","Example","Component","insertEmptyRow","emptyRow","state","columns","forEach","col","key","dataCopy","concat","data","unshift","console","log","setState","rows","loading","tableDataService","selectedRows","onGridRowsUpdated","fromRow","toRow","updated","slice","i","rowsChanged","index","rowIdx","indexes","oldRow","changedRow","addRow","updateRow","newRow","addTableData","props","table","push","bind","updateTableData","handleClick","e","type","preventDefault","componentDidMount","getTableData","createColumns","tableSchema","createRows","map","def","column","name","resizable","editable","editor","undefined","render","resize","maxWidth"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport ReactDataGrid, { TextEditor } from \"react-data-grid\";\r\nimport \"./styles.css\";\r\nimport TableDataService from '../../Service/TableDataServices';\r\nimport { CircularProgress } from \"@material-ui/core\";\r\n\r\n\r\nclass Example extends React.Component {\r\n    componentDidMount() {\r\n        this.state.tableDataService.getTableData(this.props.table,\r\n            function (data) {\r\n                this.setState({ columns: this.createColumns(data.data.tableSchema.columns) })\r\n                this.setState({ rows: this.createRows(data.data.data) })\r\n                this.setState({ loading: false })\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n                this.setState({ loading: false })\r\n            }.bind(this));\r\n\r\n    }\r\n\r\n    createColumns(columns) {\r\n        return columns.map(col => {\r\n            var def = {\r\n                key: col.column,\r\n                name: col.column,\r\n                resizable: true\r\n            }\r\n            if (col.editable) {\r\n                def.editor = TextEditor\r\n            }\r\n            return def;\r\n        })\r\n    }\r\n\r\n    createRows(data) {\r\n        if(data.data === undefined) {\r\n            console.log(\"AAAAAAAAAAAAAAAAAAAA\")\r\n\r\n            return []\r\n        }\r\n        return data\r\n    }\r\n\r\n    insertEmptyRow = () => {\r\n        var emptyRow = {}\r\n        this.state.columns.forEach(col => {emptyRow[col.key] = \"\"})\r\n        var dataCopy = []\r\n        dataCopy.concat(this.state.data)\r\n        dataCopy.unshift(emptyRow)\r\n        console.log(\"New data: \" + dataCopy)\r\n        this.setState({data: dataCopy})\r\n        console.log(\"actual data: \" + this.state.data)\r\n    }\r\n\r\n    state = {\r\n        rows: [],\r\n        loading: true,\r\n        tableDataService: new TableDataService(),\r\n        columns: [],\r\n        selectedRows: 1,\r\n    };\r\n\r\n\r\n    onGridRowsUpdated = ({ fromRow, toRow, updated }) => {\r\n        this.setState(state => {\r\n            const rows = state.rows.slice();\r\n            for (let i = fromRow; i <= toRow; i++) {\r\n                rows[i] = { ...rows[i], ...updated };\r\n            }\r\n            return { rows };\r\n        });\r\n    };\r\n\r\n    rowsChanged = (rows, index) => {\r\n        var rowIdx = index.indexes[0];\r\n        var oldRow = this.state.rows[rowIdx];\r\n        var changedRow = rows[rowIdx];\r\n\r\n\r\n        if (rowIdx == 0) {\r\n            this.addRow(changedRow, rowIdx)\r\n        } else {\r\n            this.updateRow(oldRow, changedRow, rowIdx)\r\n        }\r\n    }\r\n\r\n    addRow = (newRow, index) => {\r\n        var data = { newRow }\r\n        this.state.tableDataService.addTableData(this.props.table, data,\r\n            function (data) {\r\n                var rows = this.state.rows;\r\n                rows.push(newRow)\r\n                this.setState({ rows: rows })\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n            }.bind(this));\r\n\r\n    }\r\n\r\n    updateRow = (oldRow, newRow, index) => {\r\n        var data = [\r\n            {\r\n                oldRow: oldRow,\r\n                newRow: newRow\r\n            },\r\n        ]\r\n\r\n        this.state.tableDataService.updateTableData(this.props.table, data,\r\n            function (data) {\r\n                var rows = this.state.rows;\r\n                rows[index] = newRow;\r\n                this.setState({ rows: rows })\r\n            }.bind(this),\r\n            function (data) {\r\n                console.log(data)\r\n            }.bind(this));\r\n\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        if (e.type === 'click') {\r\n            console.log('Left click');\r\n        } else if (e.type === 'contextmenu') {\r\n            e.preventDefault();\r\n            this.insertEmptyRow()\r\n            console.log('Right click');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.loading) {\r\n            return (<CircularProgress />)\r\n        }\r\n\r\n        return (\r\n            <div onClick={this.handleClick} onContextMenu={this.handleClick}>\r\n                <ReactDataGrid\r\n                    columns={this.state.columns}\r\n                    rows={this.state.rows}\r\n                    rowGetter={i => this.state.rows[i]}\r\n                    onGridRowsUpdated={this.onGridRowsUpdated}\r\n                    onRowsChange={this.rowsChanged}\r\n                    enableCellSelect={true}\r\n                    style={{ resize: 'both', 'height': \"70vh\", maxWidth: \"100%\" }}\r\n                    className=\"fill-grid\"\r\n                    minHeight=\"1000\"\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example;"]},"metadata":{},"sourceType":"module"}