{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\playground\\\\src\\\\Components\\\\Table\\\\Table.js\";\nimport React, { Component } from 'react';\nimport DataGrid, { TextEditor } from \"react-data-grid\";\nimport TableDataService from '../../Service/TableDataServices';\nimport { CircularProgress } from '@material-ui/core';\nimport CollapsableAlert from '../CollapsableAlert/CollapsableAlert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SavageTable extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tableDataService: new TableDataService(),\n      alert: null,\n      columns: [],\n      rows: [],\n      unsavedRowsIndices: [],\n      // Rows that are inserted to the table but not yet saved to the database\n      indexOfSelectedRow: null\n    };\n\n    this.loadTableData = () => {\n      this.state.tableDataService.getTableData(this.props.table, function (data) {\n        var rows = data.data.data;\n        var columns = data.data.tableSchema.columns;\n        var emptyRow = {};\n        this.state.columns.forEach(col => {\n          emptyRow[col.key] = \"\";\n        });\n        var emptyRowIndex = rows.push(emptyRow) - 1;\n        this.setState({\n          columns: columns.map(col => ({\n            key: col.column,\n            name: col.column,\n            resizable: true,\n            nullable: col.nullable,\n            editor: col.editable ? TextEditor : undefined\n          })),\n          rows: data.data.data,\n          loading: false,\n          unsavedRowsIndices: [emptyRowIndex]\n        });\n      }.bind(this), function (data) {\n        console.log(data);\n        this.setState({\n          loading: false\n        });\n      }.bind(this));\n    };\n\n    this.contextMenuItems = {\n      \"Insert\": () => {\n        this.insertRow();\n      },\n      \"Delete\": () => {\n        this.deleteRow();\n      },\n      \"Save\": () => {\n        this.save();\n      },\n      \"Reload\": () => {\n        this.loadTableData();\n      }\n    };\n\n    this.insertRow = () => {\n      var insertRowBeforeIndex = this.state.indexOfSelectedRow;\n      var newRow = {};\n      this.state.columns.forEach(col => {\n        newRow[col.key] = \"\";\n      });\n      var rows = this.state.rows;\n      rows.splice(insertRowBeforeIndex, 0, newRow); //Insert empty row at index idx\n\n      this.setState({\n        rows: rows\n      });\n      this.state.unsavedRowsIndices.push(insertRowBeforeIndex);\n    };\n\n    this.deleteRow = () => {\n      var rowSelectedForDeletion = this.state.indexOfSelectedRow;\n\n      if (this.state.unsavedRowsIndices.includes(rowSelectedForDeletion)) {\n        this.removeRowFromTable(rowSelectedForDeletion);\n      } else {\n        var data = {\n          row: this.state.rows[rowSelectedForDeletion]\n        };\n        this.state.tableDataService.deleteTableData(this.props.table, data, function () {\n          this.removeRowFromTable(rowSelectedForDeletion);\n        }.bind(this), function (data) {\n          console.log(data);\n        }.bind(this));\n      }\n    };\n\n    this.removeRowFromTable = rowIndex => {\n      var data = this.state.rows;\n      data.splice(rowIndex, 1);\n      this.setState({\n        rows: data\n      });\n    };\n\n    this.save = () => {\n      var columnsWithMissingData = [];\n      var alert = null;\n      this.state.unsavedRowsIndices.forEach(unsavedRowIndex => {\n        var unsavedRow = this.state.rows[unsavedRowIndex];\n        var colsRequiringValue = this.state.columns.filter(col => {\n          if (!col.nullable && col.editor && !unsavedRow[col.key]) {\n            if (columnsWithMissingData.indexOf(col.key) === -1) {\n              columnsWithMissingData.push(col.key);\n            }\n\n            return col.key;\n          }\n        });\n\n        if (colsRequiringValue.length == 0) {\n          this.saveRow(unsavedRowIndex);\n        }\n      });\n\n      if (columnsWithMissingData.length > 0) {\n        alert = {\n          severity: \"warning\",\n          message: \"The following columns require a value before entry is stored:\" + columnsWithMissingData.map(col => \" \" + col.name)\n        };\n      }\n\n      this.setState({\n        alert: alert\n      });\n    };\n\n    this.saveRow = rowIndex => {\n      var data = {\n        row: this.state.rows[rowIndex]\n      };\n      this.state.tableDataService.addTableData(this.props.table, data, function (data) {\n        // todo We should get the inserte row as a response, so that we receive automatically set values\n        var idx = this.state.unsavedRow.indexOf(rowIndex);\n        this.state.newRows.splice(idx, 1); // Unmark row as new\n      }.bind(this), function (data) {\n        console.log(data);\n      }.bind(this));\n    };\n\n    this.update = (updatedRows, index) => {\n      var indexOfUpdatedRow = index.indexes[0];\n\n      if (this.state.unsavedRowsIndices.includes(indexOfUpdatedRow)) {\n        return;\n      }\n\n      var oldInstanceOfUpdatedRow = this.state.rows[indexOfUpdatedRow];\n      var newInstanceOfUpdatedRow = updatedRows[indexOfUpdatedRow];\n      var data = [{\n        oldRow: oldInstanceOfUpdatedRow,\n        newRow: newInstanceOfUpdatedRow\n      }];\n      this.state.tableDataService.updateTableData(this.props.table, data, function (data) {\n        // todo We should get the updated row as a response, so that we receive automatically set values\n        var rows = this.state.rows;\n        rows[index] = newInstanceOfUpdatedRow;\n        this.setState({\n          rows: rows\n        });\n      }.bind(this), function (data) {\n        console.log(data);\n      }.bind(this));\n    };\n  }\n\n  componentDidMount() {\n    this.loadTableData();\n  }\n\n  render() {\n    if (this.state.loading) {\n      return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.alert && /*#__PURE__*/_jsxDEV(CollapsableAlert, {\n        severity: this.state.alert.severity,\n        message: this.state.alert.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 30\n      }, this), /*#__PURE__*/_jsxDEV(ContentWithContextMenu, {\n        content: /*#__PURE__*/_jsxDEV(DataGrid, {\n          columns: this.state.columns,\n          rows: this.state.rows,\n          rowGetter: i => this.state.rows[i],\n          onRowsChange: this.update,\n          enableCellSelect: true,\n          style: {\n            resize: 'both',\n            'height': \"70vh\",\n            maxWidth: \"100%\"\n          },\n          className: \"fill-grid\",\n          minHeight: \"1000\",\n          onSelectedCellChange: this.handleCellChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this),\n        menuItems: Object.keys(this.contextMenuItems),\n        action: a => this.contextMenuItems[a]()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default SavageTable;","map":{"version":3,"sources":["C:/Users/vincent/git/playground/src/Components/Table/Table.js"],"names":["React","Component","DataGrid","TextEditor","TableDataService","CircularProgress","CollapsableAlert","SavageTable","state","tableDataService","alert","columns","rows","unsavedRowsIndices","indexOfSelectedRow","loadTableData","getTableData","props","table","data","tableSchema","emptyRow","forEach","col","key","emptyRowIndex","push","setState","map","column","name","resizable","nullable","editor","editable","undefined","loading","bind","console","log","contextMenuItems","insertRow","deleteRow","save","insertRowBeforeIndex","newRow","splice","rowSelectedForDeletion","includes","removeRowFromTable","row","deleteTableData","rowIndex","columnsWithMissingData","unsavedRowIndex","unsavedRow","colsRequiringValue","filter","indexOf","length","saveRow","severity","message","addTableData","idx","newRows","update","updatedRows","index","indexOfUpdatedRow","indexes","oldInstanceOfUpdatedRow","newInstanceOfUpdatedRow","oldRow","updateTableData","componentDidMount","render","i","resize","maxWidth","handleCellChange","Object","keys","a"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport DataGrid, { TextEditor } from \"react-data-grid\";\r\n\r\nimport TableDataService from '../../Service/TableDataServices';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport CollapsableAlert from '../CollapsableAlert/CollapsableAlert';\r\n\r\nclass SavageTable extends Component {\r\n  state = {\r\n    tableDataService: new TableDataService(),\r\n    alert: null,\r\n    columns: [],\r\n    rows: [],\r\n    unsavedRowsIndices: [], // Rows that are inserted to the table but not yet saved to the database\r\n    indexOfSelectedRow: null,\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadTableData()\r\n  }\r\n\r\n  loadTableData = () => {\r\n    this.state.tableDataService.getTableData(this.props.table,\r\n      function (data) {\r\n        var rows = data.data.data\r\n        var columns = data.data.tableSchema.columns;\r\n        var emptyRow = {}\r\n        this.state.columns.forEach(col => { emptyRow[col.key] = \"\" })\r\n        var emptyRowIndex = rows.push(emptyRow) - 1\r\n\r\n        this.setState({\r\n          columns: columns.map(col => ({ \r\n            key: col.column,\r\n            name: col.column,\r\n            resizable: true,\r\n            nullable: col.nullable,\r\n            editor: col.editable ? TextEditor : undefined\r\n          })),\r\n\r\n          rows: data.data.data,\r\n          loading: false,\r\n          unsavedRowsIndices: [emptyRowIndex]\r\n        })\r\n\r\n      }.bind(this),\r\n      function (data) {\r\n        console.log(data)\r\n        this.setState({ loading: false })\r\n      }.bind(this));\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loading) {\r\n      return (<CircularProgress />)\r\n    }\r\n    return (\r\n\r\n      <div>\r\n        {this.state.alert && <CollapsableAlert severity={this.state.alert.severity} message={this.state.alert.message} />}\r\n        <ContentWithContextMenu\r\n          content={\r\n            <DataGrid\r\n              columns={this.state.columns}\r\n              rows={this.state.rows}\r\n              rowGetter={i => this.state.rows[i]}\r\n              onRowsChange={this.update}\r\n              enableCellSelect={true}\r\n              style={{ resize: 'both', 'height': \"70vh\", maxWidth: \"100%\" }}\r\n              className=\"fill-grid\"\r\n              minHeight=\"1000\"\r\n              onSelectedCellChange={this.handleCellChange}\r\n            />\r\n          }\r\n          menuItems={Object.keys(this.contextMenuItems)}\r\n          action={(a) => this.contextMenuItems[a]()}\r\n        />\r\n      </div >\r\n    );\r\n  }\r\n\r\n  contextMenuItems = {\r\n    \"Insert\": () => { this.insertRow() },\r\n    \"Delete\": () => { this.deleteRow() },\r\n    \"Save\": () => { this.save() },\r\n    \"Reload\": () => { this.loadTableData() }\r\n  }\r\n\r\n\r\n  insertRow = () => {\r\n    var insertRowBeforeIndex = this.state.indexOfSelectedRow;\r\n    var newRow = {}\r\n    this.state.columns.forEach(col => { newRow[col.key] = \"\" })\r\n    var rows = this.state.rows\r\n\r\n    rows.splice(insertRowBeforeIndex, 0, newRow) //Insert empty row at index idx\r\n\r\n    this.setState({ rows: rows })\r\n    this.state.unsavedRowsIndices.push(insertRowBeforeIndex)\r\n  }\r\n\r\n  deleteRow = () => {\r\n    var rowSelectedForDeletion = this.state.indexOfSelectedRow\r\n\r\n    if (this.state.unsavedRowsIndices.includes(rowSelectedForDeletion)) {\r\n      this.removeRowFromTable(rowSelectedForDeletion)\r\n    }\r\n    else {\r\n      var data = { row: this.state.rows[rowSelectedForDeletion] }\r\n\r\n      this.state.tableDataService.deleteTableData(\r\n        this.props.table,\r\n        data,\r\n        function () {\r\n          this.removeRowFromTable(rowSelectedForDeletion)\r\n        }.bind(this),\r\n        function (data) {\r\n          console.log(data)\r\n        }.bind(this));\r\n    }\r\n  }\r\n\r\n  removeRowFromTable = (rowIndex) => {\r\n    var data = this.state.rows\r\n    data.splice(rowIndex, 1)\r\n    this.setState({ rows: data })\r\n  }\r\n\r\n  save = () => {\r\n    var columnsWithMissingData = []\r\n    var alert = null\r\n\r\n    this.state.unsavedRowsIndices.forEach(unsavedRowIndex => {\r\n      var unsavedRow = this.state.rows[unsavedRowIndex]\r\n      var colsRequiringValue = this.state.columns.filter(col => {\r\n        if (!col.nullable && col.editor && !unsavedRow[col.key]) {\r\n          if (columnsWithMissingData.indexOf(col.key) === -1) {\r\n            columnsWithMissingData.push(col.key);\r\n          }\r\n          return col.key\r\n        }\r\n      })\r\n      if (colsRequiringValue.length == 0) {\r\n        this.saveRow(unsavedRowIndex)\r\n      }\r\n    })\r\n\r\n    if (columnsWithMissingData.length > 0) {\r\n      alert = {\r\n        severity: \"warning\",\r\n        message: \"The following columns require a value before entry is stored:\" + columnsWithMissingData.map(col => \" \" + col.name),\r\n      }\r\n    }\r\n    this.setState({ alert: alert })\r\n\r\n  }\r\n\r\n  saveRow = (rowIndex) => {\r\n    var data = { row: this.state.rows[rowIndex] }\r\n\r\n    this.state.tableDataService.addTableData(this.props.table, data,\r\n      function (data) {\r\n        // todo We should get the inserte row as a response, so that we receive automatically set values\r\n        var idx = this.state.unsavedRow.indexOf(rowIndex)\r\n        this.state.newRows.splice(idx, 1); // Unmark row as new\r\n      }.bind(this),\r\n      function (data) {\r\n        console.log(data)\r\n      }.bind(this));\r\n  }\r\n\r\n  update = (updatedRows, index) => {\r\n    var indexOfUpdatedRow = index.indexes[0];\r\n    if (this.state.unsavedRowsIndices.includes(indexOfUpdatedRow)) {\r\n      return\r\n    }\r\n\r\n    var oldInstanceOfUpdatedRow = this.state.rows[indexOfUpdatedRow];\r\n    var newInstanceOfUpdatedRow = updatedRows[indexOfUpdatedRow];\r\n    var data = [{ oldRow: oldInstanceOfUpdatedRow, newRow: newInstanceOfUpdatedRow }]\r\n\r\n    this.state.tableDataService.updateTableData(this.props.table, data,\r\n      function (data) {\r\n        // todo We should get the updated row as a response, so that we receive automatically set values\r\n        var rows = this.state.rows;\r\n        rows[index] = newInstanceOfUpdatedRow;\r\n        this.setState({ rows: rows })\r\n      }.bind(this),\r\n      function (data) {\r\n        console.log(data)\r\n      }.bind(this));\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default SavageTable;"]},"metadata":{},"sourceType":"module"}