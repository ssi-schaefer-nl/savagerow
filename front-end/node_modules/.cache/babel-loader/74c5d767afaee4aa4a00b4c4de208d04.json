{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\savagerow\\\\front-end\\\\src\\\\Components\\\\Table\\\\Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState } from 'react';\nimport DataGrid, { TextEditor } from \"react-data-grid\";\nimport TableService from '../../Service/TableService';\nimport { CircularProgress, Typography } from '@material-ui/core';\nimport CollapsableAlert from '../CollapsableAlert/CollapsableAlert';\nimport ContentWithContextMenu from '../ContentWithContextMenu/ContentWithContextMenu';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport { green, grey, yellow } from '@material-ui/core/colors';\nimport SyncIcon from '@material-ui/icons/Sync';\nimport StorageIcon from '@material-ui/icons/Storage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SavageTable(props) {\n  _s();\n\n  const tableService = new TableService();\n  const tableManager = new TableManager(props.table);\n  const [exceptions, setExceptions] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [loading, setLoading] = useState(true);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DataGrid, {\n      columns: columns,\n      rows: tableManager.getRowSet(),\n      rowGetter: i => this.tableManager.getRow[i],\n      onRowsChange: this.update,\n      enableCellSelect: true,\n      style: {\n        'height': \"70vh\",\n        overflowX: 'hidden'\n      },\n      className: \"fill-grid\",\n      minHeight: \"1000\",\n      onSelectedCellChange: this.handleCellChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BottomNavigation, {\n      showLabels: true,\n      style: {\n        backgroundColor: grey[50],\n        borderWidth: 0.5,\n        borderStyle: \"solid\",\n        borderColor: grey[300]\n      },\n      children: [this.state.unsavedRowsIndices.length > 0 && /*#__PURE__*/_jsxDEV(BottomNavigationAction, {\n        label: \"Unsaved rows\",\n        icon: /*#__PURE__*/_jsxDEV(SyncIcon, {\n          style: {\n            color: yellow[500]\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(BottomNavigationAction, {\n        label: \"Rows: \" + this.state.rows.length,\n        icon: /*#__PURE__*/_jsxDEV(StorageIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 81\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BottomNavigationAction, {\n        label: \"Columns: \" + this.state.columns.length,\n        icon: /*#__PURE__*/_jsxDEV(StorageIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 87\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} // class ST extends Component {\n//   state = {\n//     tableDataService: new TableService(),\n//     tableManager: new TableManager(this.props.table),\n//     alert: null,\n//     columns: [],\n//     dataLoadingError: false,\n//     loading: true,\n//   }\n//   componentDidMount() {\n//     this.state.tableDataService.getSchemaOfTable(this.props.table,\n//       function (data) {\n//         var columns = data.data.columns.map(col => ({\n//           key: col.column,\n//           name: col.column,\n//           resizable: true,\n//           nullable: col.nullable,\n//           editor: col.editable ? TextEditor : undefined\n//         }));\n//         this.setState({\n//           columns: columns,\n//           loading: false,\n//           indexOfSelectedRow: rows.length,\n//         })\n//       }.bind(this),\n//       function (data) {\n//         console.log(data)\n//         this.setState({ loading: false, dataLoadingError: true })\n//       }.bind(this));\n//   }\n//   render() {\n//     if (this.state.loading) {\n//       return (<CircularProgress />)\n//     }\n//     if (this.state.dataLoadingError) {\n//       window.location.reload(false)\n//     }\n//     return (\n//       <div>\n//         {this.state.alert &&\n//           <CollapsableAlert\n//             severity={this.state.alert.severity}\n//             message={this.state.alert.message}\n//             onClose={() => this.setState({ alert: null })}\n//           />}\n//         <ContentWithContextMenu\n//           content={\n//             <DataGrid\n//               columns={this.state.columns}\n//               rows={this.tableManager.getRowSet()}\n//               rowGetter={i => this.tableManager.getRow[i]}\n//               onRowsChange={this.update}\n//               enableCellSelect={true}\n//               style={{ 'height': \"70vh\", overflowX: 'hidden' }}\n//               className=\"fill-grid\"\n//               minHeight=\"1000\"\n//               onSelectedCellChange={this.handleCellChange}\n//             />\n//           }\n//           menuItems={Object.keys(this.contextMenuItems)}\n//           action={(a) => this.contextMenuItems[a]()}\n//         />\n//         <BottomNavigation showLabels style={{ backgroundColor: grey[50], borderWidth: 0.5, borderStyle: \"solid\", borderColor: grey[300] }}>\n//           {this.state.unsavedRowsIndices.length > 0 &&\n//             <BottomNavigationAction\n//               label=\"Unsaved rows\"\n//               icon={<SyncIcon style={{ color: yellow[500] }} />}\n//             />\n//           }\n//           <BottomNavigationAction label={\"Rows: \" + this.state.rows.length} icon={<StorageIcon />} />\n//           <BottomNavigationAction label={\"Columns: \" + this.state.columns.length} icon={<StorageIcon />} />\n//         </BottomNavigation>\n//       </div >\n//     );\n//   }\n//   contextMenuItems = {\n//     \"Insert\": () => { this.insertRow(this.) },\n//     \"Delete\": () => { this.deleteRow() },\n//     \"Save\": () => { this.save(true) },\n//     \"Reload\": () => { this.loadTableData() }\n//   }\n//   handleCellChange = (c) => {\n//     if (c.rowIdx != this.state.indexOfSelectedRow && this.state.unsavedRowsIndices.includes(this.state.indexOfSelectedRow)) {\n//       this.save(false)\n//     }\n//     this.state.indexOfSelectedRow = c.rowIdx\n//   }\n//   update = (rows, index) => {\n//     var indexOfUpdatedRow = index.indexes[0];\n//     var updatedRow = rows[indexOfUpdatedRow];\n//     this.tableManager.update(updatedRow, index)\n//   }\n// }\n\n_s(SavageTable, \"KTfouOu8gtapciXtbW9wX0vMqw0=\");\n\n_c = SavageTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"SavageTable\");","map":{"version":3,"sources":["C:/Users/vincent/git/savagerow/front-end/src/Components/Table/Table.js"],"names":["React","Component","useState","DataGrid","TextEditor","TableService","CircularProgress","Typography","CollapsableAlert","ContentWithContextMenu","BottomNavigation","BottomNavigationAction","LocationOnIcon","green","grey","yellow","SyncIcon","StorageIcon","SavageTable","props","tableService","tableManager","TableManager","table","exceptions","setExceptions","columns","setColumns","loading","setLoading","getRowSet","i","getRow","update","overflowX","handleCellChange","backgroundColor","borderWidth","borderStyle","borderColor","state","unsavedRowsIndices","length","color","rows"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react';\r\nimport DataGrid, { TextEditor } from \"react-data-grid\";\r\n\r\nimport TableService from '../../Service/TableService';\r\nimport { CircularProgress, Typography } from '@material-ui/core';\r\nimport CollapsableAlert from '../CollapsableAlert/CollapsableAlert';\r\nimport ContentWithContextMenu from '../ContentWithContextMenu/ContentWithContextMenu';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport { green, grey, yellow } from '@material-ui/core/colors';\r\nimport SyncIcon from '@material-ui/icons/Sync';\r\nimport StorageIcon from '@material-ui/icons/Storage';\r\n\r\n\r\n\r\nexport default function SavageTable(props) {\r\n  const tableService = new TableService()\r\n  const tableManager = new TableManager(props.table)\r\n  const [exceptions, setExceptions] = useState([])\r\n  const [columns, setColumns] = useState([])\r\n  const [loading, setLoading] = useState(true)\r\n\r\n\r\n  return (\r\n    <>\r\n      <DataGrid\r\n        columns={columns}\r\n        rows={tableManager.getRowSet()}\r\n        rowGetter={i => this.tableManager.getRow[i]}\r\n        onRowsChange={this.update}\r\n        enableCellSelect={true}\r\n        style={{ 'height': \"70vh\", overflowX: 'hidden' }}\r\n        className=\"fill-grid\"\r\n        minHeight=\"1000\"\r\n        onSelectedCellChange={this.handleCellChange}\r\n      />\r\n      <BottomNavigation showLabels style={{ backgroundColor: grey[50], borderWidth: 0.5, borderStyle: \"solid\", borderColor: grey[300] }}>\r\n        {this.state.unsavedRowsIndices.length > 0 &&\r\n          <BottomNavigationAction\r\n            label=\"Unsaved rows\"\r\n            icon={<SyncIcon style={{ color: yellow[500] }} />}\r\n          />\r\n        }\r\n        <BottomNavigationAction label={\"Rows: \" + this.state.rows.length} icon={<StorageIcon />} />\r\n        <BottomNavigationAction label={\"Columns: \" + this.state.columns.length} icon={<StorageIcon />} />\r\n      </BottomNavigation>\r\n    </>\r\n  )\r\n\r\n\r\n\r\n}\r\n// class ST extends Component {\r\n//   state = {\r\n//     tableDataService: new TableService(),\r\n//     tableManager: new TableManager(this.props.table),\r\n//     alert: null,\r\n//     columns: [],\r\n//     dataLoadingError: false,\r\n//     loading: true,\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     this.state.tableDataService.getSchemaOfTable(this.props.table,\r\n//       function (data) {\r\n//         var columns = data.data.columns.map(col => ({\r\n//           key: col.column,\r\n//           name: col.column,\r\n//           resizable: true,\r\n//           nullable: col.nullable,\r\n//           editor: col.editable ? TextEditor : undefined\r\n//         }));\r\n\r\n//         this.setState({\r\n//           columns: columns,\r\n//           loading: false,\r\n//           indexOfSelectedRow: rows.length,\r\n//         })\r\n\r\n//       }.bind(this),\r\n//       function (data) {\r\n//         console.log(data)\r\n//         this.setState({ loading: false, dataLoadingError: true })\r\n//       }.bind(this));\r\n//   }\r\n\r\n//   render() {\r\n//     if (this.state.loading) {\r\n//       return (<CircularProgress />)\r\n//     }\r\n//     if (this.state.dataLoadingError) {\r\n//       window.location.reload(false)\r\n//     }\r\n//     return (\r\n//       <div>\r\n//         {this.state.alert &&\r\n//           <CollapsableAlert\r\n//             severity={this.state.alert.severity}\r\n//             message={this.state.alert.message}\r\n//             onClose={() => this.setState({ alert: null })}\r\n//           />}\r\n//         <ContentWithContextMenu\r\n//           content={\r\n//             <DataGrid\r\n//               columns={this.state.columns}\r\n//               rows={this.tableManager.getRowSet()}\r\n//               rowGetter={i => this.tableManager.getRow[i]}\r\n//               onRowsChange={this.update}\r\n//               enableCellSelect={true}\r\n//               style={{ 'height': \"70vh\", overflowX: 'hidden' }}\r\n//               className=\"fill-grid\"\r\n//               minHeight=\"1000\"\r\n//               onSelectedCellChange={this.handleCellChange}\r\n//             />\r\n//           }\r\n//           menuItems={Object.keys(this.contextMenuItems)}\r\n//           action={(a) => this.contextMenuItems[a]()}\r\n//         />\r\n//         <BottomNavigation showLabels style={{ backgroundColor: grey[50], borderWidth: 0.5, borderStyle: \"solid\", borderColor: grey[300] }}>\r\n//           {this.state.unsavedRowsIndices.length > 0 &&\r\n//             <BottomNavigationAction\r\n//               label=\"Unsaved rows\"\r\n//               icon={<SyncIcon style={{ color: yellow[500] }} />}\r\n//             />\r\n//           }\r\n\r\n//           <BottomNavigationAction label={\"Rows: \" + this.state.rows.length} icon={<StorageIcon />} />\r\n//           <BottomNavigationAction label={\"Columns: \" + this.state.columns.length} icon={<StorageIcon />} />\r\n//         </BottomNavigation>\r\n//       </div >\r\n//     );\r\n//   }\r\n\r\n//   contextMenuItems = {\r\n//     \"Insert\": () => { this.insertRow(this.) },\r\n//     \"Delete\": () => { this.deleteRow() },\r\n//     \"Save\": () => { this.save(true) },\r\n//     \"Reload\": () => { this.loadTableData() }\r\n//   }\r\n\r\n//   handleCellChange = (c) => {\r\n//     if (c.rowIdx != this.state.indexOfSelectedRow && this.state.unsavedRowsIndices.includes(this.state.indexOfSelectedRow)) {\r\n//       this.save(false)\r\n//     }\r\n//     this.state.indexOfSelectedRow = c.rowIdx\r\n//   }\r\n\r\n//   update = (rows, index) => {\r\n//     var indexOfUpdatedRow = index.indexes[0];\r\n//     var updatedRow = rows[indexOfUpdatedRow];\r\n//     this.tableManager.update(updatedRow, index)\r\n//   }\r\n// }\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}