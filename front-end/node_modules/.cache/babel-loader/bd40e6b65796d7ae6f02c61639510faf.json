{"ast":null,"code":"import React from 'react';\nvar RuleType;\n\n(function (RuleType) {\n  RuleType[RuleType[\"Number\"] = 1] = \"Number\";\n  RuleType[RuleType[\"Range\"] = 2] = \"Range\";\n  RuleType[RuleType[\"GreaterThen\"] = 3] = \"GreaterThen\";\n  RuleType[RuleType[\"LessThen\"] = 4] = \"LessThen\";\n})(RuleType || (RuleType = {}));\n\nexport default function NumericFilter(_a) {\n  var column = _a.column,\n      onChange = _a.onChange;\n  /** Validates the input */\n\n  function handleKeyPress(event) {\n    var result = /[><,0-9-]/.test(event.key);\n\n    if (result === false) {\n      event.preventDefault();\n    }\n  }\n\n  function handleChange(event) {\n    var value = event.target.value;\n    var filters = getRules(value);\n    onChange({\n      filterTerm: filters.length > 0 ? filters : null,\n      column: column,\n      rawValue: value,\n      filterValues: filterValues\n    });\n  }\n\n  var inputKey = \"header-filter-\" + column.key;\n  var tooltipText = 'Input Methods: Range (x-y), Greater Than (>x), Less Than (<y)';\n  return React.createElement(\"div\", {\n    className: \"rdg-filter-container\"\n  }, React.createElement(\"input\", {\n    key: inputKey,\n    className: \"rdg-filter\",\n    placeholder: \"e.g. 3,10-15,>20\",\n    onChange: handleChange,\n    onKeyPress: handleKeyPress\n  }), React.createElement(\"span\", {\n    className: \"rdg-filter-badge\",\n    title: tooltipText\n  }, \"?\"));\n}\n\nfunction filterValues(row, columnFilter, columnKey) {\n  if (columnFilter.filterTerm == null) {\n    return true;\n  } // implement default filter logic\n\n\n  var value = parseInt(row[columnKey], 10);\n\n  for (var ruleKey in columnFilter.filterTerm) {\n    var rule = columnFilter.filterTerm[ruleKey];\n\n    switch (rule.type) {\n      case RuleType.Number:\n        if (rule.value === value) {\n          return true;\n        }\n\n        break;\n\n      case RuleType.GreaterThen:\n        if (rule.value <= value) {\n          return true;\n        }\n\n        break;\n\n      case RuleType.LessThen:\n        if (rule.value >= value) {\n          return true;\n        }\n\n        break;\n\n      case RuleType.Range:\n        if (rule.begin <= value && rule.end >= value) {\n          return true;\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return false;\n}\n\nexport function getRules(value) {\n  if (value === '') {\n    return [];\n  } // handle each value with comma\n\n\n  return value.split(',').map(function (str) {\n    // handle dash\n    var dashIdx = str.indexOf('-');\n\n    if (dashIdx > 0) {\n      var begin = parseInt(str.slice(0, dashIdx), 10);\n      var end = parseInt(str.slice(dashIdx + 1), 10);\n      return {\n        type: RuleType.Range,\n        begin: begin,\n        end: end\n      };\n    } // handle greater then\n\n\n    if (str.includes('>')) {\n      var begin = parseInt(str.slice(str.indexOf('>') + 1), 10);\n      return {\n        type: RuleType.GreaterThen,\n        value: begin\n      };\n    } // handle less then\n\n\n    if (str.includes('<')) {\n      var end = parseInt(str.slice(str.indexOf('<') + 1), 10);\n      return {\n        type: RuleType.LessThen,\n        value: end\n      };\n    } // handle normal values\n\n\n    var numericValue = parseInt(str, 10);\n    return {\n      type: RuleType.Number,\n      value: numericValue\n    };\n  });\n}","map":{"version":3,"sources":["../../../../src/cells/headerCells/filters/NumericFilter.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Column } from 'react-data-grid';\n\nenum RuleType {\n  Number = 1,\n  Range = 2,\n  GreaterThen = 3,\n  LessThen = 4\n}\n\ntype Rule =\n  | { type: RuleType.Range; begin: number; end: number }\n  | { type: RuleType.GreaterThen | RuleType.LessThen | RuleType.Number; value: number };\n\ninterface ChangeEvent<R> {\n  filterTerm: Rule[] | null;\n  column: Column<R>;\n  rawValue: string;\n  filterValues: typeof filterValues;\n}\n\ninterface Props<R> {\n  column: Column<R>;\n  onChange(event: ChangeEvent<R>): void;\n}\n\nexport default function NumericFilter<R>({ column, onChange }: Props<R>) {\n  /** Validates the input */\n  function handleKeyPress(event: React.KeyboardEvent<HTMLInputElement>) {\n    const result = /[><,0-9-]/.test(event.key);\n    if (result === false) {\n      event.preventDefault();\n    }\n  }\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { value } = event.target;\n    const filters = getRules(value);\n    onChange({\n      filterTerm: filters.length > 0 ? filters : null,\n      column,\n      rawValue: value,\n      filterValues\n    });\n  }\n\n  const inputKey = `header-filter-${column.key as keyof R}`;\n\n  const tooltipText = 'Input Methods: Range (x-y), Greater Than (>x), Less Than (<y)';\n\n  return (\n    <div className=\"rdg-filter-container\">\n      <input\n        key={inputKey}\n        className=\"rdg-filter\"\n        placeholder=\"e.g. 3,10-15,>20\"\n        onChange={handleChange}\n        onKeyPress={handleKeyPress}\n      />\n      <span className=\"rdg-filter-badge\" title={tooltipText}>?</span>\n    </div>\n  );\n}\n\n\nfunction filterValues<R>(row: R, columnFilter: { filterTerm: { [key in string]: Rule } }, columnKey: keyof R) {\n  if (columnFilter.filterTerm == null) {\n    return true;\n  }\n\n  // implement default filter logic\n  const value = parseInt(row[columnKey] as unknown as string, 10);\n  for (const ruleKey in columnFilter.filterTerm) {\n    const rule = columnFilter.filterTerm[ruleKey];\n\n    switch (rule.type) {\n      case RuleType.Number:\n        if (rule.value === value) {\n          return true;\n        }\n        break;\n      case RuleType.GreaterThen:\n        if (rule.value <= value) {\n          return true;\n        }\n        break;\n      case RuleType.LessThen:\n        if (rule.value >= value) {\n          return true;\n        }\n        break;\n      case RuleType.Range:\n        if (rule.begin <= value && rule.end >= value) {\n          return true;\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  return false;\n}\n\nexport function getRules(value: string): Rule[] {\n  if (value === '') {\n    return [];\n  }\n\n  // handle each value with comma\n  return value.split(',').map((str): Rule => {\n    // handle dash\n    const dashIdx = str.indexOf('-');\n    if (dashIdx > 0) {\n      const begin = parseInt(str.slice(0, dashIdx), 10);\n      const end = parseInt(str.slice(dashIdx + 1), 10);\n      return { type: RuleType.Range, begin, end };\n    }\n\n    // handle greater then\n    if (str.includes('>')) {\n      const begin = parseInt(str.slice(str.indexOf('>') + 1), 10);\n      return { type: RuleType.GreaterThen, value: begin };\n    }\n\n    // handle less then\n    if (str.includes('<')) {\n      const end = parseInt(str.slice(str.indexOf('<') + 1), 10);\n      return { type: RuleType.LessThen, value: end };\n    }\n\n    // handle normal values\n    const numericValue = parseInt(str, 10);\n    return { type: RuleType.Number, value: numericValue };\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}