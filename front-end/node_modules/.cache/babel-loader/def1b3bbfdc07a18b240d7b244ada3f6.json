{"ast":null,"code":"import React from 'react';\n/**\r\n * Used for displaying the value of a dropdown (using DropDownEditor) when not editing it.\r\n * Accepts the same parameters as the DropDownEditor.\r\n*/\n\nexport default function DropDownFormatter(_a) {\n  var value = _a.value,\n      options = _a.options;\n  var option = options.find(function (v) {\n    return typeof v === 'string' ? v === value : v.value === value;\n  }) || value;\n\n  if (typeof option === 'string') {\n    return React.createElement(\"div\", {\n      title: option\n    }, option);\n  }\n\n  var title = option.title || option.value || value;\n  var text = option.text || option.value || value;\n  return React.createElement(\"div\", {\n    title: title\n  }, text);\n}","map":{"version":3,"sources":["../../src/formatters/DropDownFormatter.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,MAAkB,OAAlB;AAaA;;;AAGE;;AACF,eAAc,SAAU,iBAAV,CAA4B,EAA5B,EAAqD;MAAvB,KAAA,GAAA,EAAA,CAAA,K;MAAO,OAAA,GAAA,EAAA,CAAA,O;AACjD,MAAM,MAAM,GAAG,OAAO,CAAC,IAAR,CAAa,UAAA,CAAA,EAAC;AAAI,WAAA,OAAO,CAAP,KAAa,QAAb,GAAwB,CAAC,KAAK,KAA9B,GAAsC,CAAC,CAAC,KAAF,KAAtC,KAAA;AAAuD,GAAzE,KAA8E,KAA7F;;AAEA,MAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,WAAO,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,KAAK,EAAE;AAAZ,KAAA,EAAqB,MAArB,CAAP;AACD;;AAED,MAAM,KAAK,GAAG,MAAM,CAAC,KAAP,IAAgB,MAAM,CAAC,KAAvB,IAAgC,KAA9C;AACA,MAAM,IAAI,GAAG,MAAM,CAAC,IAAP,IAAe,MAAM,CAAC,KAAtB,IAA+B,KAA5C;AAEA,SAAO,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,KAAK,EAAE;AAAZ,GAAA,EAAoB,IAApB,CAAP;AACD","sourcesContent":["import React from 'react';\n\ninterface Option {\n  title?: string;\n  value?: string;\n  text?: string;\n}\n\ninterface Props {\n  options: Array<string | Option>;\n  value: string;\n}\n\n/**\n * Used for displaying the value of a dropdown (using DropDownEditor) when not editing it.\n * Accepts the same parameters as the DropDownEditor.\n*/\nexport default function DropDownFormatter({ value, options }: Props) {\n  const option = options.find(v => typeof v === 'string' ? v === value : v.value === value) || value;\n\n  if (typeof option === 'string') {\n    return <div title={option}>{option}</div>;\n  }\n\n  const title = option.title || option.value || value;\n  const text = option.text || option.value || value;\n\n  return <div title={title}>{text}</div>;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}