{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vincent\\\\git\\\\savagerow\\\\front-end\\\\src\\\\Components\\\\Table\\\\Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport DataGridTable from './DataGrid/DataGridTable';\nimport NotificationArea from '../NotificationArea/NotificationArea';\nimport DataGridControlBar from './DataGridControlBar/DataGridControlBar';\nimport AddColumn from './AddColumn/AddColumn';\nimport QueryService from '../../Service/QueryService/QueryService';\nimport DefinitionService from '../../Service/DefinitionService/DefinitionService';\nimport ManipulationService from '../../Service/ManipulationService/ManipulationService';\nimport { Box, CircularProgress, Grid } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SavageTable = props => {\n  _s();\n\n  const queryService = new QueryService(props.table);\n  const definitionService = new DefinitionService(props.table);\n  const manipulationService = new ManipulationService(props.table);\n  const [rows, setRows] = useState([]);\n  const [columnFilter, setColumnFilter] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n  const [insertedRows, setInsertedRows] = useState([]);\n  const [errorRows, setErrorRows] = useState([]);\n  const [addColumnDialogOpen, setAddColumnDialogOpen] = useState(false);\n\n  const addNotification = (content, severity) => {\n    const notification = {\n      content: content,\n      severity: severity\n    };\n    setNotifications(notifications => [...notifications, notification]);\n  };\n\n  const removeErrorsForRow = id => {\n    setErrorRows(er => er.filter(r => r.id != id));\n  };\n\n  const addErrorRow = (id, message) => {\n    const error = {\n      id: id,\n      message: message\n    };\n    removeErrorsForRow(id);\n    setErrorRows(er => [...er, error]);\n  };\n\n  const clearRowMarkings = () => {\n    setInsertedRows([]);\n    setErrorRows([]);\n  };\n\n  const loadTableRows = () => {\n    setNotifications([]);\n    queryService.getRowSet(data => setRows(data.data.rows), () => addNotification(\"Unable to fetch table rows for database: \" + localStorage.getItem(\"database\"), \"error\"));\n  };\n\n  const reloadSchema = () => {\n    queryService.getSchema(data => {\n      clearRowMarkings();\n      setColumns(data.data.columns);\n    }, () => addNotification(\"Unable to fetch table schema\", \"error\"));\n    queryService.getRowSet(data => {\n      clearRowMarkings();\n      setRows(data.data.rows);\n    }, () => addNotification(\"Unable to fetch table rows for database: \" + localStorage.getItem(\"database\"), \"error\"));\n  };\n\n  const insertAction = rId => {\n    rId = rId + 1;\n    setInsertedRows(irs => [...irs.map(ir => ir >= rId ? ir + 1 : ir), rId]);\n    setRows(manipulationService.addRow(rows, rId));\n    setErrorRows([]);\n  };\n\n  const deleteAction = rId => {\n    manipulationService.delete(rows, rId, resultingRows => {\n      setInsertedRows(irs => irs.filter(r => r != rId).map(ir => ir > rId ? ir - 1 : ir));\n      setRows(resultingRows);\n      setErrorRows([]);\n    }, e => addErrorRow(rId, e));\n  };\n\n  const saveAction = rId => {\n    if (insertedRows.indexOf(rId) == -1) return;\n    manipulationService.save(rows, rId, resultingRows => {\n      setRows(resultingRows);\n      setInsertedRows(irs => irs.filter(r => r != rId));\n      removeErrorsForRow(rId);\n    }, e => addErrorRow(rId, \" Error saving the row: \" + e));\n  };\n\n  const handleRowChange = (newRow, index) => {\n    if (insertedRows.indexOf(index) == -1) manipulationService.update(rows, newRow, index, rows => {\n      setRows(rows);\n      removeErrorsForRow(index);\n    }, e => {\n      addErrorRow(index, \" Error updating row: \" + e);\n      console.log(e);\n    });else setRows(manipulationService.updateLocal(rows, newRow, index));\n  };\n\n  useEffect(() => {\n    loadTableRows();\n    queryService.getSchema(data => setColumns(data.data.columns), () => addNotification(\"Unable to fetch table schema\", \"error\"));\n  }, []);\n  var highlightedRows = [];\n\n  if (errorRows.length > 0) {\n    highlightedRows = highlightedRows.concat(errorRows.slice(0).reverse().map(er => {\n      return {\n        id: er.id,\n        message: er.message,\n        type: \"error\"\n      };\n    }));\n  }\n\n  if (insertedRows.length > 0) {\n    highlightedRows = highlightedRows.concat(insertedRows.map(i => {\n      return {\n        id: i,\n        message: \"This row is not saved\",\n        type: \"warning\"\n      };\n    }));\n  }\n\n  if (columns.length == 0) {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 0,\n      direction: \"column\",\n      alignItems: \"center\",\n      justify: \"center\",\n      style: {\n        minHeight: '100vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 3,\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(DataGridTable, {\n      rows: rows,\n      columns: columnFilter.length > 0 ? columns.filter(c => columnFilter.includes(c.column)) : columns,\n      highlightRows: highlightedRows,\n      onRowChange: handleRowChange,\n      onDelete: deleteAction,\n      onInsert: idx => insertAction(idx, true),\n      onSave: saveAction,\n      onRefresh: loadTableRows,\n      onColumnDelete: col => definitionService.dropColumn(col, () => setColumns(columns => columns.filter(c => c.column != col)), e => addNotification(e.message, \"error\")),\n      onColumnRename: (old, newName) => definitionService.renameColumn(old, newName, () => reloadSchema(), e => addNotification(e.message, \"error\")),\n      onColumnInsert: () => setAddColumnDialogOpen(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NotificationArea, {\n      notifications: notifications,\n      handleClose: index => setNotifications(curr => curr.filter((notifications, i) => i !== index))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddColumn, {\n      open: addColumnDialogOpen,\n      table: props.table,\n      handleClose: () => setAddColumnDialogOpen(false),\n      onSuccess: reloadSchema\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SavageTable, \"d0at913rhWWBdMmnI2f4edb2EKc=\");\n\n_c = SavageTable;\nexport default SavageTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"SavageTable\");","map":{"version":3,"sources":["C:/Users/vincent/git/savagerow/front-end/src/Components/Table/Table.js"],"names":["React","Component","useEffect","useState","DataGridTable","NotificationArea","DataGridControlBar","AddColumn","QueryService","DefinitionService","ManipulationService","Box","CircularProgress","Grid","SavageTable","props","queryService","table","definitionService","manipulationService","rows","setRows","columnFilter","setColumnFilter","columns","setColumns","notifications","setNotifications","insertedRows","setInsertedRows","errorRows","setErrorRows","addColumnDialogOpen","setAddColumnDialogOpen","addNotification","content","severity","notification","removeErrorsForRow","id","er","filter","r","addErrorRow","message","error","clearRowMarkings","loadTableRows","getRowSet","data","localStorage","getItem","reloadSchema","getSchema","insertAction","rId","irs","map","ir","addRow","deleteAction","delete","resultingRows","e","saveAction","indexOf","save","handleRowChange","newRow","index","update","console","log","updateLocal","highlightedRows","length","concat","slice","reverse","type","i","minHeight","c","includes","column","idx","col","dropColumn","old","newName","renameColumn","curr"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\nimport DataGridTable from './DataGrid/DataGridTable';\r\nimport NotificationArea from '../NotificationArea/NotificationArea';\r\nimport DataGridControlBar from './DataGridControlBar/DataGridControlBar';\r\nimport AddColumn from './AddColumn/AddColumn';\r\nimport QueryService from '../../Service/QueryService/QueryService';\r\nimport DefinitionService from '../../Service/DefinitionService/DefinitionService';\r\nimport ManipulationService from '../../Service/ManipulationService/ManipulationService';\r\nimport { Box, CircularProgress, Grid } from '@material-ui/core';\r\nconst SavageTable = (props) => {\r\n\r\n  const queryService = new QueryService(props.table)\r\n  const definitionService = new DefinitionService(props.table)\r\n  const manipulationService = new ManipulationService(props.table)\r\n  const [rows, setRows] = useState([])\r\n  const [columnFilter, setColumnFilter] = useState([])\r\n  const [columns, setColumns] = useState([])\r\n  const [notifications, setNotifications] = useState([])\r\n  const [insertedRows, setInsertedRows] = useState([])\r\n  const [errorRows, setErrorRows] = useState([])\r\n  const [addColumnDialogOpen, setAddColumnDialogOpen] = useState(false)\r\n\r\n\r\n  const addNotification = (content, severity) => {\r\n    const notification = { content: content, severity: severity }\r\n    setNotifications(notifications => [...notifications, notification])\r\n  }\r\n\r\n  const removeErrorsForRow = id => {\r\n    setErrorRows(er => er.filter(r => r.id != id))\r\n  }\r\n\r\n  const addErrorRow = (id, message) => {\r\n    const error = { id: id, message: message }\r\n    removeErrorsForRow(id)\r\n    setErrorRows(er => [...er, error])\r\n  }\r\n\r\n  const clearRowMarkings = () => {\r\n    setInsertedRows([])\r\n    setErrorRows([])\r\n  }\r\n\r\n  const loadTableRows = () => {\r\n\r\n    setNotifications([])\r\n    queryService.getRowSet(data => setRows(data.data.rows), () => addNotification(\"Unable to fetch table rows for database: \" + localStorage.getItem(\"database\"), \"error\"))\r\n  }\r\n\r\n  const reloadSchema = () => {\r\n    queryService.getSchema(data => { clearRowMarkings(); setColumns(data.data.columns) }, () => addNotification(\"Unable to fetch table schema\", \"error\"))\r\n    queryService.getRowSet(data => { clearRowMarkings(); setRows(data.data.rows)}, () => addNotification(\"Unable to fetch table rows for database: \" + localStorage.getItem(\"database\"), \"error\"))\r\n\r\n  }\r\n\r\n  const insertAction = (rId) => {\r\n    rId = rId + 1\r\n\r\n    setInsertedRows(irs => [...irs.map(ir => ir >= rId ? ir + 1 : ir), rId])\r\n    setRows(manipulationService.addRow(rows, rId))\r\n    setErrorRows([])\r\n  }\r\n\r\n  const deleteAction = (rId) => {\r\n    manipulationService.delete(rows, rId, (resultingRows) => {\r\n      setInsertedRows(irs => irs.filter(r => r != rId).map(ir => ir > rId ? ir - 1 : ir))\r\n      setRows(resultingRows)\r\n      setErrorRows([])\r\n    }, (e) => addErrorRow(rId, e))\r\n  }\r\n\r\n  const saveAction = (rId) => {\r\n    if (insertedRows.indexOf(rId) == -1) return\r\n\r\n    manipulationService.save(rows, rId, (resultingRows) => {\r\n      setRows(resultingRows)\r\n      setInsertedRows(irs => irs.filter(r => r != rId))\r\n      removeErrorsForRow(rId)\r\n    }, (e) => addErrorRow(rId, \" Error saving the row: \" + e))\r\n  }\r\n\r\n  const handleRowChange = (newRow, index) => {\r\n    if (insertedRows.indexOf(index) == -1)\r\n      manipulationService.update(rows, newRow, index, (rows) => {\r\n        setRows(rows)\r\n        removeErrorsForRow(index)\r\n      }, (e) => {\r\n        addErrorRow(index, \" Error updating row: \" + e)\r\n        console.log(e)\r\n      })\r\n    else\r\n      setRows(manipulationService.updateLocal(rows, newRow, index))\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadTableRows()\r\n    queryService.getSchema(data => setColumns(data.data.columns), () => addNotification(\"Unable to fetch table schema\", \"error\"))\r\n  }, [])\r\n\r\n  var highlightedRows = []\r\n  if (errorRows.length > 0) {\r\n    highlightedRows = highlightedRows.concat(errorRows.slice(0).reverse().map(er => { return { id: er.id, message: er.message, type: \"error\" } }))\r\n  }\r\n\r\n  if (insertedRows.length > 0) {\r\n    highlightedRows = highlightedRows.concat(insertedRows.map(i => { return { id: i, message: \"This row is not saved\", type: \"warning\" } }))\r\n  }\r\n\r\n\r\n  if (columns.length == 0) {\r\n    return (\r\n      <Grid container spacing={0} direction=\"column\" alignItems=\"center\" justify=\"center\" style={{ minHeight: '100vh' }}>\r\n        <Grid item xs={3}>\r\n          <CircularProgress />\r\n        </Grid>\r\n\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <DataGridTable\r\n\r\n        rows={rows}\r\n        columns={columnFilter.length > 0 ? columns.filter(c => columnFilter.includes(c.column)) : columns}\r\n        highlightRows={highlightedRows}\r\n        onRowChange={handleRowChange}\r\n        onDelete={deleteAction}\r\n        onInsert={(idx) => insertAction(idx, true)}\r\n        onSave={saveAction}\r\n        onRefresh={loadTableRows}\r\n        onColumnDelete={(col) => definitionService.dropColumn(col, () => setColumns(columns => columns.filter(c => c.column != col)), (e) => addNotification(e.message, \"error\"))}\r\n        onColumnRename={(old, newName) => definitionService.renameColumn(old, newName, () => reloadSchema(), (e) => addNotification(e.message, \"error\"))}\r\n        onColumnInsert={() => setAddColumnDialogOpen(true)}\r\n      />\r\n      <NotificationArea\r\n        notifications={notifications}\r\n        handleClose={(index) => setNotifications(curr => curr.filter((notifications, i) => i !== index))}\r\n      />\r\n      <AddColumn open={addColumnDialogOpen} table={props.table} handleClose={() => setAddColumnDialogOpen(false)} onSuccess={reloadSchema} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SavageTable"]},"metadata":{},"sourceType":"module"}