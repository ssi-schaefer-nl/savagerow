{"version":3,"file":"GroupedColumnsPanel.js","sourceRoot":"","sources":["../../src/toolbars/GroupedColumnsPanel.js"],"names":[],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DragItemTypes } from 'react-data-grid';\nimport { DropTarget } from 'react-dnd';\n\nimport GroupedColumnButton from './GroupedColumnButton';\n\nclass GroupedColumnsPanel extends Component {\n  static propTypes = {\n    isOver: PropTypes.bool.isRequired,\n    connectDropTarget: PropTypes.func,\n    canDrop: PropTypes.bool.isRequired,\n    groupBy: PropTypes.array,\n    noColumnsSelectedMessage: PropTypes.string,\n    panelDescription: PropTypes.string,\n    onColumnGroupDeleted: PropTypes.func\n  };\n\n  static defaultProps = {\n    noColumnsSelectedMessage: 'Drag a column header here to group by that column',\n    panelDescription: 'Drag a column header here to group by that column'\n  };\n\n  getPanelInstructionMessage() {\n    const { groupBy } = this.props;\n    return groupBy && groupBy.length > 0 ? this.props.panelDescription : this.props.noColumnsSelectedMessage;\n  }\n\n  renderGroupedColumns() {\n    return this.props.groupBy.map(c => {\n      const groupedColumnButtonProps = {\n        columnKey: typeof c === 'string' ? c : c.key,\n        name: typeof c === 'string' ? c : c.name,\n        onColumnGroupDeleted: this.props.onColumnGroupDeleted,\n        key: typeof c === 'string' ? c : c.key\n      };\n      return <GroupedColumnButton {...groupedColumnButtonProps} />;\n    });\n  }\n\n  renderOverlay(color) {\n    return (\n      <div style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        height: '100%',\n        width: '100%',\n        zIndex: 1,\n        opacity: 0.5,\n        backgroundColor: color\n      }}\n      />\n    );\n  }\n\n  render() {\n    const { connectDropTarget, isOver, canDrop } = this.props;\n    return connectDropTarget(\n      <div style={{ padding: '2px', position: 'relative', margin: '-10px', display: 'inline-block', border: '1px solid #eee' }}>\n        {this.renderGroupedColumns()} <span>{this.getPanelInstructionMessage()}</span>\n        {isOver && canDrop && this.renderOverlay('yellow')}\n        {!isOver && canDrop && this.renderOverlay('#DBECFA')}\n      </div>);\n  }\n}\n\nconst columnTarget = {\n  drop(props, monitor) {\n    // Obtain the dragged item\n    const item = monitor.getItem();\n    if (typeof props.onColumnGroupAdded === 'function') {\n      props.onColumnGroupAdded(item.key);\n    }\n  }\n};\n\nfunction collect(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n    canDrop: monitor.canDrop(),\n    draggedolumn: monitor.getItem()\n  };\n}\n\nexport default DropTarget(DragItemTypes.Column, columnTarget, collect)(GroupedColumnsPanel);\n"]}