{"version":3,"file":"Selectors.js","sourceRoot":"","sources":["../../src/data/Selectors.js"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAC1C,OAAO,SAAS,MAAM,cAAc,CAAC;AACrC,OAAO,UAAU,MAAM,eAAe,CAAC;AACvC,OAAO,QAAQ,MAAM,aAAa,CAAC;AACnC,OAAO,EAAE,aAAa,EAAE,YAAY,EAAE,MAAM,UAAU,CAAC;AAEvD,IAAM,YAAY,GAAG,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,IAAI,EAAV,CAAU,CAAC;AAC3C,IAAM,UAAU,GAAG,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,OAAO,EAAb,CAAa,CAAC;AAC5C,IAAM,eAAe,GAAG,cAAc,CAAC,CAAC,UAAU,EAAE,YAAY,CAAC,EAAE,UAAC,OAAO,EAAE,IAAS;IAAT,qBAAA,EAAA,SAAS;IACpF,IAAI,CAAC,OAAO,IAAI,aAAa,CAAC,OAAO,CAAC,EAAE;QACtC,OAAO,IAAI,CAAC;KACb;IACD,OAAO,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC;AAEH,IAAM,aAAa,GAAG,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,UAAU,EAAhB,CAAgB,CAAC;AAChD,IAAM,gBAAgB,GAAG,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,aAAa,EAAnB,CAAmB,CAAC;AACtD,IAAM,aAAa,GAAG,cAAc,CAAC,CAAC,eAAe,EAAE,aAAa,EAAE,gBAAgB,CAAC,EAAE,UAAC,IAAI,EAAE,UAAU,EAAE,aAAa;IACvH,IAAI,CAAC,aAAa,IAAI,CAAC,UAAU,EAAE;QACjC,OAAO,IAAI,CAAC;KACb;IACD,OAAO,QAAQ,CAAC,IAAI,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC;AAEH,IAAM,iBAAiB,GAAG,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,OAAO,EAAb,CAAa,CAAC;AACnD,IAAM,eAAe,GAAG,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,YAAY,EAAlB,CAAkB,CAAC;AACtD,IAAM,uBAAuB,GAAG,cAAc,CAAC,CAAC,aAAa,EAAE,iBAAiB,EAAE,eAAe,CAAC,EAAE,UAAC,IAAI,EAAE,cAAc,EAAE,YAAiB;IAAjB,6BAAA,EAAA,iBAAiB;IAC1I,IAAI,CAAC,cAAc,IAAI,aAAa,CAAC,cAAc,CAAC,IAAI,YAAY,CAAC,cAAc,CAAC,EAAE;QACpF,OAAO,IAAI,CAAC;KACb;IACD,OAAO,SAAS,CAAC,IAAI,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC;AACvD,CAAC,CAAC,CAAC;AAEH,IAAM,eAAe,GAAG,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,YAAY,EAAlB,CAAkB,CAAC;AACtD,IAAM,SAAS,GAAG,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,MAAM,EAAZ,CAAY,CAAC;AAC1C,IAAM,oBAAoB,GAAG,cAAc,CAAC,CAAC,SAAS,EAAE,eAAe,EAAE,YAAY,CAAC,EAAE,UAAC,MAAM,EAAE,YAAY,EAAE,IAAS;IAAT,qBAAA,EAAA,SAAS;IACtH,OAAO,YAAY,CAAC,GAAG,CAAC,UAAA,CAAC;QACvB,OAAO,IAAI,CAAC,MAAM,CAAC,UAAA,CAAC;YAClB,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACR,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,OAAO,EACL,uBAAuB,IAAI,OAAO,EAClC,oBAAoB,EACrB,CAAC","sourcesContent":["import { createSelector } from 'reselect';\nimport groupRows from './RowGrouper';\nimport filterRows from './RowFilterer';\nimport sortRows from './RowSorter';\nimport { isEmptyObject, isEmptyArray } from '../utils';\n\nconst getInputRows = (state) => state.rows;\nconst getFilters = (state) => state.filters;\nconst getFilteredRows = createSelector([getFilters, getInputRows], (filters, rows = []) => {\n  if (!filters || isEmptyObject(filters)) {\n    return rows;\n  }\n  return filterRows(filters, rows);\n});\n\nconst getSortColumn = state => state.sortColumn;\nconst getSortDirection = state => state.sortDirection;\nconst getSortedRows = createSelector([getFilteredRows, getSortColumn, getSortDirection], (rows, sortColumn, sortDirection) => {\n  if (!sortDirection && !sortColumn) {\n    return rows;\n  }\n  return sortRows(rows, sortColumn, sortDirection);\n});\n\nconst getGroupedColumns = (state) => state.groupBy;\nconst getExpandedRows = (state) => state.expandedRows;\nconst getFlattenedGroupedRows = createSelector([getSortedRows, getGroupedColumns, getExpandedRows], (rows, groupedColumns, expandedRows = {}) => {\n  if (!groupedColumns || isEmptyObject(groupedColumns) || isEmptyArray(groupedColumns)) {\n    return rows;\n  }\n  return groupRows(rows, groupedColumns, expandedRows);\n});\n\nconst getSelectedKeys = (state) => state.selectedKeys;\nconst getRowKey = (state) => state.rowKey;\nconst getSelectedRowsByKey = createSelector([getRowKey, getSelectedKeys, getInputRows], (rowKey, selectedKeys, rows = []) => {\n  return selectedKeys.map(k => {\n    return rows.filter(r => {\n      return r[rowKey] === k;\n    })[0];\n  });\n});\n\nexport {\n  getFlattenedGroupedRows as getRows,\n  getSelectedRowsByKey\n};\n"]}