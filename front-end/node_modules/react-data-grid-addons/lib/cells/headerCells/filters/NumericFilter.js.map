{"version":3,"file":"NumericFilter.js","sourceRoot":"","sources":["../../../../src/cells/headerCells/filters/NumericFilter.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Column } from 'react-data-grid';\n\nenum RuleType {\n  Number = 1,\n  Range = 2,\n  GreaterThen = 3,\n  LessThen = 4\n}\n\ntype Rule =\n  | { type: RuleType.Range; begin: number; end: number }\n  | { type: RuleType.GreaterThen | RuleType.LessThen | RuleType.Number; value: number };\n\ninterface ChangeEvent<R> {\n  filterTerm: Rule[] | null;\n  column: Column<R>;\n  rawValue: string;\n  filterValues: typeof filterValues;\n}\n\ninterface Props<R> {\n  column: Column<R>;\n  onChange(event: ChangeEvent<R>): void;\n}\n\nexport default function NumericFilter<R>({ column, onChange }: Props<R>) {\n  /** Validates the input */\n  function handleKeyPress(event: React.KeyboardEvent<HTMLInputElement>) {\n    const result = /[><,0-9-]/.test(event.key);\n    if (result === false) {\n      event.preventDefault();\n    }\n  }\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { value } = event.target;\n    const filters = getRules(value);\n    onChange({\n      filterTerm: filters.length > 0 ? filters : null,\n      column,\n      rawValue: value,\n      filterValues\n    });\n  }\n\n  const inputKey = `header-filter-${column.key as keyof R}`;\n\n  const tooltipText = 'Input Methods: Range (x-y), Greater Than (>x), Less Than (<y)';\n\n  return (\n    <div className=\"rdg-filter-container\">\n      <input\n        key={inputKey}\n        className=\"rdg-filter\"\n        placeholder=\"e.g. 3,10-15,>20\"\n        onChange={handleChange}\n        onKeyPress={handleKeyPress}\n      />\n      <span className=\"rdg-filter-badge\" title={tooltipText}>?</span>\n    </div>\n  );\n}\n\n\nfunction filterValues<R>(row: R, columnFilter: { filterTerm: { [key in string]: Rule } }, columnKey: keyof R) {\n  if (columnFilter.filterTerm == null) {\n    return true;\n  }\n\n  // implement default filter logic\n  const value = parseInt(row[columnKey] as unknown as string, 10);\n  for (const ruleKey in columnFilter.filterTerm) {\n    const rule = columnFilter.filterTerm[ruleKey];\n\n    switch (rule.type) {\n      case RuleType.Number:\n        if (rule.value === value) {\n          return true;\n        }\n        break;\n      case RuleType.GreaterThen:\n        if (rule.value <= value) {\n          return true;\n        }\n        break;\n      case RuleType.LessThen:\n        if (rule.value >= value) {\n          return true;\n        }\n        break;\n      case RuleType.Range:\n        if (rule.begin <= value && rule.end >= value) {\n          return true;\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  return false;\n}\n\nexport function getRules(value: string): Rule[] {\n  if (value === '') {\n    return [];\n  }\n\n  // handle each value with comma\n  return value.split(',').map((str): Rule => {\n    // handle dash\n    const dashIdx = str.indexOf('-');\n    if (dashIdx > 0) {\n      const begin = parseInt(str.slice(0, dashIdx), 10);\n      const end = parseInt(str.slice(dashIdx + 1), 10);\n      return { type: RuleType.Range, begin, end };\n    }\n\n    // handle greater then\n    if (str.includes('>')) {\n      const begin = parseInt(str.slice(str.indexOf('>') + 1), 10);\n      return { type: RuleType.GreaterThen, value: begin };\n    }\n\n    // handle less then\n    if (str.includes('<')) {\n      const end = parseInt(str.slice(str.indexOf('<') + 1), 10);\n      return { type: RuleType.LessThen, value: end };\n    }\n\n    // handle normal values\n    const numericValue = parseInt(str, 10);\n    return { type: RuleType.Number, value: numericValue };\n  });\n}\n"]}