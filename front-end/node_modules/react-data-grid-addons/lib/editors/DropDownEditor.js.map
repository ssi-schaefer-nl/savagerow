{"version":3,"file":"DropDownEditor.js","sourceRoot":"","sources":["../../src/editors/DropDownEditor.js"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,SAAS,MAAM,YAAY,CAAC;AAEnC;IAA4C,kCAAe;IAA3D;QAAA,qEAsEC;QAzCC,kBAAY,GAAG,UAAC,MAAM;YACpB,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACvB,CAAC,CAAC;;IAuCJ,CAAC;IAnDC,qCAAY,GAAZ;QACE,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,iCAAQ,GAAR;;QACE;YACE,GAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,IAAG,IAAI,CAAC,MAAM,CAAC,KAAK;eAC1C;IACJ,CAAC;IAMD,sCAAa,GAAb;QACE,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,IAAI;YAChC,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;gBAC5B,OAAO,CACL,gCACE,GAAG,EAAE,IAAI,EACT,KAAK,EAAE,IAAI,IAEV,IAAI,CACE,CACV,CAAC;aACH;YAED,OAAO,CACL,gCACE,GAAG,EAAE,IAAI,CAAC,EAAE,EACZ,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,KAAK,EAAE,IAAI,CAAC,KAAK,IAEhB,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CACjB,CACV,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,+BAAM,GAAN;QACE,OAAO,CACL,gCACE,GAAG,EAAE,IAAI,CAAC,YAAY,EACtB,SAAS,EAAC,mBAAmB,EAC7B,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EAC9B,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,IAExB,IAAI,CAAC,aAAa,EAAE,CACd,CACV,CAAC;IACJ,CAAC;IApEM,wBAAS,GAAG;QACjB,OAAO,EAAE,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC;YAC7C,SAAS,CAAC,MAAM;YAChB,SAAS,CAAC,KAAK,CAAC;gBACd,EAAE,EAAE,SAAS,CAAC,MAAM;gBACpB,KAAK,EAAE,SAAS,CAAC,MAAM;gBACvB,KAAK,EAAE,SAAS,CAAC,MAAM;gBACvB,IAAI,EAAE,SAAS,CAAC,MAAM;aACvB,CAAC;SACH,CAAC,CAAC,CAAC,UAAU;KACf,CAAC;IAEK,wBAAS,GAAG;QACjB,KAAK,EAAE,SAAS,CAAC,GAAG,CAAC,UAAU;QAC/B,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU;QACjC,6CAA6C;KAC9C,CAAC;IAqDJ,qBAAC;CAAA,AAtED,CAA4C,KAAK,CAAC,SAAS,GAsE1D;eAtEoB,cAAc","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class DropDownEditor extends React.Component {\n  static propTypes = {\n    options: PropTypes.arrayOf(PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.shape({\n        id: PropTypes.string,\n        title: PropTypes.string,\n        value: PropTypes.string,\n        text: PropTypes.string\n      })\n    ])).isRequired\n  };\n\n  static propTypes = {\n    value: PropTypes.any.isRequired,\n    onBlur: PropTypes.func.isRequired\n    // column: PropTypes.shape(Column).isRequired\n  };\n\n  getInputNode() {\n    return this.select;\n  }\n\n  getValue() {\n    return {\n      [this.props.column.key]: this.select.value\n    };\n  }\n\n  setSelectRef = (select) => {\n    this.select = select;\n  };\n\n  renderOptions() {\n    return this.props.options.map(name => {\n      if (typeof name === 'string') {\n        return (\n          <option\n            key={name}\n            value={name}\n          >\n            {name}\n          </option>\n        );\n      }\n\n      return (\n        <option\n          key={name.id}\n          value={name.value}\n          title={name.title}\n        >\n          {name.text || name.value}\n        </option>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <select\n        ref={this.setSelectRef}\n        className=\"rdg-select-editor\"\n        defaultValue={this.props.value}\n        onBlur={this.props.onBlur}\n      >\n        {this.renderOptions()}\n      </select>\n    );\n  }\n}\n"]}