{"version":3,"file":"DragDropContainer.js","sourceRoot":"","sources":["../../src/draggable/DragDropContainer.js"],"names":[],"mappings":";AAAA,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AACzC,OAAO,SAAS,MAAM,YAAY,CAAC;AAEnC,OAAO,oBAAoB,MAAM,gCAAgC,CAAC;AAClE,OAAO,mBAAmB,MAAM,uBAAuB,CAAC;AACxD,OAAO,YAAY,MAAM,gBAAgB,CAAC;AAE1C;IAAiC,sCAAS;IAA1C;;IAsCA,CAAC;IAhCC,oCAAO,GAAP,UAAQ,SAAS,EAAE,SAAS;QAC1B,IAAM,IAAI,GAAG,EAAE,CAAC;QAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;YAClC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;SACzB;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,uCAAU,GAAV;QACE,OAAO,KAAK,CAAC,YAAY,CACvB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;YACxC,mBAAmB,EAAE,mBAAmB;SACzC,CACF,CAAC;IACJ,CAAC;IAED,mCAAM,GAAN;QACE,IAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAC/B,IAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;QACjE,IAAA,eAAmC,EAAjC,wBAAS,EAAE,oBAAsB,CAAC;QAC1C,IAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QAChD,OAAO,CACL;YACG,IAAI;YACL,oBAAC,YAAY,IACX,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,EACrC,IAAI,EAAE,IAAI,EACV,OAAO,EAAE,OAAO,GAChB,CACE,CACP,CAAC;IACJ,CAAC;IApCM,4BAAS,GAAG;QACjB,QAAQ,EAAE,SAAS,CAAC,OAAO,CAAC,UAAU;QACtC,iBAAiB,EAAE,SAAS,CAAC,IAAI;KAClC,CAAC;IAkCJ,yBAAC;CAAA,AAtCD,CAAiC,SAAS,GAsCzC;AAED,eAAe,oBAAoB,CAAC,kBAAkB,CAAC,CAAC","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport html5DragDropContext from '../shared/html5DragDropContext';\nimport DraggableHeaderCell from './DraggableHeaderCell';\nimport RowDragLayer from './RowDragLayer';\n\nclass DraggableContainer extends Component {\n  static propTypes = {\n    children: PropTypes.element.isRequired,\n    getDragPreviewRow: PropTypes.func\n  };\n\n  getRows(rowsCount, rowGetter) {\n    const rows = [];\n    for (let j = 0; j < rowsCount; j++) {\n      rows.push(rowGetter(j));\n    }\n    return rows;\n  }\n\n  renderGrid() {\n    return React.cloneElement(\n      React.Children.only(this.props.children), {\n        draggableHeaderCell: DraggableHeaderCell\n      }\n    );\n  }\n\n  render() {\n    const grid = this.renderGrid();\n    const rowGetter = this.props.getDragPreviewRow || grid.props.rowGetter;\n    const { rowsCount, columns } = grid.props;\n    const rows = this.getRows(rowsCount, rowGetter);\n    return (\n      <div>\n        {grid}\n        <RowDragLayer\n          selectedRows={grid.props.selectedRows}\n          rows={rows}\n          columns={columns}\n        />\n      </div>\n    );\n  }\n}\n\nexport default html5DragDropContext(DraggableContainer);\n"]}