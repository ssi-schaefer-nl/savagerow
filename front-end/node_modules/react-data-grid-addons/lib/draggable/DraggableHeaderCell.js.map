{"version":3,"file":"DraggableHeaderCell.js","sourceRoot":"","sources":["../../src/draggable/DraggableHeaderCell.js"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,WAAW,CAAC;AACvC,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AACzC,OAAO,SAAS,MAAM,YAAY,CAAC;AACnC,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAEhD;IAAkC,uCAAS;IAA3C;;IAsBA,CAAC;IAdC,+CAAiB,GAAjB;QACU,IAAA,kDAAkB,CAAgB;QAC1C,IAAM,GAAG,GAAG,IAAI,KAAK,EAAE,CAAC;QACxB,GAAG,CAAC,GAAG,GAAG,sCAAsC,CAAC;QACjD,GAAG,CAAC,MAAM,GAAG,cAAM,OAAA,kBAAkB,CAAC,GAAG,CAAC,EAAvB,CAAuB,CAAC;IAC7C,CAAC;IAED,oCAAM,GAAN;QACQ,IAAA,eAA8C,EAA5C,wCAAiB,EAAE,0BAAyB,CAAC;QACrD,IAAI,UAAU,EAAE;YACd,OAAO,IAAI,CAAC;SACb;QACD,OAAO,iBAAiB,CAAC,6BAAK,SAAS,EAAC,2BAA2B,IAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAO,CAAC,CAAC;IACnG,CAAC;IApBM,6BAAS,GAAG;QACjB,iBAAiB,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU;QAC5C,kBAAkB,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU;QAC7C,UAAU,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU;QACrC,QAAQ,EAAE,SAAS,CAAC,OAAO,CAAC,UAAU;KACvC,CAAC;IAgBJ,0BAAC;CAAA,AAtBD,CAAkC,SAAS,GAsB1C;AAED,SAAS,OAAO,CAAC,OAAO,EAAE,OAAO;IAC/B,OAAO;QACL,iBAAiB,EAAE,OAAO,CAAC,UAAU,EAAE;QACvC,UAAU,EAAE,OAAO,CAAC,UAAU,EAAE;QAChC,kBAAkB,EAAE,OAAO,CAAC,WAAW,EAAE;KAC1C,CAAC;AACJ,CAAC;AAED,IAAM,gBAAgB,GAAG;IACvB,SAAS,YAAC,KAAK;QACb,OAAO,KAAK,CAAC,MAAM,CAAC;IACtB,CAAC;IACD,OAAO,YAAC,KAAK;QACX,OAAO,KAAK,CAAC,MAAM,CAAC;IACtB,CAAC;CACF,CAAC;AAEF,eAAe,UAAU,CAAC,aAAa,CAAC,MAAM,EAAE,gBAAgB,EAAE,OAAO,CAAC,CAAC,mBAAmB,CAAC,CAAC","sourcesContent":["import { DragSource } from 'react-dnd';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DragItemTypes } from 'react-data-grid';\n\nclass DraggableHeaderCell extends Component {\n  static propTypes = {\n    connectDragSource: PropTypes.func.isRequired,\n    connectDragPreview: PropTypes.func.isRequired,\n    isDragging: PropTypes.bool.isRequired,\n    children: PropTypes.element.isRequired\n  };\n\n  componentDidMount() {\n    const { connectDragPreview } = this.props;\n    const img = new Image();\n    img.src = './assets/images/drag_column_full.png';\n    img.onload = () => connectDragPreview(img);\n  }\n\n  render() {\n    const { connectDragSource, isDragging } = this.props;\n    if (isDragging) {\n      return null;\n    }\n    return connectDragSource(<div className=\"rdg-draggable-header-cell\">{this.props.children}</div>);\n  }\n}\n\nfunction collect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n    connectDragPreview: connect.dragPreview()\n  };\n}\n\nconst headerCellSource = {\n  beginDrag(props) {\n    return props.column;\n  },\n  endDrag(props) {\n    return props.column;\n  }\n};\n\nexport default DragSource(DragItemTypes.Column, headerCellSource, collect)(DraggableHeaderCell);\n"]}