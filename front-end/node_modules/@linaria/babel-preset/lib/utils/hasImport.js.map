{"version":3,"sources":["../../src/utils/hasImport.ts"],"names":["linariaLibs","Set","safeResolve","name","require","resolve","err","hasImport","t","scope","filename","identifier","sources","binding","getAllBindings","p","path","resolveFromFile","id","Module","_resolveFilename","paths","_nodeModulePaths","e","isImportingModule","value","some","source","has","isImportSpecifier","isImportDeclaration","parentPath","node","isVariableDeclarator","isCallExpression","init","isIdentifier","callee","arguments","length","isStringLiteral","isTemplateLiteral","quasis","cooked"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,MAAMA,WAAW,GAAG,IAAIC,GAAJ,CAAQ,CAC1B,eAD0B,EAE1B,gBAF0B,EAG1B,SAH0B,EAI1B,eAJ0B,CAAR,CAApB;;AAOA,MAAMC,WAAW,GAAIC,IAAD,IAAkB;AACpC,MAAI;AACF,WAAOC,OAAO,CAACC,OAAR,CAAgBF,IAAhB,CAAP;AACD,GAFD,CAEE,OAAOG,GAAP,EAAY;AACZ,WAAO,IAAP;AACD;AACF,CAND,C,CAQA;;;AACe,SAASC,SAAT,CACbC,CADa,EAEbC,KAFa,EAGbC,QAHa,EAIbC,UAJa,EAKbC,OALa,EAMJ;AACT,QAAMC,OAAO,GAAGJ,KAAK,CAACK,cAAN,GAAuBH,UAAvB,CAAhB;;AAEA,MAAI,CAACE,OAAL,EAAc;AACZ,WAAO,KAAP;AACD;;AAED,QAAME,CAAC,GAAGF,OAAO,CAACG,IAAlB;;AAEA,QAAMC,eAAe,GAAIC,EAAD,IAAgB;AACtC,QAAI;AACF,aAAOC,gBAAOC,gBAAP,CAAwBF,EAAxB,EAA4B;AACjCA,QAAAA,EAAE,EAAER,QAD6B;AAEjCA,QAAAA,QAFiC;AAGjCW,QAAAA,KAAK,EAAEF,gBAAOG,gBAAP,CAAwB,mBAAQZ,QAAR,CAAxB;AAH0B,OAA5B,CAAP;AAKD,KAND,CAME,OAAOa,CAAP,EAAU;AACV,aAAO,IAAP;AACD;AACF,GAVD;;AAYA,QAAMC,iBAAiB,GAAIC,KAAD,IACxBb,OAAO,CAACc,IAAR,CACGC,MAAD,IACE;AACAF,EAAAA,KAAK,KAAKE,MAAV,IACA;AACAV,EAAAA,eAAe,CAACQ,KAAD,CAAf,MACGzB,WAAW,CAAC4B,GAAZ,CAAgBD,MAAhB,IACGzB,WAAW,CAACyB,MAAD,CADd,GAEGV,eAAe,CAACU,MAAD,CAHrB,CALJ,CADF;;AAYA,MAAInB,CAAC,CAACqB,iBAAF,CAAoBd,CAApB,KAA0BP,CAAC,CAACsB,mBAAF,CAAsBf,CAAC,CAACgB,UAAxB,CAA9B,EAAmE;AACjE,WAAOP,iBAAiB,CAACT,CAAC,CAACgB,UAAF,CAAaC,IAAb,CAAkBL,MAAlB,CAAyBF,KAA1B,CAAxB;AACD;;AAED,MAAIjB,CAAC,CAACyB,oBAAF,CAAuBlB,CAAvB,CAAJ,EAA+B;AAC7B,QACEP,CAAC,CAAC0B,gBAAF,CAAmBnB,CAAC,CAACiB,IAAF,CAAOG,IAA1B,KACA3B,CAAC,CAAC4B,YAAF,CAAerB,CAAC,CAACiB,IAAF,CAAOG,IAAP,CAAYE,MAA3B,CADA,IAEAtB,CAAC,CAACiB,IAAF,CAAOG,IAAP,CAAYE,MAAZ,CAAmBlC,IAAnB,KAA4B,SAF5B,IAGAY,CAAC,CAACiB,IAAF,CAAOG,IAAP,CAAYG,SAAZ,CAAsBC,MAAtB,KAAiC,CAJnC,EAKE;AACA,YAAMP,IAAI,GAAGjB,CAAC,CAACiB,IAAF,CAAOG,IAAP,CAAYG,SAAZ,CAAsB,CAAtB,CAAb;;AAEA,UAAI9B,CAAC,CAACgC,eAAF,CAAkBR,IAAlB,CAAJ,EAA6B;AAC3B,eAAOR,iBAAiB,CAACQ,IAAI,CAACP,KAAN,CAAxB;AACD;;AAED,UAAIjB,CAAC,CAACiC,iBAAF,CAAoBT,IAApB,KAA6BA,IAAI,CAACU,MAAL,CAAYH,MAAZ,KAAuB,CAAxD,EAA2D;AACzD,eAAOf,iBAAiB,CAACQ,IAAI,CAACU,MAAL,CAAY,CAAZ,EAAejB,KAAf,CAAqBkB,MAAtB,CAAxB;AACD;AACF;AACF;;AAED,SAAO,KAAP;AACD","sourcesContent":["import { dirname } from 'path';\nimport Module from '../module';\n\nconst linariaLibs = new Set([\n  '@linaria/core',\n  '@linaria/react',\n  'linaria',\n  'linaria/react',\n]);\n\nconst safeResolve = (name: string) => {\n  try {\n    return require.resolve(name);\n  } catch (err) {\n    return null;\n  }\n};\n\n// Verify if the binding is imported from the specified source\nexport default function hasImport(\n  t: any,\n  scope: any,\n  filename: string,\n  identifier: string,\n  sources: string[]\n): boolean {\n  const binding = scope.getAllBindings()[identifier];\n\n  if (!binding) {\n    return false;\n  }\n\n  const p = binding.path;\n\n  const resolveFromFile = (id: string) => {\n    try {\n      return Module._resolveFilename(id, {\n        id: filename,\n        filename,\n        paths: Module._nodeModulePaths(dirname(filename)),\n      });\n    } catch (e) {\n      return null;\n    }\n  };\n\n  const isImportingModule = (value: string) =>\n    sources.some(\n      (source) =>\n        // If the value is an exact match, assume it imports the module\n        value === source ||\n        // Otherwise try to resolve both and check if they are the same file\n        resolveFromFile(value) ===\n          (linariaLibs.has(source)\n            ? safeResolve(source)\n            : resolveFromFile(source))\n    );\n\n  if (t.isImportSpecifier(p) && t.isImportDeclaration(p.parentPath)) {\n    return isImportingModule(p.parentPath.node.source.value);\n  }\n\n  if (t.isVariableDeclarator(p)) {\n    if (\n      t.isCallExpression(p.node.init) &&\n      t.isIdentifier(p.node.init.callee) &&\n      p.node.init.callee.name === 'require' &&\n      p.node.init.arguments.length === 1\n    ) {\n      const node = p.node.init.arguments[0];\n\n      if (t.isStringLiteral(node)) {\n        return isImportingModule(node.value);\n      }\n\n      if (t.isTemplateLiteral(node) && node.quasis.length === 1) {\n        return isImportingModule(node.quasis[0].value.cooked);\n      }\n    }\n  }\n\n  return false;\n}\n"],"file":"hasImport.js"}