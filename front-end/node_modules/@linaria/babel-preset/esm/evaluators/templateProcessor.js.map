{"version":3,"sources":["../../src/evaluators/templateProcessor.ts"],"names":["generator","debug","units","isSerializable","throwIfInvalid","stripLines","toCSS","getLinariaComment","unitRegex","RegExp","join","hasMeta","value","__linaria","processedPaths","WeakSet","getTemplateProcessor","types","t","options","process","styled","path","state","valueCache","has","add","quasi","node","interpolations","isReferenced","slug","displayName","className","parent","findParent","p","isObjectProperty","isJSXOpeningElement","isVariableDeclarator","parentNode","isIdentifier","id","referencePaths","scope","getBinding","name","length","cssText","expressions","get","quasis","forEach","el","i","self","appended","cooked","matches","match","last","unit","endsWith","replace","ex","end","loc","result","evaluate","beforeLength","next","start","line","column","confident","replacements","push","original","isFunctionExpression","isArrowFunctionExpression","source","getSource","code","buildCodeFrameError","selector","component","extends","props","objectProperty","identifier","stringLiteral","it","key","objectExpression","Object","keys","map","items","arrayExpression","replaceWith","callExpression","file","metadata","localName","addComment","includes","rules"],"mappings":"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","sourcesContent":["/**\n * This file handles transforming template literals to class names or styled components and generates CSS content.\n * It uses CSS code from template literals and evaluated values of lazy dependencies stored in ValueCache.\n */\n\nimport type { Expression } from '@babel/types';\nimport generator from '@babel/generator';\n\nimport type { StyledMeta } from '@linaria/core';\nimport { debug } from '@linaria/logger';\nimport { units } from '../units';\nimport type {\n  State,\n  StrictOptions,\n  TemplateExpression,\n  ValueCache,\n} from '../types';\n\nimport isSerializable from '../utils/isSerializable';\nimport throwIfInvalid from '../utils/throwIfInvalid';\nimport stripLines from '../utils/stripLines';\nimport toCSS from '../utils/toCSS';\nimport getLinariaComment from '../utils/getLinariaComment';\nimport { Core } from '../babel';\n\n// Match any valid CSS units followed by a separator such as ;, newline etc.\nconst unitRegex = new RegExp(`^(${units.join('|')})(;|,|\\n| |\\\\))`);\n\ntype Interpolation = {\n  id: string;\n  node: Expression;\n  source: string;\n  unit: string;\n};\n\nfunction hasMeta(value: any): value is StyledMeta {\n  return value && typeof value === 'object' && (value as any).__linaria;\n}\n\nconst processedPaths = new WeakSet();\n\nexport default function getTemplateProcessor(\n  { types: t }: Core,\n  options: StrictOptions\n) {\n  return function process(\n    { styled, path }: TemplateExpression,\n    state: State,\n    valueCache: ValueCache\n  ) {\n    if (processedPaths.has(path)) {\n      // Do not process an expression\n      // if it is referenced in one template more than once\n      return;\n    }\n\n    processedPaths.add(path);\n\n    const { quasi } = path.node;\n\n    const interpolations: Interpolation[] = [];\n\n    // Check if the variable is referenced anywhere for basic DCE\n    // Only works when it's assigned to a variable\n    let isReferenced = true;\n\n    const [slug, displayName, className] = getLinariaComment(path);\n\n    const parent = path.findParent(\n      (p) =>\n        t.isObjectProperty(p) ||\n        t.isJSXOpeningElement(p) ||\n        t.isVariableDeclarator(p)\n    );\n\n    if (parent) {\n      const parentNode = parent.node;\n      if (t.isVariableDeclarator(parentNode) && t.isIdentifier(parentNode.id)) {\n        const { referencePaths } = path.scope.getBinding(\n          parentNode.id.name\n        ) || { referencePaths: [] };\n\n        isReferenced = referencePaths.length !== 0;\n      }\n    }\n\n    // Serialize the tagged template literal to a string\n    let cssText = '';\n\n    const expressions = path.get('quasi').get('expressions');\n\n    quasi.quasis.forEach((el, i, self) => {\n      let appended = false;\n\n      if (i !== 0 && el.value.cooked) {\n        // Check if previous expression was a CSS variable that we replaced\n        // If it has a unit after it, we need to move the unit into the interpolation\n        // e.g. `var(--size)px` should actually be `var(--size)`\n        // So we check if the current text starts with a unit, and add the unit to the previous interpolation\n        // Another approach would be `calc(var(--size) * 1px), but some browsers don't support all units\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=956573\n        const matches = el.value.cooked.match(unitRegex);\n\n        if (matches) {\n          const last = interpolations[interpolations.length - 1];\n          const [, unit] = matches;\n\n          if (last && cssText.endsWith(`var(--${last.id})`)) {\n            last.unit = unit;\n            cssText += el.value.cooked.replace(unitRegex, '$2');\n            appended = true;\n          }\n        }\n      }\n\n      if (!appended) {\n        cssText += el.value.cooked;\n      }\n\n      const ex = expressions[i];\n\n      if (ex) {\n        const { end } = ex.node.loc!;\n        const result = ex.evaluate();\n        const beforeLength = cssText.length;\n\n        // The location will be end of the current string to start of next string\n        const next = self[i + 1];\n        const loc = {\n          // +1 because the expressions location always shows 1 column before\n          start: { line: el.loc!.end.line, column: el.loc!.end.column + 1 },\n          end: next\n            ? { line: next.loc!.start.line, column: next.loc!.start.column }\n            : { line: end.line, column: end.column + 1 },\n        };\n\n        if (result.confident) {\n          throwIfInvalid(result.value, ex);\n\n          if (isSerializable(result.value)) {\n            // If it's a plain object or an array, convert it to a CSS string\n            cssText += stripLines(loc, toCSS(result.value));\n          } else {\n            cssText += stripLines(loc, result.value);\n          }\n\n          state.replacements.push({\n            original: loc,\n            length: cssText.length - beforeLength,\n          });\n        } else {\n          // Try to preval the value\n          if (\n            options.evaluate &&\n            !(t.isFunctionExpression(ex) || t.isArrowFunctionExpression(ex))\n          ) {\n            const value = valueCache.get(ex.node);\n            throwIfInvalid(value, ex);\n\n            // Skip the blank string instead of throwing an error\n            if (value === '') {\n              return;\n            }\n\n            if (value && typeof value !== 'function') {\n              // Only insert text for non functions\n              // We don't touch functions because they'll be interpolated at runtime\n\n              if (hasMeta(value)) {\n                // If it's an React component wrapped in styled, get the class name\n                // Useful for interpolating components\n                cssText += `.${value.__linaria.className}`;\n              } else if (isSerializable(value)) {\n                cssText += stripLines(loc, toCSS(value));\n              } else {\n                // For anything else, assume it'll be stringified\n                cssText += stripLines(loc, value);\n              }\n\n              state.replacements.push({\n                original: loc,\n                length: cssText.length - beforeLength,\n              });\n\n              return;\n            }\n          }\n\n          if (styled) {\n            const id = `${slug}-${i}`;\n\n            interpolations.push({\n              id,\n              node: ex.node,\n              source: ex.getSource() || generator(ex.node).code,\n              unit: '',\n            });\n\n            cssText += `var(--${id})`;\n          } else {\n            // CSS custom properties can't be used outside components\n            throw ex.buildCodeFrameError(\n              `The CSS cannot contain JavaScript expressions when using the 'css' tag. To evaluate the expressions at build time, pass 'evaluate: true' to the babel plugin.`\n            );\n          }\n        }\n      }\n    });\n\n    let selector = `.${className}`;\n\n    if (styled) {\n      // If `styled` wraps another component and not a primitive,\n      // get its class name to create a more specific selector\n      // it'll ensure that styles are overridden properly\n      if (options.evaluate && t.isIdentifier(styled.component.node)) {\n        let value = valueCache.get(styled.component.node.name);\n        while (hasMeta(value)) {\n          selector += `.${value.__linaria.className}`;\n          value = value.__linaria.extends;\n        }\n      }\n\n      const props = [];\n\n      props.push(\n        t.objectProperty(t.identifier('name'), t.stringLiteral(displayName!))\n      );\n\n      props.push(\n        t.objectProperty(t.identifier('class'), t.stringLiteral(className!))\n      );\n\n      // If we found any interpolations, also pass them so they can be applied\n      if (interpolations.length) {\n        // De-duplicate interpolations based on the source and unit\n        // If two interpolations have the same source code and same unit,\n        // we don't need to use 2 custom properties for them, we can use a single one\n        const result: { [key: string]: Interpolation } = {};\n\n        interpolations.forEach((it) => {\n          const key = it.source + it.unit;\n\n          if (key in result) {\n            cssText = cssText.replace(\n              `var(--${it.id})`,\n              `var(--${result[key].id})`\n            );\n          } else {\n            result[key] = it;\n          }\n        });\n\n        props.push(\n          t.objectProperty(\n            t.identifier('vars'),\n            t.objectExpression(\n              Object.keys(result).map((key) => {\n                const { id, node, unit } = result[key];\n                const items = [node];\n\n                if (unit) {\n                  items.push(t.stringLiteral(unit));\n                }\n\n                return t.objectProperty(\n                  t.stringLiteral(id),\n                  t.arrayExpression(items)\n                );\n              })\n            )\n          )\n        );\n      }\n\n      path.replaceWith(\n        t.callExpression(\n          t.callExpression(\n            t.identifier(state.file.metadata.localName || 'styled'),\n            [styled.component.node]\n          ),\n          [t.objectExpression(props)]\n        )\n      );\n\n      path.addComment('leading', '#__PURE__');\n    } else {\n      path.replaceWith(t.stringLiteral(className!));\n    }\n\n    if (!isReferenced && !cssText.includes(':global')) {\n      return;\n    }\n\n    debug(\n      'evaluator:template-processor:extracted-rule',\n      `\\n${selector} {${cssText}\\n}`\n    );\n\n    state.rules[selector] = {\n      cssText,\n      className: className!,\n      displayName: displayName!,\n      start: path.parent?.loc?.start ?? null,\n    };\n  };\n}\n"],"file":"templateProcessor.js"}