{"version":3,"sources":["../../../src/evaluators/visitors/ProcessStyled.ts"],"names":["types","t","expression","getLinariaComment","linariaComponentTpl","ProcessStyled","path","displayName","className","replaceWith","stringLiteral","extends","isCallExpression","node","callee","arguments","nullLiteral"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,KAAK,IAAIC,CAAlB,QAA2B,aAA3B;AAGA,SAASC,UAAT,QAA2B,iBAA3B;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AAEA,MAAMC,mBAAmB,GAAGF,UAAU,CACnC;AACH;AACA;AACA;AACA;AACA;AACA,IAPsC,CAAtC;AAUA,eAAe,SAASG,aAAT,CAAuBC,IAAvB,EAAuD;AACpE,QAAM,GAAGC,WAAH,EAAgBC,SAAhB,IAA6BL,iBAAiB,CAACG,IAAD,CAApD;;AACA,MAAI,CAACE,SAAL,EAAgB;AACd;AACD;;AAEDF,EAAAA,IAAI,CAACG,WAAL,CACEL,mBAAmB,CAAC;AAClBI,IAAAA,SAAS,EAAEP,CAAC,CAACS,aAAF,CAAgBF,SAAhB,CADO;AAElBD,IAAAA,WAAW,EAAEA,WAAW,GAAGN,CAAC,CAACS,aAAF,CAAgBH,WAAhB,CAAH,GAAkC,IAFxC;AAGlBI,IAAAA,OAAO,EAAEV,CAAC,CAACW,gBAAF,CAAmBN,IAAI,CAACO,IAAL,CAAUC,MAA7B,IACLR,IAAI,CAACO,IAAL,CAAUC,MAAV,CAAiBC,SAAjB,CAA2B,CAA3B,CADK,GAELd,CAAC,CAACe,WAAF;AALc,GAAD,CADrB;AASD","sourcesContent":["/**\n * This visitor replaces styled components with metadata about them.\n * CallExpression should be used to match styled components.\n * Works out of the box for styled that wraps other component,\n * styled.tagName are transformed to call expressions using @babel/plugin-transform-template-literals\n * @babel/plugin-transform-template-literals is loaded as a prest, to force proper ordering. It has to run just after linaria.\n * It is used explicitly in extractor, and loaded as a part of `prest-env` in shaker\n */\n\nimport { types as t } from '@babel/core';\nimport type { NodePath } from '@babel/traverse';\nimport type { CallExpression } from '@babel/types';\nimport { expression } from '@babel/template';\nimport getLinariaComment from '../../utils/getLinariaComment';\n\nconst linariaComponentTpl = expression(\n  `{\n    displayName: %%displayName%%,\n    __linaria: {\n      className: %%className%%,\n      extends: %%extends%%\n    }\n  }`\n);\n\nexport default function ProcessStyled(path: NodePath<CallExpression>) {\n  const [, displayName, className] = getLinariaComment(path);\n  if (!className) {\n    return;\n  }\n\n  path.replaceWith(\n    linariaComponentTpl({\n      className: t.stringLiteral(className),\n      displayName: displayName ? t.stringLiteral(displayName) : null,\n      extends: t.isCallExpression(path.node.callee)\n        ? path.node.callee.arguments[0]\n        : t.nullLiteral(),\n    })\n  );\n}\n"],"file":"ProcessStyled.js"}