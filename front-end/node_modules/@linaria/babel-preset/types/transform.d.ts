/**
 * This file exposes transform function that:
 * - parse the passed code to AST
 * - transforms the AST using Linaria babel preset ('./babel/index.js) and additional config defined in Linaria config file or passed to bundler configuration.
 * - runs generated CSS files through default of user-defined preprocessor
 * - generates source maps for CSS files
 * - return transformed code (without Linaria template literals), generated CSS, source maps and babel metadata from transform step.
 */
/// <reference types="node" />
import path from 'path';
import type { Options, Result } from './types';
export declare function transformUrl(url: string, outputFilename: string, sourceFilename: string, platformPath?: typeof path): string;
export declare function shouldTransformCode(code: string): boolean;
export declare function extractCssFromAst(babelFileResult: babel.BabelFileResult, code: string, options: Options): {
    code: string;
    sourceMap: {
        version: string;
        sources: string[];
        names: string[];
        sourceRoot?: string | undefined;
        sourcesContent?: string[] | undefined;
        mappings: string;
        file: string;
    } | null;
    cssText?: undefined;
    rules?: undefined;
    replacements?: undefined;
    dependencies?: undefined;
    readonly cssSourceMapText?: undefined;
} | {
    code: string;
    cssText: string;
    rules: {
        [selector: string]: {
            className: string;
            displayName: string;
            cssText: string;
            start: import("./types").Location | null | undefined;
        };
    };
    replacements: import("./types").Replacement[];
    dependencies: string[];
    sourceMap: {
        version: string;
        sources: string[];
        names: string[];
        sourceRoot?: string | undefined;
        sourcesContent?: string[] | undefined;
        mappings: string;
        file: string;
    } | null;
    readonly cssSourceMapText: string;
};
export default function transform(code: string, options: Options): Result;
