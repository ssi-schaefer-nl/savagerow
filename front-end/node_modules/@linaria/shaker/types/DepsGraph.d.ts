import { types as t } from '@babel/core';
import type { Identifier, Node } from '@babel/types';
import ScopeManager, { PromisedNode } from './scope';
export default class DepsGraph {
    protected scope: ScopeManager;
    readonly imports: Map<string, Identifier[]>;
    readonly importAliases: Map<Identifier, string>;
    readonly importTypes: Map<string, 'wildcard' | 'default'>;
    protected readonly edges: Array<[Node, Node]>;
    protected readonly exports: Map<string, Node>;
    protected readonly dependencies: Map<Node, Set<Node>>;
    protected readonly dependents: Map<Node, Set<Node>>;
    private actionQueue;
    private processQueue;
    private getAllReferences;
    constructor(scope: ScopeManager);
    addEdge(dependent: Node | PromisedNode, dependency: Node | PromisedNode): void;
    addExport(name: string, node: Node): void;
    getDependenciesByBinding(id: string): t.Node[];
    getDependentsByBinding(id: string): t.Node[];
    findDependencies(like: Object): t.Node[];
    findDependents(like: object): t.Node[];
    getDependencies(nodes: Node[]): t.Node[];
    getLeafs(only: string[] | null): Array<Node | undefined>;
}
