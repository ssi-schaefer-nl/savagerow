"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = shake;

var _generator = _interopRequireDefault(require("@babel/generator"));

var _logger = require("@linaria/logger");

var _babelPreset = require("@linaria/babel-preset");

var _graphBuilder = _interopRequireDefault(require("./graphBuilder"));

var _dumpNode = _interopRequireDefault(require("./dumpNode"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Returns new tree without dead nodes
 */
function shakeNode(node, alive) {
  const keys = (0, _babelPreset.getVisitorKeys)(node);
  const changes = {};

  const isNodeAlive = n => alive.has(n);

  for (const key of keys) {
    const subNode = node[key];

    if (Array.isArray(subNode)) {
      const list = [];
      let hasChanges = false;

      for (let i = 0; i < subNode.length; i++) {
        const child = subNode[i];
        const isAlive = isNodeAlive(child);
        hasChanges = hasChanges || !isAlive;

        if (child && isAlive) {
          const shaken = shakeNode(child, alive);

          if (shaken) {
            list.push(shaken);
          }

          hasChanges = hasChanges || shaken !== child;
        }
      }

      if (hasChanges) {
        changes[key] = list;
      }
    } else if ((0, _babelPreset.isNode)(subNode)) {
      if (isNodeAlive(subNode)) {
        const shaken = shakeNode(subNode, alive);

        if (shaken && shaken !== subNode) {
          changes[key] = shaken;
        }
      } else {
        changes[key] = undefined;
      }
    }
  }

  return Object.keys(changes).length ? { ...node,
    ...changes
  } : node;
}
/*
 * Gets AST and a list of nodes for evaluation
 * Removes unrelated “dead” code.
 * Adds to the end of module export of array of evaluated values or evaluation errors.
 * Returns new AST and an array of external dependencies.
 */


function shake(rootPath, exports) {
  (0, _logger.debug)('evaluator:shaker:shake', () => `source (exports: ${(exports || []).join(', ')}):\n${(0, _generator.default)(rootPath).code}`);
  const depsGraph = (0, _graphBuilder.default)(rootPath);
  const alive = new Set();
  let deps = depsGraph.getLeafs(exports).map(i => i);

  while (deps.length > 0) {
    // Mark all dependencies as alive
    deps.forEach(d => alive.add(d)); // Collect new dependencies of dependencies

    deps = depsGraph.getDependencies(deps).filter(d => !alive.has(d));
  }

  const shaken = shakeNode(rootPath, alive);
  /*
   * If we want to know what is really happen with our code tree,
   * we can print formatted tree here by setting env variable LINARIA_LOG=debug
   */

  (0, _logger.debug)('evaluator:shaker:shake', () => (0, _dumpNode.default)(rootPath, alive));
  const imports = new Map();

  for (let [source, members] of depsGraph.imports.entries()) {
    const defaultMembers = depsGraph.importTypes.get(source) === 'wildcard' ? ['*'] : [];
    const aliveMembers = new Set(members.filter(i => alive.has(i)).map(i => i.name));
    imports.set(source, aliveMembers.size > 0 ? Array.from(aliveMembers) : defaultMembers);
  }

  return [shaken, imports];
}
//# sourceMappingURL=shaker.js.map