{"version":3,"sources":["../src/graphBuilder.ts"],"names":["types","t","isNode","getVisitorKeys","GraphBuilderState","getVisitors","ScopeManager","isVoid","node","isUnaryExpression","operator","GraphBuilder","build","root","graph","constructor","rootNode","visit","isExportsIdentifier","isIdentifier","scope","getDeclaration","globalExportsIdentifier","isMemberExpression","property","name","object","globalModuleIdentifier","isExportsAssigment","isAssignmentExpression","left","baseVisit","ignoreDeps","dependencies","isExpression","keys","key","subNode","Array","isArray","i","length","child","push","forEach","dep","addEdge","callbacks","callback","parent","parentKey","listIdx","right","isObjectExpression","properties","prop","isObjectProperty","value","addExport","isScopable","isFunction","new","isProgram","fnStack","visitors","action","visitor","shift","call","isDeclaration","pop","dispose"],"mappings":"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","sourcesContent":["import { types as t } from '@babel/core';\nimport type { AssignmentExpression, Node, VisitorKeys } from '@babel/types';\nimport { isNode, getVisitorKeys } from '@linaria/babel-preset';\nimport DepsGraph from './DepsGraph';\nimport GraphBuilderState from './GraphBuilderState';\nimport { getVisitors } from './Visitors';\nimport type { VisitorAction } from './types';\nimport ScopeManager from './scope';\n\nconst isVoid = (node: Node): boolean =>\n  t.isUnaryExpression(node) && node.operator === 'void';\n\nclass GraphBuilder extends GraphBuilderState {\n  static build(root: Node): DepsGraph {\n    return new GraphBuilder(root).graph;\n  }\n\n  constructor(rootNode: Node) {\n    super();\n\n    this.visit(rootNode, null, null, null);\n  }\n\n  private isExportsIdentifier(node: Node) {\n    if (\n      t.isIdentifier(node) &&\n      this.scope.getDeclaration(node) === ScopeManager.globalExportsIdentifier\n    ) {\n      return true;\n    }\n\n    return (\n      t.isMemberExpression(node) &&\n      t.isIdentifier(node.property) &&\n      node.property.name === 'exports' &&\n      t.isIdentifier(node.object) &&\n      this.scope.getDeclaration(node.object) ===\n        ScopeManager.globalModuleIdentifier\n    );\n  }\n\n  private isExportsAssigment(node: Node): node is AssignmentExpression {\n    if (\n      node &&\n      t.isAssignmentExpression(node) &&\n      t.isMemberExpression(node.left)\n    ) {\n      if (this.isExportsIdentifier(node.left)) {\n        // This is a default export like `module.exports = 42`\n        return true;\n      }\n\n      if (this.isExportsIdentifier(node.left.object)) {\n        // This is a named export like `module.exports.a = 42` or `exports.a = 42`\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /*\n   * Implements a default behaviour for AST-nodes:\n   * • visits every child;\n   * • if the current node is an Expression node, adds all its children as dependencies.\n   *\n   * eg. BinaryExpression has children `left` and `right`,\n   * both of them are required for evaluating the value of the expression\n   */\n  baseVisit<TNode extends Node>(node: TNode, ignoreDeps = false) {\n    const dependencies = [];\n    const isExpression = t.isExpression(node);\n    const keys = getVisitorKeys(node);\n    for (const key of keys) {\n      // Ignore all types\n      if (key === 'typeArguments' || key === 'typeParameters') {\n        continue;\n      }\n\n      const subNode = node[key as keyof TNode];\n\n      if (Array.isArray(subNode)) {\n        for (let i = 0; i < subNode.length; i++) {\n          const child = subNode[i];\n          if (child && this.visit(child, node, key, i) !== 'ignore') {\n            dependencies.push(child);\n          }\n        }\n      } else if (\n        isNode(subNode) &&\n        this.visit(subNode, node, key) !== 'ignore'\n      ) {\n        dependencies.push(subNode);\n      }\n    }\n\n    if (isExpression && !ignoreDeps) {\n      dependencies.forEach((dep) => this.graph.addEdge(node, dep));\n    }\n\n    this.callbacks.forEach((callback) => callback(node));\n  }\n\n  visit<TNode extends Node, TParent extends Node>(\n    node: TNode,\n    parent: TParent | null,\n    parentKey: VisitorKeys[TParent['type']] | null,\n    listIdx: number | null = null\n  ): VisitorAction {\n    if (\n      this.isExportsAssigment(node) &&\n      !this.isExportsAssigment(node.right) &&\n      !isVoid(node.right)\n    ) {\n      if (\n        t.isMemberExpression(node.left) &&\n        t.isIdentifier(node.left.property)\n      ) {\n        if (\n          t.isIdentifier(node.left.object) &&\n          node.left.object.name === 'module'\n        ) {\n          // It's a batch or default export\n          if (t.isObjectExpression(node.right)) {\n            // Batch export is a very particular case.\n            // Each property of the assigned object is independent named export.\n            // We also need to specify all dependencies and call `visit` for every value.\n            this.visit(node.left, node, 'left');\n            node.right.properties.forEach((prop) => {\n              if (t.isObjectProperty(prop) && t.isIdentifier(prop.key)) {\n                this.visit(prop.value, prop, 'value');\n                this.graph.addExport(prop.key.name, prop);\n                this.graph.addEdge(prop, node.right);\n                this.graph.addEdge(prop, prop.key);\n                this.graph.addEdge(prop.key, prop.value);\n              }\n            });\n\n            this.graph.addEdge(node.right, node);\n            this.graph.addEdge(node, node.left);\n\n            // We have done all the required work, so stop here\n            return;\n          } else {\n            this.graph.addExport('default', node);\n          }\n        } else {\n          this.graph.addExport(node.left.property.name, node);\n        }\n      }\n    }\n\n    const isScopable = t.isScopable(node);\n    const isFunction = t.isFunction(node);\n\n    if (isScopable) this.scope.new(t.isProgram(node) || t.isFunction(node));\n    if (isFunction) this.fnStack.push(node);\n\n    const visitors = getVisitors(node);\n    let action: VisitorAction;\n    if (visitors.length > 0) {\n      let visitor;\n      while (!action && (visitor = visitors.shift())) {\n        action = visitor.call(this, node, parent, parentKey, listIdx);\n      }\n    } else {\n      this.baseVisit(node);\n    }\n\n    if (parent && action !== 'ignore' && t.isDeclaration(node)) {\n      // Declaration always depends on its scope\n      this.graph.addEdge(node, parent);\n    }\n\n    if (isFunction) this.fnStack.pop();\n    if (isScopable) this.scope.dispose();\n\n    return action;\n  }\n}\n\nexport default GraphBuilder.build;\n"],"file":"graphBuilder.js"}