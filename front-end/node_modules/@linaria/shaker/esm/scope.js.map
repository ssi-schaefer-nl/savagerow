{"version":3,"sources":["../src/scope.ts"],"names":["types","t","ResolvedNode","Symbol","functionScopes","WeakSet","PromisedNode","is","obj","identifier","resolveNode","scopeIds","WeakMap","getId","scope","get","name","ScopeManager","global","map","constructor","Map","new","declare","globalExportsIdentifier","globalModuleIdentifier","isFunction","scopeId","nextId","add","set","handlers","stack","unshift","dispose","disposed","shift","delete","isHoistable","from","idName","slice","find","s","has","promise","declarations","Set","Array","forEach","handler","addReference","id","whereIsDeclared","undefined","getDeclaration","identifierOrName","addDeclareHandler","push","filter","h"],"mappings":"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","sourcesContent":["import { types as t } from '@babel/core';\nimport type { Identifier, Node } from '@babel/types';\n\ntype Scope = Map<string, Set<Identifier>>;\n\nexport type ScopeId = number | 'global';\nexport type DeclareHandler = (\n  identifier: Identifier,\n  from: Identifier | null\n) => void;\n\nconst ResolvedNode = Symbol('ResolvedNode');\nconst functionScopes = new WeakSet<Scope>();\n\nexport class PromisedNode<T = Node> {\n  static is<TNode>(obj: any): obj is PromisedNode<TNode> {\n    return obj && ResolvedNode in obj;\n  }\n\n  [ResolvedNode]: T | undefined;\n\n  get identifier(): T | undefined {\n    return this[ResolvedNode];\n  }\n}\n\nexport const resolveNode = <T = Node>(\n  obj: T | PromisedNode<T> | undefined\n): T | undefined => (PromisedNode.is<T>(obj) ? obj.identifier : obj);\n\nconst scopeIds = new WeakMap<Scope, number | 'global'>();\nconst getId = (scope: Scope, identifier: Identifier): string =>\n  `${scopeIds.get(scope)}:${identifier.name}`;\n\nexport default class ScopeManager {\n  public static globalExportsIdentifier = t.identifier('exports');\n  public static globalModuleIdentifier = t.identifier('module');\n  private nextId = 0;\n  private readonly stack: Array<Scope> = [];\n  private readonly map: Map<ScopeId, Scope> = new Map();\n  private readonly handlers: Map<ScopeId, Array<DeclareHandler>> = new Map();\n  private readonly declarations: Map<\n    string,\n    Identifier | PromisedNode<Identifier>\n  > = new Map();\n\n  private get global(): Scope {\n    return this.map.get('global')!;\n  }\n\n  constructor() {\n    this.new(true, 'global');\n    this.declare(ScopeManager.globalExportsIdentifier, false);\n    this.declare(ScopeManager.globalModuleIdentifier, false);\n  }\n\n  new(isFunction: boolean, scopeId: ScopeId = this.nextId++): Scope {\n    const scope: Scope = new Map();\n    if (isFunction) {\n      functionScopes.add(scope);\n    }\n\n    scopeIds.set(scope, scopeId);\n    this.map.set(scopeId, scope);\n    this.handlers.set(scopeId, []);\n    this.stack.unshift(scope);\n    return scope;\n  }\n\n  dispose(): Scope | undefined {\n    const disposed = this.stack.shift();\n    if (disposed) {\n      this.map.delete(scopeIds.get(disposed)!);\n    }\n\n    return disposed;\n  }\n\n  declare(\n    identifier: Identifier,\n    isHoistable: boolean,\n    from: Identifier | null = null,\n    stack = 0\n  ): void {\n    const idName = identifier.name;\n    const scope = this.stack\n      .slice(stack)\n      .find((s) => !isHoistable || functionScopes.has(s))!;\n    if (this.global.has(idName)) {\n      // It's probably a declaration of a previous referenced identifier\n      // Let's use na√Øve implementation of hoisting\n      const promise = this.declarations.get(\n        getId(this.global, identifier)\n      )! as PromisedNode<Identifier>;\n      promise[ResolvedNode] = identifier;\n      scope.set(\n        idName,\n        new Set([identifier, ...Array.from(this.global.get(idName)!)])\n      );\n      this.global.delete(idName);\n    } else {\n      scope.set(idName, new Set([identifier]));\n    }\n\n    this.declarations.set(getId(scope, identifier), identifier);\n    const handlers = this.handlers.get(scopeIds.get(scope)!)!;\n    handlers.forEach((handler) => handler(identifier, from));\n  }\n\n  addReference(identifier: Identifier): Identifier | PromisedNode {\n    const name = identifier.name;\n    const scope = this.stack.find((s) => s.has(name)) || this.global;\n    const id = getId(scope, identifier);\n    if (scope === this.global && !scope.has(name)) {\n      scope.set(name, new Set());\n      this.declarations.set(getId(scope, identifier), new PromisedNode());\n    }\n\n    scope.get(name)!.add(identifier);\n    return this.declarations.get(id)!;\n  }\n\n  whereIsDeclared(identifier: Identifier): ScopeId | undefined {\n    const name = identifier.name;\n    const scope = this.stack.find(\n      (s) => s.has(name) && s.get(name)!.has(identifier)\n    );\n    if (scope) {\n      return scopeIds.get(scope);\n    }\n\n    if (this.global.has(name)) {\n      return 'global';\n    }\n\n    return undefined;\n  }\n\n  getDeclaration(\n    identifierOrName: Identifier | string\n  ): Identifier | undefined {\n    let name: string;\n    if (typeof identifierOrName === 'string') {\n      name = identifierOrName;\n    } else {\n      const scopeId = this.whereIsDeclared(identifierOrName);\n      if (scopeId === undefined) {\n        return undefined;\n      }\n\n      name = getId(this.map.get(scopeId)!, identifierOrName);\n    }\n\n    return resolveNode(this.declarations.get(name));\n  }\n\n  addDeclareHandler(handler: DeclareHandler): () => void {\n    const scopeId = scopeIds.get(this.stack[0])!;\n    this.handlers.get(scopeId)!.push(handler);\n    return () => {\n      const handlers = this.handlers.get(scopeId)!.filter((h) => h !== handler);\n      this.handlers.set(scopeId, handlers);\n    };\n  }\n}\n"],"file":"scope.js"}