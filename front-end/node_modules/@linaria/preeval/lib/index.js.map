{"version":3,"sources":["../src/index.ts"],"names":["index","babel","options","visitor","Program","enter","path","state","queue","rules","dependencies","replacements","traverse","ImportDeclaration","p","TaggedTemplateExpression","JSXElement","CallExpression","ProcessStyled","ProcessCSS","preset","context","plugins"],"mappings":";;;;;;;AAOA;;AAPA;AACA;AACA;AACA;AAaA,SAASA,KAAT,CAAeC,KAAf,EAA4BC,OAA5B,EAAoD;AAClD,SAAO;AACLC,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE;AACPC,QAAAA,KAAK,CAACC,IAAD,EAA0BC,KAA1B,EAAwC;AAC3C;AACAA,UAAAA,KAAK,CAACC,KAAN,GAAc,EAAd;AACAD,UAAAA,KAAK,CAACE,KAAN,GAAc,EAAd;AACAF,UAAAA,KAAK,CAACP,KAAN,GAAc,CAAC,CAAf;AACAO,UAAAA,KAAK,CAACG,YAAN,GAAqB,EAArB;AACAH,UAAAA,KAAK,CAACI,YAAN,GAAqB,EAArB,CAN2C,CAQ3C;AACA;;AACAL,UAAAA,IAAI,CAACM,QAAL,CAAc;AACZC,YAAAA,iBAAiB,EAAGC,CAAD,IAAO,yCAAuBb,KAAvB,EAA8Ba,CAA9B,EAAiCP,KAAjC,CADd;AAEZQ,YAAAA,wBAAwB,EAAGD,CAAD,IACxB,qCAAmBb,KAAnB,EAA0Ba,CAA1B,EAA6BP,KAA7B,EAAoCL,OAApC,CAHU;AAIZc,YAAAA,UAAU,EAAVA;AAJY,WAAd;AAMD;;AAjBM,OADF;AAoBPC,MAAAA,cAAc,EAAEC,0BApBT;AAqBPH,MAAAA,wBAAwB,EAAEI,uBArBnB,CAqB+B;;AArB/B;AADJ,GAAP;AAyBD;;AAEc,SAASC,MAAT,CAAgBC,OAAhB,EAA8BnB,OAA9B,EAAsD;AACnE,SAAO;AACLoB,IAAAA,OAAO,EAAE,CAAC,CAACtB,KAAD,EAAQE,OAAR,CAAD;AADJ,GAAP;AAGD","sourcesContent":["/**\n * This file is a babel preset used to transform files inside evaluators.\n * It works the same as main `babel/extract` preset, but do not evaluate lazy dependencies.\n */\nimport type { NodePath } from '@babel/traverse';\nimport type { Program } from '@babel/types';\nimport type { State, StrictOptions } from '@linaria/babel-preset';\nimport {\n  GenerateClassNames,\n  DetectStyledImportName,\n  JSXElement,\n  ProcessStyled,\n  ProcessCSS,\n} from '@linaria/babel-preset';\nimport { Core } from './babel';\n\nfunction index(babel: Core, options: StrictOptions) {\n  return {\n    visitor: {\n      Program: {\n        enter(path: NodePath<Program>, state: State) {\n          // Collect all the style rules from the styles we encounter\n          state.queue = [];\n          state.rules = {};\n          state.index = -1;\n          state.dependencies = [];\n          state.replacements = [];\n\n          // We need our transforms to run before anything else\n          // So we traverse here instead of a in a visitor\n          path.traverse({\n            ImportDeclaration: (p) => DetectStyledImportName(babel, p, state),\n            TaggedTemplateExpression: (p) =>\n              GenerateClassNames(babel, p, state, options),\n            JSXElement,\n          });\n        },\n      },\n      CallExpression: ProcessStyled,\n      TaggedTemplateExpression: ProcessCSS, // TaggedTemplateExpression is processed before CallExpression\n    },\n  };\n}\n\nexport default function preset(context: any, options: StrictOptions) {\n  return {\n    plugins: [[index, options]],\n  };\n}\n"],"file":"index.js"}