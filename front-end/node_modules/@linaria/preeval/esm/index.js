/**
 * This file is a babel preset used to transform files inside evaluators.
 * It works the same as main `babel/extract` preset, but do not evaluate lazy dependencies.
 */
import { GenerateClassNames, DetectStyledImportName, JSXElement, ProcessStyled, ProcessCSS } from '@linaria/babel-preset';

function index(babel, options) {
  return {
    visitor: {
      Program: {
        enter(path, state) {
          // Collect all the style rules from the styles we encounter
          state.queue = [];
          state.rules = {};
          state.index = -1;
          state.dependencies = [];
          state.replacements = []; // We need our transforms to run before anything else
          // So we traverse here instead of a in a visitor

          path.traverse({
            ImportDeclaration: p => DetectStyledImportName(babel, p, state),
            TaggedTemplateExpression: p => GenerateClassNames(babel, p, state, options),
            JSXElement
          });
        }

      },
      CallExpression: ProcessStyled,
      TaggedTemplateExpression: ProcessCSS // TaggedTemplateExpression is processed before CallExpression

    }
  };
}

export default function preset(context, options) {
  return {
    plugins: [[index, options]]
  };
}
//# sourceMappingURL=index.js.map