{"version":3,"file":"react-contexify.cjs.production.min.js","sources":["../src/components/RefTrackerProvider.tsx","../src/core/eventManager.ts","../src/hooks/useRefTracker.ts","../src/core/contextMenu.ts","../src/constants.ts","../src/components/utils.ts","../src/components/Menu.tsx","../src/components/Item.tsx","../src/hooks/usePrevious.ts","../src/components/menuController.ts","../src/components/Separator.tsx","../src/components/Submenu.tsx","../src/hooks/useContextMenu.ts"],"sourcesContent":["import React, { useContext, createContext } from 'react';\nimport { RefTracker } from '../hooks';\n\nconst Context = createContext({} as RefTracker);\n\n/**\n * Access parent ref tracker.\n */\nexport function useRefTrackerContext() {\n  return useContext(Context);\n}\n\nexport interface RefTrackerProviderProps {\n  refTracker: RefTracker;\n}\n\nexport const RefTrackerProvider: React.FC<RefTrackerProviderProps> = props => {\n  return (\n    <Context.Provider value={props.refTracker}>\n      {props.children}\n    </Context.Provider>\n  );\n};\n","import { EVENT } from '../constants';\n\nexport type EventType = string | number | symbol;\nexport type Handler<T = any> = (args: T) => void;\n\nexport interface EventManager<E = EventType> {\n  on<T = any>(event: E, handler: Handler<T>): EventManager<E>;\n  off<T = any>(event: E, handler?: Handler<T>): EventManager<E>;\n  emit<T = any>(event: E, args?: T): EventManager<E>;\n}\n\nfunction createEventManager<E = EventType>(): EventManager<E> {\n  const eventList = new Map<E, Set<Handler>>();\n\n  return {\n    on<T = any>(event: E, handler: Handler<T>) {\n      //eslint-disable-next-line @typescript-eslint/no-unused-expressions\n      eventList.has(event)\n        ? eventList.get(event)?.add(handler)\n        : eventList.set(event, new Set([handler]));\n      return this;\n    },\n    off<T = any>(event: E, handler?: Handler<T>) {\n      handler ? eventList.get(event)!.delete(handler) : eventList.delete(event);\n      return this;\n    },\n    emit<T = any>(event: E, args: T) {\n      if (process.env.NODE !== 'production') {\n        const currentEv = (event as unknown) as number;\n\n        if (!eventList.has(event) && currentEv !== EVENT.HIDE_ALL) {\n          console.error(\n            `It seems that the menu you are trying to display is not renderer or you have a menu id mismatch.`,\n            `You used the menu id: ${event}`\n          );\n        }\n      }\n      eventList.has(event) &&\n        eventList.get(event)!.forEach((handler: Handler<T>) => {\n          handler(args);\n        });\n      return this;\n    },\n  };\n}\n\nexport const eventManager = createEventManager();\n","import { useRef } from 'react';\n\nexport interface RefTrackerValue {\n  node: HTMLElement;\n  isSubmenu: boolean;\n  submenuRefTracker?: RefTracker;\n}\n\nexport type RefTracker = ReturnType<typeof useRefTracker>;\n\n/**\n * Used to store children refs\n */\nexport function useRefTracker() {\n  return useRef<Map<HTMLElement, RefTrackerValue>>(new Map()).current;\n}\n","import { eventManager } from './eventManager';\nimport { MenuId, TriggerEvent } from '../types';\nimport { SyntheticEvent } from 'react';\n\nimport { EVENT } from '../constants';\n\nexport interface ShowContextMenuParams {\n  id: MenuId;\n  event: TriggerEvent;\n  props?: any;\n  position?: {\n    x: number;\n    y: number;\n  } | null;\n}\n\nexport interface ContextMenu {\n  show: (params: ShowContextMenuParams) => void;\n  hideAll: () => void;\n}\n\nconst contextMenu: ContextMenu = {\n  show({ id, event, props, position }) {\n    if (event.preventDefault) event.preventDefault();\n\n    eventManager.emit(EVENT.HIDE_ALL).emit(id, {\n      event: (event as SyntheticEvent).nativeEvent || event,\n      props,\n      position,\n    });\n  },\n  hideAll() {\n    eventManager.emit(EVENT.HIDE_ALL);\n  },\n};\n\nexport { contextMenu };\n","/*\n * css classes mapping\n * */\nexport const enum STYLE {\n  menu = 'react-contexify',\n  submenu = 'react-contexify react-contexify__submenu',\n  submenuArrow = 'react-contexify__submenu-arrow',\n  submenuOpen = 'react-contexify__submenu--is-open',\n  separator = 'react-contexify__separator',\n  item = 'react-contexify__item',\n  itemDisabled = 'react-contexify__item--disabled',\n  itemContent = 'react-contexify__item__content',\n  theme = 'react-contexify__theme--',\n  animationWillEnter = 'react-contexify__will-enter--',\n  animationWillLeave = 'react-contexify__will-leave--',\n}\n\nexport const enum EVENT {\n  HIDE_ALL,\n}\n\nexport const theme = {\n  light: 'light',\n  dark: 'dark',\n};\n\nexport const animation = {\n  fade: 'fade',\n  flip: 'flip',\n  scale: 'scale',\n  slide: 'slide',\n};\n\nexport const NOOP = () => {};\n","import { Children, cloneElement, ReactNode, ReactElement } from 'react';\n\nimport {\n  BooleanPredicate,\n  PredicateParams,\n  MenuAnimation,\n  TriggerEvent,\n} from '../types';\n\nexport function isFn(v: any): v is Function {\n  return typeof v === 'function';\n}\n\nexport function isStr(v: any): v is String {\n  return typeof v === 'string';\n}\n\nexport function isTouchEvent(e: TriggerEvent): e is TouchEvent {\n  return e.type === 'touchend';\n}\n\nexport function cloneItems(\n  children: ReactNode,\n  props: { triggerEvent: TriggerEvent; propsFromTrigger?: object }\n) {\n  return Children.map(\n    // remove null item\n    Children.toArray(children).filter(Boolean),\n    item => cloneElement(item as ReactElement<any>, props)\n  );\n}\n\nexport function getMousePosition(e: TriggerEvent) {\n  const pos = {\n    x: 0,\n    y: 0,\n  };\n\n  if (isTouchEvent(e) && e.changedTouches && e.changedTouches.length > 0) {\n    pos.x = e.changedTouches[0].clientX;\n    pos.y = e.changedTouches[0].clientY;\n  } else {\n    pos.x = (e as MouseEvent).clientX;\n    pos.y = (e as MouseEvent).clientY;\n  }\n\n  if (!pos.x || pos.x < 0) pos.x = 0;\n\n  if (!pos.y || pos.y < 0) pos.y = 0;\n\n  return pos;\n}\n\nexport function getPredicateValue(\n  predicate: BooleanPredicate,\n  payload: PredicateParams\n) {\n  return isFn(predicate) ? predicate(payload) : predicate;\n}\n\nexport function hasExitAnimation(animation: MenuAnimation) {\n  return !!(\n    animation &&\n    (isStr(animation) || ('exit' in animation && animation.exit))\n  );\n}\n","/* global: window */\nimport React, {\n  ReactNode,\n  useEffect,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\nimport cx from 'clsx';\n\nimport { RefTrackerProvider } from './RefTrackerProvider';\n\nimport { eventManager } from '../core/eventManager';\nimport {\n  TriggerEvent,\n  MenuId,\n  ContextMenuParams,\n  MenuAnimation,\n} from '../types';\nimport { usePrevious, useRefTracker } from '../hooks';\nimport { createMenuController } from './menuController';\nimport { NOOP, STYLE, EVENT } from '../constants';\nimport {\n  cloneItems,\n  getMousePosition,\n  hasExitAnimation,\n  isFn,\n  isStr,\n} from './utils';\n\nexport interface MenuProps\n  extends Omit<React.HTMLAttributes<HTMLElement>, 'id'> {\n  /**\n   * Unique id to identify the menu. Use to Trigger the corresponding menu\n   */\n  id: MenuId;\n\n  /**\n   * Any valid node that can be rendered\n   */\n  children: ReactNode;\n\n  /**\n   * Theme is appended to `react-contexify__theme--${given theme}`.\n   *\n   * Built-in theme are `light` and `dark`\n   */\n  theme?: string;\n\n  /**\n   * Animation is appended to\n   * - `.react-contexify__will-enter--${given animation}`\n   * - `.react-contexify__will-leave--${given animation}`\n   *\n   * - To disable all animations you can pass `false`\n   * - To disable only the enter or the exit animation you can provide an object `{enter: false, exit: 'exitAnimation'}`\n   *\n   * - default is set to `scale`\n   *\n   * To use the built-in animation a helper in available\n   * `import { animation } from 'react-contexify`\n   *\n   * animation.fade\n   */\n  animation?: MenuAnimation;\n\n  /**\n   * Invoked after the menu is visible.\n   */\n  onShown?: () => void;\n\n  /**\n   * Invoked after the menu has been hidden.\n   */\n  onHidden?: () => void;\n}\n\ninterface MenuState {\n  x: number;\n  y: number;\n  visible: boolean;\n  triggerEvent: TriggerEvent;\n  propsFromTrigger: any;\n  willLeave: boolean;\n}\n\nfunction reducer(\n  state: MenuState,\n  payload: Partial<MenuState> | ((state: MenuState) => Partial<MenuState>)\n) {\n  return isFn(payload)\n    ? { ...state, ...payload(state) }\n    : { ...state, ...payload };\n}\n\nexport const Menu: React.FC<MenuProps> = ({\n  id,\n  theme,\n  style,\n  className,\n  children,\n  animation = 'scale',\n  onHidden = NOOP,\n  onShown = NOOP,\n  ...rest\n}) => {\n  const [state, setState] = useReducer(reducer, {\n    x: 0,\n    y: 0,\n    visible: false,\n    triggerEvent: {} as TriggerEvent,\n    propsFromTrigger: null,\n    willLeave: false,\n  });\n  const nodeRef = useRef<HTMLDivElement>(null);\n  const didMount = useRef(false);\n  const wasVisible = usePrevious(state.visible);\n  const refTracker = useRefTracker();\n  const [menuController] = useState(() => createMenuController());\n\n  // subscribe event manager\n  useEffect(() => {\n    didMount.current = true;\n    eventManager.on(id, show).on(EVENT.HIDE_ALL, hide);\n\n    return () => {\n      eventManager.off(id, show).off(EVENT.HIDE_ALL, hide);\n    };\n    // hide rely on setState(dispatch), which is guaranted to be the same across render\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id]);\n\n  // handle show/ hide callback\n  useEffect(() => {\n    if (didMount.current && state.visible !== wasVisible) {\n      state.visible ? onShown() : onHidden();\n    }\n    // wasWisible is a ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.visible, onHidden, onShown]);\n\n  // collect menu items for keyboard navigation\n  useEffect(() => {\n    if (!state.visible) {\n      refTracker.clear();\n    } else {\n      menuController.init(Array.from(refTracker.values()));\n    }\n  }, [state.visible, menuController, refTracker]);\n\n  // compute menu position\n  useEffect(() => {\n    if (state.visible) {\n      const { innerWidth: windowWidth, innerHeight: windowHeight } = window;\n      const {\n        offsetWidth: menuWidth,\n        offsetHeight: menuHeight,\n      } = nodeRef.current!;\n      let { x, y } = state;\n\n      if (x + menuWidth > windowWidth) {\n        x -= x + menuWidth - windowWidth;\n      }\n\n      if (y + menuHeight > windowHeight) {\n        y -= y + menuHeight - windowHeight;\n      }\n\n      setState({\n        x,\n        y,\n      });\n    }\n\n    // state.visible and state{x,y} are updated together\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.visible]);\n\n  // subscribe dom events\n  useEffect(() => {\n    function handleKeyboard(e: KeyboardEvent) {\n      e.preventDefault();\n      switch (e.key) {\n        case 'Enter':\n          if (!menuController.openSubmenu()) hide();\n          break;\n        case 'Escape':\n          hide();\n          break;\n        case 'ArrowUp':\n          menuController.moveUp();\n          break;\n        case 'ArrowDown':\n          menuController.moveDown();\n          break;\n        case 'ArrowRight':\n          menuController.openSubmenu();\n          break;\n        case 'ArrowLeft':\n          menuController.closeSubmenu();\n          break;\n      }\n    }\n\n    if (state.visible) {\n      window.addEventListener('resize', hide);\n      window.addEventListener('contextmenu', hide);\n      window.addEventListener('click', hide);\n      window.addEventListener('scroll', hide);\n      window.addEventListener('keydown', handleKeyboard);\n\n      // This let us debug the menu in the console in dev mode\n      if (process.env.NODE_ENV !== 'development') {\n        window.addEventListener('blur', hide);\n      }\n    }\n\n    return () => {\n      window.removeEventListener('resize', hide);\n      window.removeEventListener('contextmenu', hide);\n      window.removeEventListener('click', hide);\n      window.removeEventListener('scroll', hide);\n      window.removeEventListener('keydown', handleKeyboard);\n\n      if (process.env.NODE_ENV !== 'development') {\n        window.removeEventListener('blur', hide);\n      }\n    };\n    // state.visible will let us get the right reference to `hide`\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.visible, menuController]);\n\n  function show({ event, props, position }: ContextMenuParams) {\n    event.stopPropagation();\n    const { x, y } = position || getMousePosition(event);\n\n    // prevent react from batching the state update\n    // if the menu is already visible we have to recompute bounding rect based on position\n    setTimeout(() => {\n      setState({\n        visible: true,\n        willLeave: false,\n        x,\n        y,\n        triggerEvent: event,\n        propsFromTrigger: props,\n      });\n    }, 0);\n  }\n\n  function hide(event?: Event) {\n    // Safari trigger a click event when you ctrl + trackpad\n    // Firefox:  trigger a click event when right click occur\n    const e = event as KeyboardEvent & MouseEvent;\n\n    if (\n      typeof e !== 'undefined' &&\n      (e.button === 2 || e.ctrlKey === true) &&\n      e.type !== 'contextmenu'\n    ) {\n      return;\n    }\n\n    hasExitAnimation(animation)\n      ? setState(state => ({ willLeave: state.visible }))\n      : setState(state => ({ visible: state.visible ? false : state.visible }));\n  }\n\n  function handleAnimationEnd() {\n    if (state.willLeave && state.visible) {\n      setState({ visible: false, willLeave: false });\n    }\n  }\n\n  function computeAnimationClasses() {\n    if (!animation) return null;\n\n    if (isStr(animation)) {\n      return cx({\n        [`${STYLE.animationWillEnter}${animation}`]:\n          animation && visible && !willLeave,\n        [`${STYLE.animationWillLeave}${animation} ${STYLE.animationWillLeave}'disabled'`]:\n          animation && visible && willLeave,\n      });\n    } else if ('enter' in animation && 'exit' in animation) {\n      return cx({\n        [`${STYLE.animationWillEnter}${animation.enter}`]:\n          animation.enter && visible && !willLeave,\n        [`${STYLE.animationWillLeave}${animation.exit} ${STYLE.animationWillLeave}'disabled'`]:\n          animation.exit && visible && willLeave,\n      });\n    }\n\n    return null;\n  }\n\n  const { visible, triggerEvent, propsFromTrigger, x, y, willLeave } = state;\n  const cssClasses = cx(\n    STYLE.menu,\n    className,\n    { [`${STYLE.theme}${theme}`]: theme },\n    computeAnimationClasses()\n  );\n\n  const menuStyle = {\n    ...style,\n    left: x,\n    top: y,\n    opacity: 1,\n  };\n\n  return (\n    <RefTrackerProvider refTracker={refTracker}>\n      {visible && (\n        <div\n          {...rest}\n          className={cssClasses}\n          onAnimationEnd={handleAnimationEnd}\n          style={menuStyle}\n          ref={nodeRef}\n          role=\"menu\"\n        >\n          {cloneItems(children, {\n            propsFromTrigger,\n            triggerEvent,\n          })}\n        </div>\n      )}\n    </RefTrackerProvider>\n  );\n};\n","import React, { ReactNode } from 'react';\nimport cx from 'clsx';\n\nimport {\n  ItemParams,\n  InternalProps,\n  BooleanPredicate,\n  HandlerParamsEvent,\n} from '../types';\nimport { useRefTrackerContext } from './RefTrackerProvider';\nimport { NOOP, STYLE } from '../constants';\nimport { getPredicateValue } from './utils';\n\nexport interface ItemProps\n  extends InternalProps,\n    Omit<React.HTMLAttributes<HTMLElement>, 'hidden' | 'disabled' | 'onClick'> {\n  /**\n   * Any valid node that can be rendered\n   */\n  children: ReactNode;\n\n  /**\n   * Passed to the `Item` onClick callback. Accessible via `data`\n   */\n  data?: any;\n\n  /**\n   * Disable `Item`. If a function is used, a boolean must be returned\n   *\n   * @param props The props passed when you called `show(e, {props: yourProps})`\n   * @param data The data defined on the `Item`\n   * @param triggerEvent The event that triggered the context menu\n   *\n   *\n   * ```\n   * function isItemDisabled({ triggerEvent, props, data }: PredicateParams<type of props, type of data>): boolean\n   * <Item disabled={isItemDisabled} data={data}>content</Item>\n   * ```\n   */\n  disabled?: BooleanPredicate;\n\n  /**\n   * Hide the `Item`. If a function is used, a boolean must be returned\n   *\n   * @param props The props passed when you called `show(e, {props: yourProps})`\n   * @param data The data defined on the `Item`\n   * @param triggerEvent The event that triggered the context menu\n   *\n   *\n   * ```\n   * function isItemHidden({ triggerEvent, props, data }: PredicateParams<type of props, type of data>): boolean\n   * <Item hidden={isItemHidden} data={data}>content</Item>\n   * ```\n   */\n  hidden?: BooleanPredicate;\n\n  /**\n   * Callback when the `Item` is clicked.\n   *\n   * @param event The event that occured on the Item node\n   * @param props The props passed when you called `show(e, {props: yourProps})`\n   * @param data The data defined on the `Item`\n   * @param triggerEvent The event that triggered the context menu\n   *\n   * ```\n   * function handleItemClick({ triggerEvent, event, props, data }: ItemParams<type of props, type of data>){\n   *    // retrieve the id of the Item or any other dom attribute\n   *    const id = e.currentTarget.id;\n   *\n   *    // access the props and the data\n   *    console.log(props, data);\n   *\n   *    // access the coordinate of the mouse when the menu has been displayed\n   *    const {  clientX, clientY } = triggerEvent;\n   *\n   * }\n   *\n   * <Item id=\"item-id\" onClick={handleItemClick} data={{key: 'value'}}>Something</Item>\n   * ```\n   */\n  onClick?: (args: ItemParams) => void;\n}\n\nexport const Item: React.FC<ItemProps> = ({\n  children,\n  className,\n  style,\n  triggerEvent,\n  data,\n  propsFromTrigger,\n  onClick = NOOP,\n  disabled = false,\n  hidden = false,\n  ...rest\n}) => {\n  const refTracker = useRefTrackerContext();\n  const handlerParams = {\n    data,\n    triggerEvent: triggerEvent as HandlerParamsEvent,\n    props: propsFromTrigger,\n  };\n  const isDisabled = getPredicateValue(disabled, handlerParams);\n  const isHidden = getPredicateValue(hidden, handlerParams);\n\n  function handleClick(e: React.MouseEvent<HTMLElement>) {\n    (handlerParams as ItemParams).event = e;\n    isDisabled ? e.stopPropagation() : onClick(handlerParams as ItemParams);\n  }\n\n  function trackRef(node: HTMLElement | null) {\n    if (node && !isDisabled)\n      refTracker.set(node, {\n        node,\n        isSubmenu: false,\n      });\n  }\n\n  function handleKeyDown(e: React.KeyboardEvent<HTMLElement>) {\n    if (e.key === 'Enter') {\n      (handlerParams as ItemParams).event = e;\n      onClick(handlerParams as ItemParams);\n    }\n  }\n\n  if (isHidden) return null;\n\n  const cssClasses = cx(STYLE.item, className, {\n    [`${STYLE.itemDisabled}`]: isDisabled,\n  });\n\n  return (\n    <div\n      {...rest}\n      className={cssClasses}\n      style={style}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n      ref={trackRef}\n      tabIndex={-1}\n      role=\"menuitem\"\n      aria-disabled={isDisabled}\n    >\n      <div className={STYLE.itemContent}>{children}</div>\n    </div>\n  );\n};\n","import { useEffect, useRef } from 'react';\n\nexport function usePrevious<T>(value: T) {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n}\n","import { RefTrackerValue } from '../hooks';\nimport { STYLE } from '../constants';\n\ninterface Menu<T = RefTrackerValue> {\n  items: T[];\n  isRoot: boolean;\n  focusedIndex: number;\n  parentNode: HTMLElement;\n}\n\n/**\n * Used to control keyboard navigation\n */\nexport function createMenuController() {\n  const menuList = new Map<HTMLElement, Menu>();\n  let focusedIndex: number;\n  let parentNode: HTMLElement;\n  let isAtRoot: boolean;\n  let currentItems: RefTrackerValue[];\n  let forceCloseSubmenu = false;\n\n  function init(rootMenu: RefTrackerValue[]) {\n    currentItems = rootMenu;\n    focusedIndex = -1;\n    isAtRoot = true;\n  }\n\n  function focusSelectedItem() {\n    currentItems[focusedIndex].node.focus();\n  }\n\n  function isSubmenuFocused() {\n    return focusedIndex >= 0 && currentItems[focusedIndex].isSubmenu;\n  }\n\n  function getSubmenuItems() {\n    return Array.from(currentItems[focusedIndex].submenuRefTracker!.values());\n  }\n\n  function isFocused() {\n    if (focusedIndex === -1) {\n      // focus first item\n      moveDown();\n      return false;\n    }\n\n    return true;\n  }\n\n  function moveDown() {\n    if (focusedIndex + 1 < currentItems.length) {\n      focusedIndex++;\n    } else if (focusedIndex + 1 === currentItems.length) {\n      focusedIndex = 0;\n    }\n\n    if (forceCloseSubmenu) closeSubmenu();\n\n    focusSelectedItem();\n  }\n\n  function moveUp() {\n    if (focusedIndex === -1 || focusedIndex === 0) {\n      focusedIndex = currentItems.length - 1;\n    } else if (focusedIndex - 1 < currentItems.length) {\n      focusedIndex--;\n    }\n\n    if (forceCloseSubmenu) closeSubmenu();\n\n    focusSelectedItem();\n  }\n\n  function openSubmenu() {\n    if (isFocused() && isSubmenuFocused()) {\n      const submenuItems = getSubmenuItems();\n      const currentNode = currentItems[focusedIndex].node;\n\n      menuList.set(currentNode, {\n        isRoot: isAtRoot,\n        focusedIndex,\n        parentNode: parentNode || currentNode,\n        items: currentItems,\n      });\n\n      currentNode.classList.add(STYLE.submenuOpen);\n      parentNode = currentNode;\n\n      if (submenuItems.length > 0) {\n        focusedIndex = 0;\n        currentItems = submenuItems;\n      } else {\n        forceCloseSubmenu = true;\n      }\n\n      isAtRoot = false;\n\n      focusSelectedItem();\n      return true;\n    }\n    return false;\n  }\n\n  function closeSubmenu() {\n    if (isFocused() && !isAtRoot) {\n      const {\n        isRoot,\n        items,\n        focusedIndex: parentFocusedIndex,\n        parentNode: menuParentNode,\n      } = menuList.get(parentNode)!;\n\n      parentNode.classList.remove(STYLE.submenuOpen);\n\n      currentItems = items;\n      parentNode = menuParentNode;\n\n      if (isRoot) {\n        isAtRoot = true;\n        menuList.clear();\n      }\n      if (!forceCloseSubmenu) {\n        focusedIndex = parentFocusedIndex;\n        focusSelectedItem();\n      }\n    }\n  }\n\n  return {\n    init,\n    moveDown,\n    moveUp,\n    openSubmenu,\n    closeSubmenu,\n  };\n}\n","import React from 'react';\n\nimport { STYLE } from '../constants';\n\nexport function Separator() {\n  return <div className={STYLE.separator} />;\n}\n","import React, { ReactNode, useEffect, useRef, useState } from 'react';\nimport cx from 'clsx';\n\nimport { InternalProps, BooleanPredicate, HandlerParamsEvent } from '../types';\nimport { RefTrackerProvider, useRefTrackerContext } from './RefTrackerProvider';\nimport { useRefTracker } from '../hooks';\nimport { STYLE } from '../constants';\nimport { cloneItems, getPredicateValue } from './utils';\n\nexport interface SubMenuProps\n  extends InternalProps,\n    Omit<React.HTMLAttributes<HTMLElement>, 'hidden'> {\n  /**\n   * Any valid node that can be rendered\n   */\n  label: ReactNode;\n\n  /**\n   * Any valid node that can be rendered\n   */\n  children: ReactNode;\n\n  /**\n   * Render a custom arrow\n   */\n  arrow?: ReactNode;\n\n  /**\n   * Disable the `Submenu`. If a function is used, a boolean must be returned\n   */\n  disabled?: BooleanPredicate;\n\n  /**\n   * Hide the `Submenu` and his children. If a function is used, a boolean must be returned\n   */\n  hidden?: BooleanPredicate;\n}\n\ninterface SubMenuState {\n  left?: string | number;\n  right?: string | number;\n  top?: string | number;\n  bottom?: string | number;\n}\n\nexport const Submenu: React.FC<SubMenuProps> = ({\n  arrow = '▶',\n  children,\n  disabled = false,\n  hidden = false,\n  label,\n  className,\n  triggerEvent,\n  propsFromTrigger,\n  style,\n  ...rest\n}) => {\n  const menuRefTracker = useRefTrackerContext();\n  const refTracker = useRefTracker();\n  const nodeRef = useRef<HTMLDivElement>(null);\n  const [position, setPosition] = useState<SubMenuState>({\n    left: '100%',\n    top: 0,\n    bottom: 'initial',\n  });\n  const handlerParams = {\n    triggerEvent: triggerEvent as HandlerParamsEvent,\n    props: propsFromTrigger,\n  };\n  const isDisabled = getPredicateValue(disabled, handlerParams);\n  const isHidden = getPredicateValue(hidden, handlerParams);\n\n  useEffect(() => {\n    if (nodeRef.current) {\n      const { innerWidth, innerHeight } = window;\n      const rect = nodeRef.current.getBoundingClientRect();\n      const style: SubMenuState = {};\n\n      if (rect.right < innerWidth) {\n        style.left = '100%';\n        style.right = undefined;\n      } else {\n        style.right = '100%';\n        style.left = undefined;\n      }\n\n      if (rect.bottom > innerHeight) {\n        style.bottom = 0;\n        style.top = 'initial';\n      } else {\n        style.bottom = 'initial';\n      }\n\n      setPosition(style);\n    }\n  }, []);\n\n  function handleClick(e: React.SyntheticEvent) {\n    e.stopPropagation();\n  }\n\n  function trackRef(node: HTMLElement | null) {\n    if (node && !isDisabled)\n      menuRefTracker.set(node, {\n        node,\n        isSubmenu: true,\n        submenuRefTracker: refTracker,\n      });\n  }\n\n  if (isHidden) return null;\n\n  const cssClasses = cx(STYLE.item, className, {\n    [`${STYLE.itemDisabled}`]: isDisabled,\n  });\n\n  const submenuStyle = {\n    ...style,\n    ...position,\n  };\n\n  return (\n    <RefTrackerProvider refTracker={refTracker}>\n      <div\n        {...rest}\n        className={cssClasses}\n        ref={trackRef}\n        tabIndex={-1}\n        role=\"menuitem\"\n        aria-haspopup\n        aria-disabled={isDisabled}\n      >\n        <div className={STYLE.itemContent} onClick={handleClick}>\n          {label}\n          <span className={STYLE.submenuArrow}>{arrow}</span>\n        </div>\n        <div className={STYLE.submenu} ref={nodeRef} style={submenuStyle}>\n          {cloneItems(children, {\n            propsFromTrigger,\n            // injected by the parent\n            triggerEvent: triggerEvent!,\n          })}\n        </div>\n      </div>\n    </RefTrackerProvider>\n  );\n};\n","import { contextMenu } from '../core';\nimport { ContextMenuParams, TriggerEvent } from '../types';\n\nexport type UseContextMenuProps = Partial<\n  Pick<ContextMenuParams, 'id' | 'props'>\n>;\n\nexport function useContextMenu(props?: UseContextMenuProps) {\n  return {\n    show(event: TriggerEvent, params?: Omit<ContextMenuParams, 'event'>) {\n      if (process.env.NODE_ENV === 'development') {\n        if (!props?.id && !params?.id)\n          console.error(\n            \"You need to provide an id when initializing the hook `useContextMenu({ id: 'your id' })` or when you display the menu `show(e, { id: 'your id' })`. The later is used to override the one defined during initialization.\"\n          );\n      }\n      contextMenu.show({\n        id: (params?.id || props?.id) as string,\n        props: params?.props || props?.props,\n        event: event,\n        position: params?.position,\n      });\n    },\n    hideAll() {\n      contextMenu.hideAll();\n    },\n  };\n}\n"],"names":["Context","createContext","useRefTrackerContext","useContext","RefTrackerProvider","props","React","Provider","value","refTracker","children","createEventManager","eventList","Map","on","event","handler","has","get","_eventList$get","add","set","Set","this","off","emit","args","process","env","NODE","currentEv","console","error","forEach","eventManager","useRefTracker","useRef","current","contextMenu","show","id","position","preventDefault","nativeEvent","hideAll","NOOP","isFn","v","isStr","cloneItems","Children","map","toArray","filter","Boolean","item","cloneElement","getPredicateValue","predicate","payload","reducer","state","className","style","triggerEvent","data","propsFromTrigger","onClick","disabled","hidden","rest","handlerParams","isDisabled","cssClasses","cx","e","stopPropagation","onKeyDown","key","ref","node","isSubmenu","tabIndex","role","theme","animation","onHidden","onShown","useReducer","x","y","visible","willLeave","setState","nodeRef","didMount","wasVisible","useEffect","menuController","useState","focusedIndex","parentNode","isAtRoot","currentItems","menuList","forceCloseSubmenu","focusSelectedItem","focus","isFocused","moveDown","length","closeSubmenu","isRoot","items","parentFocusedIndex","menuParentNode","classList","remove","clear","init","rootMenu","moveUp","openSubmenu","submenuItems","Array","from","submenuRefTracker","values","currentNode","createMenuController","pos","type","isTouchEvent","changedTouches","clientX","clientY","setTimeout","hide","button","ctrlKey","exit","hasExitAnimation","window","windowWidth","innerWidth","windowHeight","innerHeight","menuWidth","offsetWidth","menuHeight","offsetHeight","handleKeyboard","addEventListener","removeEventListener","enter","menuStyle","left","top","opacity","onAnimationEnd","arrow","label","menuRefTracker","bottom","setPosition","isHidden","rect","getBoundingClientRect","right","undefined","submenuStyle","fade","flip","scale","slide","light","dark","params"],"mappings":"ghBAGA,IAAMA,EAAUC,gBAAc,aAKdC,WACPC,aAAWH,GAOb,IAAMI,EAAwD,SAAAC,UAEjEC,gBAACN,EAAQO,UAASC,MAAOH,EAAMI,YAC5BJ,EAAMK,WCRb,SAASC,QACDC,EAAY,IAAIC,UAEf,CACLC,YAAYC,EAAUC,gBAEpBJ,EAAUK,IAAIF,YACVH,EAAUM,IAAIH,KAAdI,EAAsBC,IAAIJ,GAC1BJ,EAAUS,IAAIN,EAAO,IAAIO,IAAI,CAACN,KAC3BO,MAETC,aAAaT,EAAUC,UACrBA,EAAUJ,EAAUM,IAAIH,UAAeC,GAAWJ,SAAiBG,GAC5DQ,MAETE,cAAcV,EAAUW,MACG,eAArBC,QAAQC,IAAIC,KAAuB,KAC/BC,EAAaf,EAEdH,EAAUK,IAAIF,QAAUe,GAC3BC,QAAQC,kIAEmBjB,UAI/BH,EAAUK,IAAIF,IACZH,EAAUM,IAAIH,GAAQkB,SAAQ,SAACjB,GAC7BA,EAAQU,MAELH,OAKN,IAAMW,EAAevB,ICjC5B,SAAgBwB,WACPC,SAA0C,IAAIvB,KAAOwB,YCOxDC,EAA2B,CAC/BC,qBAAOC,IAAAA,GAAIzB,IAAAA,MAAOV,IAAAA,MAAOoC,IAAAA,SACnB1B,EAAM2B,gBAAgB3B,EAAM2B,iBAEhCR,EAAaT,QAAqBA,KAAKe,EAAI,CACzCzB,MAAQA,EAAyB4B,aAAe5B,EAChDV,MAAAA,EACAoC,SAAAA,KAGJG,mBACEV,EAAaT,UCCJoB,EAAO,sBCxBJC,EAAKC,SACC,mBAANA,WAGAC,EAAMD,SACA,iBAANA,WAOAE,EACdvC,EACAL,UAEO6C,WAASC,IAEdD,WAASE,QAAQ1C,GAAU2C,OAAOC,UAClC,SAAAC,UAAQC,eAAaD,EAA2BlD,eAyBpCoD,EACdC,EACAC,UAEOb,EAAKY,GAAaA,EAAUC,GAAWD,EC6BhD,SAASE,EACPC,EACAF,UAEOb,EAAKa,QACHE,EAAUF,EAAQE,SAClBA,EAAUF,gBCToB,kBACvCjD,IAAAA,SACAoD,IAAAA,UACAC,IAAAA,MACAC,IAAAA,aACAC,IAAAA,KACAC,IAAAA,qBACAC,QAAAA,aAAUtB,QACVuB,SAAAA,oBACAC,OAAAA,gBACGC,+GAEG7D,EAAaP,IACbqE,EAAgB,CACpBN,KAAAA,EACAD,aAAcA,EACd3D,MAAO6D,GAEHM,EAAaf,EAAkBW,EAAUG,MAC9Bd,EAAkBY,EAAQE,GAsB7B,OAAO,SAEfE,EAAaC,0BAAeZ,UAC5B,mCAAuBU,aAI3BlE,uCACMgE,GACJR,UAAWW,EACXV,MAAOA,EACPI,iBA/BiBQ,GAClBJ,EAA6BxD,MAAQ4D,EACtCH,EAAaG,EAAEC,kBAAoBT,EAAQI,IA8BzCM,mBAnBmBF,GACP,UAAVA,EAAEG,MACHP,EAA6BxD,MAAQ4D,EACtCR,EAAQI,KAiBRQ,aA5BcC,GACZA,IAASR,GACX/D,EAAWY,IAAI2D,EAAM,CACnBA,KAAAA,EACAC,WAAW,KAyBbC,UAAW,EACXC,KAAK,2BACUX,IAEflE,uBAAKwD,4CAA+BpD,kBD/CD,kBE7FVF,EACvBuE,EF6FNvC,IAAAA,GACA4C,IAAAA,MACArB,IAAAA,MACAD,IAAAA,UACApD,IAAAA,aACA2E,UAAAA,aAAY,cACZC,SAAAA,aAAWzC,QACX0C,QAAAA,aAAU1C,IACPyB,wFAEuBkB,aAAW5B,EAAS,CAC5C6B,EAAG,EACHC,EAAG,EACHC,SAAS,EACT3B,aAAc,GACdE,iBAAkB,KAClB0B,WAAW,IANN/B,OAAOgC,OAQRC,EAAU1D,SAAuB,MACjC2D,EAAW3D,UAAO,GAClB4D,GElHuBxF,EFkHEqD,EAAM8B,QEjH/BZ,EAAM3C,WAEZ6D,aAAU,WACRlB,EAAI1C,QAAU7B,IACb,CAACA,IAEGuE,EAAI1C,SF4GL5B,EAAa0B,IACZ+D,EAAkBC,YAAS,kBGzGpC,eAEMC,EACAC,EACAC,EACAC,EAJEC,EAAW,IAAI3F,IAKjB4F,GAAoB,WAQfC,IACPH,EAAaH,GAAcpB,KAAK2B,iBAWzBC,WACe,IAAlBR,IAEFS,KACO,YAMFA,IACHT,EAAe,EAAIG,EAAaO,OAClCV,IACSA,EAAe,IAAMG,EAAaO,SAC3CV,EAAe,GAGbK,GAAmBM,IAEvBL,aA6COK,OACHH,MAAgBN,EAAU,OAMxBE,EAAStF,IAAImF,GAJfW,IAAAA,OACAC,IAAAA,MACcC,IAAdd,aACYe,IAAZd,WAGFA,EAAWe,UAAUC,4CAErBd,EAAeU,EACfZ,EAAac,EAETH,IACFV,GAAW,EACXE,EAASc,SAENb,IACHL,EAAec,EACfR,YAKC,CACLa,cA5GYC,GACZjB,EAAeiB,EACfpB,GAAgB,EAChBE,GAAW,GA0GXO,SAAAA,EACAY,mBArEsB,IAAlBrB,GAAwC,IAAjBA,EACzBA,EAAeG,EAAaO,OAAS,EAC5BV,EAAe,EAAIG,EAAaO,QACzCV,IAGEK,GAAmBM,IAEvBL,KA8DAgB,0BA1DId,KA1CGR,GAAgB,GAAKG,EAAaH,GAAcnB,UA0ChB,KAC/B0C,EAvCDC,MAAMC,KAAKtB,EAAaH,GAAc0B,kBAAmBC,UAwCxDC,EAAczB,EAAaH,GAAcpB,YAE/CwB,EAASnF,IAAI2G,EAAa,CACxBhB,OAAQV,EACRF,aAAAA,EACAC,WAAYA,GAAc2B,EAC1Bf,MAAOV,IAGTyB,EAAYZ,UAAUhG,yCACtBiF,EAAa2B,EAETL,EAAab,OAAS,GACxBV,EAAe,EACfG,EAAeoB,GAEflB,GAAoB,EAGtBH,GAAW,EAEXI,KACO,SAEF,GAiCPK,aAAAA,GHfsCkB,kBAkH/B1F,SAAOxB,IAAAA,MAAOV,IAAAA,MAAOoC,IAAAA,SAC5B1B,EAAM6D,sBDzMuBD,EACzBuD,ICyMazF,IDzMbyF,EAAM,CACVzC,EAAG,EACHC,EAAG,YAlBsBf,SACT,aAAXA,EAAEwD,KAoBLC,CAN2BzD,EC0MiB5D,IDpMzB4D,EAAE0D,gBAAkB1D,EAAE0D,eAAevB,OAAS,GACnEoB,EAAIzC,EAAId,EAAE0D,eAAe,GAAGC,QAC5BJ,EAAIxC,EAAIf,EAAE0D,eAAe,GAAGE,UAE5BL,EAAIzC,EAAKd,EAAiB2D,QAC1BJ,EAAIxC,EAAKf,EAAiB4D,WAGvBL,EAAIzC,GAAKyC,EAAIzC,EAAI,KAAGyC,EAAIzC,EAAI,KAE5ByC,EAAIxC,GAAKwC,EAAIxC,EAAI,KAAGwC,EAAIxC,EAAI,GAE1BwC,GCwLGzC,IAAAA,EAAGC,IAAAA,EAIX8C,YAAW,WACT3C,EAAS,CACPF,SAAS,EACTC,WAAW,EACXH,EAAAA,EACAC,EAAAA,EACA1B,aAAcjD,EACdmD,iBAAkB7D,MAEnB,YAGIoI,EAAK1H,SAMG,IAHLA,GAIM,IAJNA,EAIL2H,SAA8B,IAJzB3H,EAIa4H,SACV,gBALH5H,EAKNoH,iBDtMyB9C,YAE7BA,KACCrC,EAAMqC,IAAe,SAAUA,GAAaA,EAAUuD,OCwMvDC,CAAiBxD,GACbQ,GAAS,SAAAhC,SAAU,CAAE+B,UAAW/B,EAAM8B,YACtCE,GAAS,SAAAhC,SAAU,CAAE8B,SAAS9B,EAAM8B,SAAkB9B,EAAM8B,aAhJlEM,aAAU,kBACRF,EAAS1D,SAAU,EACnBH,EAAapB,GAAG0B,EAAID,GAAMzB,KAAmB2H,GAEtC,WACLvG,EAAaV,IAAIgB,EAAID,GAAMf,MAAoBiH,MAIhD,CAACjG,IAGJyD,aAAU,WACJF,EAAS1D,SAAWwB,EAAM8B,UAAYK,IACxCnC,EAAM8B,QAAUJ,IAAYD,OAI7B,CAACzB,EAAM8B,QAASL,EAAUC,IAG7BU,aAAU,WACHpC,EAAM8B,QAGTO,EAAeqB,KAAKK,MAAMC,KAAKpH,EAAWsH,WAF1CtH,EAAW6G,UAIZ,CAACzD,EAAM8B,QAASO,EAAgBzF,IAGnCwF,aAAU,cACJpC,EAAM8B,QAAS,OAC8CmD,OAA3CC,IAAZC,WAAsCC,IAAbC,cAI7BpD,EAAQzD,QAFG8G,IAAbC,YACcC,IAAdC,aAEI7D,EAAS5B,EAAT4B,EAAGC,EAAM7B,EAAN6B,EAELD,EAAI0D,EAAYJ,IAClBtD,GAAKA,EAAI0D,EAAYJ,GAGnBrD,EAAI2D,EAAaJ,IACnBvD,GAAKA,EAAI2D,EAAaJ,GAGxBpD,EAAS,CACPJ,EAAAA,EACAC,EAAAA,OAMH,CAAC7B,EAAM8B,UAGVM,aAAU,oBACCsD,EAAe5E,UACtBA,EAAEjC,iBACMiC,EAAEG,SACH,QACEoB,EAAewB,eAAee,cAEhC,SACHA,cAEG,UACHvC,EAAeuB,mBAEZ,YACHvB,EAAeW,qBAEZ,aACHX,EAAewB,wBAEZ,YACHxB,EAAea,uBAKjBlD,EAAM8B,UACRmD,OAAOU,iBAAiB,SAAUf,GAClCK,OAAOU,iBAAiB,cAAef,GACvCK,OAAOU,iBAAiB,QAASf,GACjCK,OAAOU,iBAAiB,SAAUf,GAClCK,OAAOU,iBAAiB,UAAWD,GAIjCT,OAAOU,iBAAiB,OAAQf,IAI7B,WACLK,OAAOW,oBAAoB,SAAUhB,GACrCK,OAAOW,oBAAoB,cAAehB,GAC1CK,OAAOW,oBAAoB,QAAShB,GACpCK,OAAOW,oBAAoB,SAAUhB,GACrCK,OAAOW,oBAAoB,UAAWF,GAGpCT,OAAOW,oBAAoB,OAAQhB,MAKtC,CAAC5E,EAAM8B,QAASO,YAkEXP,EAA6D9B,EAA7D8B,QAAS3B,EAAoDH,EAApDG,aAAcE,EAAsCL,EAAtCK,iBAAkBuB,EAAoB5B,EAApB4B,EAAGC,EAAiB7B,EAAjB6B,EAAGE,EAAc/B,EAAd+B,UACjDnB,EAAaC,oBAEjBZ,UACM,2BAAcsB,GAAUA,KAzBzBC,EAEDrC,EAAMqC,GACDX,UACD,gCAA2BW,GAC7BA,GAAaM,IAAYC,IACvB,gCAA2BP,EAA3B,4CACFA,GAAaM,GAAWC,MAEnB,UAAWP,GAAa,SAAUA,EACpCX,UACD,gCAA2BW,EAAUqE,OACvCrE,EAAUqE,OAAS/D,IAAYC,IAC7B,gCAA2BP,EAAUuD,KAArC,4CACFvD,EAAUuD,MAAQjD,GAAWC,MAI5B,KAlBgB,MA6BnB+D,OACD5F,GACH6F,KAAMnE,EACNoE,IAAKnE,EACLoE,QAAS,WAITxJ,gBAACF,GAAmBK,WAAYA,GAC7BkF,GACCrF,uCACMgE,GACJR,UAAWW,EACXsF,0BAhDFlG,EAAM+B,WAAa/B,EAAM8B,SAC3BE,EAAS,CAAEF,SAAS,EAAOC,WAAW,KAgDlC7B,MAAO4F,EACP5E,IAAKe,EACLX,KAAK,SAEJlC,EAAWvC,EAAU,CACpBwD,iBAAAA,EACAF,aAAAA,2CI/TH1D,uBAAKwD,0DCwCiC,sBAC7CkG,MAAAA,aAAQ,MACRtJ,IAAAA,aACA0D,SAAAA,oBACAC,OAAAA,gBACA4F,IAAAA,MACAnG,IAAAA,UACAE,IAAAA,aACAE,IAAAA,iBACAH,IAAAA,MACGO,8GAEG4F,EAAiBhK,IACjBO,EAAa0B,IACb2D,EAAU1D,SAAuB,QACP+D,WAAuB,CACrDyD,KAAM,OACNC,IAAK,EACLM,OAAQ,YAHH1H,OAAU2H,OAKX7F,EAAgB,CACpBP,aAAcA,EACd3D,MAAO6D,GAEHM,EAAaf,EAAkBW,EAAUG,GACzC8F,EAAW5G,EAAkBY,EAAQE,MAE3C0B,aAAU,cACJH,EAAQzD,QAAS,OACiByG,OAA5BE,IAAAA,WAAYE,IAAAA,YACdoB,EAAOxE,EAAQzD,QAAQkI,wBACvBxG,EAAsB,GAExBuG,EAAKE,MAAQxB,GACfjF,EAAM6F,KAAO,OACb7F,EAAMyG,WAAQC,IAEd1G,EAAMyG,MAAQ,OACdzG,EAAM6F,UAAOa,GAGXH,EAAKH,OAASjB,GAChBnF,EAAMoG,OAAS,EACfpG,EAAM8F,IAAM,WAEZ9F,EAAMoG,OAAS,UAGjBC,EAAYrG,MAEb,IAeCsG,EAAU,OAAO,SAEf5F,EAAaC,0BAAeZ,UAC5B,mCAAuBU,MAGvBkG,OACD3G,EACAtB,UAIHnC,gBAACF,GAAmBK,WAAYA,GAC9BH,uCACMgE,GACJR,UAAWW,EACXM,aAzBYC,GACZA,IAASR,GACX0F,EAAe7I,IAAI2D,EAAM,CACvBA,KAAAA,EACAC,WAAW,EACX6C,kBAAmBrH,KAqBnByE,UAAW,EACXC,KAAK,8CAEUX,IAEflE,uBAAKwD,2CAA8BK,iBAnCpBQ,GACnBA,EAAEC,oBAmCKqF,EACD3J,wBAAMwD,4CAAgCkG,IAExC1J,uBAAKwD,qDAA0BiB,IAAKe,EAAS/B,MAAO2G,GACjDzH,EAAWvC,EAAU,CACpBwD,iBAAAA,EAEAF,aAAcA,0BPlHD,CACvB2G,KAAM,OACNC,KAAM,OACNC,MAAO,QACPC,MAAO,6CATY,CACnBC,MAAO,QACPC,KAAM,wCQhBuB3K,SACtB,CACLkC,cAAKxB,EAAqBkK,GAOxB3I,EAAYC,KAAK,CACfC,UAAKyI,SAAAA,EAAQzI,YAAMnC,SAAAA,EAAOmC,IAC1BnC,aAAO4K,SAAAA,EAAQ5K,eAASA,SAAAA,EAAOA,OAC/BU,MAAOA,EACP0B,eAAUwI,SAAAA,EAAQxI,YAGtBG,mBACEN,EAAYM"}